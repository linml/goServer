// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/mjgame.proto

/*
Package mjgame is a generated protocol buffer package.

It is generated from these files:
	proto/mjgame.proto

It has these top-level messages:
	Message
	Login
	Room_List
	Create_Room
	Match_Room
	Cancel_Match_Room
	RuleItem
	Find_Room
	Disband_Room
	Roomowner_Disband_Room
	Room_Info
	Into_Room
	Into_MatchRoom
	ExitRoom
	SitDown
	StandUp
	User_Info
	UserReady
	User_Seat
	Start_Game
	Restart_Game
	Get_CurUser
	Get_User_Card_Count
	Put_Card
	Chow
	Peng
	Kong
	Ting
	Win
	Pass
	Benefits
	Change3Card
	FixMiss
	Chat
	MessageJson
	KickRequest
	KickResponse
	ACK_Login
	ACK_User_Info
	ACK_Room_Info
	ACK_Room_User
	ACK_Room_List
	ACK_Find_Room
	ACK_MSG
	ACKBC_Into_Room
	ACK_Into_MatchRoom
	ACKBC_Exit_Room
	ACK_Create_Room
	ACK_Cancel_Match_Room
	ACK_Match_Room
	ACKBC_Ready
	Room_State
	ACKBC_Sitdown
	ACKBC_Standup
	ACKBC_Card_Init
	ACK_User_SeatCard
	ACKBC_Start
	ACK_UserCard
	ACK_StartChange3Card
	ACK_StartFixMiss
	ACK_Change3Card_OK
	ACKBC_FixMiss_OK
	ACKBC_CurPlayer
	ACKBC_GetCard
	ACKBC_PutCard
	ACK_WaitTool
	ACKBC_Chow
	ACKBC_Peng
	ACKBC_Kong
	ACKBC_Win
	ACKBC_Draw
	Reward
	ACKBC_Total
	ACKBC_RoundScore
	ACKBC_EffectEvent
	ACK_Benefits
	ACK_NeedBenefits
	ACKBC_Restart
	Card
	SeatCard
	ErrorItem
	ACKBC_SendMsg
	ACK_MessageJson
	NotifyStartGame
	Notice
	NoticeInfo
	AckNotice
	Summary
	TotalSummary
	Disband
	DisbandItem
	AckDisband
	Vote
	NotifyDisband
	BattleRecord
	BattleRecordRequest
	BattleRecordResponse
	HomeOwner
	HomeOwnerRequest
	HomeOwnerResponse
	RoomSummaryRequest
	RoomSummaryResponse
	ACK_BattleDetail
	PlayerBattleDetail
	PlayerBattleInfo
	NotifyUserState
	Tip
	NotifyKick
	NotifyDestoryRoom
	NotifyRecharge
	NotifyRechargeResponse
	TransferHuaRequest
	TransferHuaResponse
	Gift
	BattleDetail
	ACK_Gift
	GameNotice
	Sddz_Jiaofen
	Sddz_Mingpai
	Sddz_Jiabei
	Sddz_Chupai
	Sddz_Pass
	Srddz_Baodao
	Srddz_StrictWin
	Nn_Xiazhu
	ACKBC_Sddz_Jiaofen
	ACKBC_Sddz_Dizhu
	ACKBC_Sddz_Pass
	ACKBC_Sddz_End
	ACKBC_Sddz_Total
	ACKBC_Sddz_Card_Init
	ACKBC_Sddz_Start
	ACKBC_Sddz_Chupai
	ACKBC_Sddz_JiaoDizhu
	ACKBC_Sddz_Mingpai
	ACKBC_Sddz_Jiabei
	ACKBC_Srddz_Baodao
	ACKBC_Srddz_StrictWin
	ACKBC_Nn_Xiazhu
	SddzPerCards
	SddzPerTotal
*/
package mjgame

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Direction int32

const (
	Direction_EAST  Direction = 0
	Direction_SOUTH Direction = 1
	Direction_WEST  Direction = 2
	Direction_NORTH Direction = 3
)

var Direction_name = map[int32]string{
	0: "EAST",
	1: "SOUTH",
	2: "WEST",
	3: "NORTH",
}
var Direction_value = map[string]int32{
	"EAST":  0,
	"SOUTH": 1,
	"WEST":  2,
	"NORTH": 3,
}

func (x Direction) String() string {
	return proto.EnumName(Direction_name, int32(x))
}
func (Direction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MsgID int32

const (
	// REQ --------------
	MsgID_MSG_NO                     MsgID = 0
	MsgID_MSG_OK                     MsgID = 1
	MsgID_MSG_Login                  MsgID = 100
	MsgID_MSG_Room_List              MsgID = 110
	MsgID_MSG_Create_Room            MsgID = 120
	MsgID_MSG_Match_Room             MsgID = 121
	MsgID_MSG_Cancel_Match_Room      MsgID = 122
	MsgID_MSG_RuleItem               MsgID = 130
	MsgID_MSG_Find_Room              MsgID = 140
	MsgID_MSG_Disband_Room           MsgID = 150
	MsgID_MSG_Roomowner_Disband_Room MsgID = 151
	MsgID_MSG_Room_Info              MsgID = 160
	MsgID_MSG_Into_Room              MsgID = 170
	MsgID_MSG_Into_MatchRoom         MsgID = 180
	MsgID_MSG_Exit_Room              MsgID = 190
	MsgID_MSG_Sitdown                MsgID = 195
	MsgID_MSG_Standup                MsgID = 196
	MsgID_MSG_User_Info              MsgID = 200
	MsgID_MSG_User_Ready             MsgID = 210
	MsgID_MSG_Start_Game             MsgID = 220
	MsgID_MSG_Restart_Game           MsgID = 230
	// MSG_User_Leave 		= 240;
	MsgID_MSG_Get_CurUser         MsgID = 250
	MsgID_MSG_Get_User_Card_Count MsgID = 260
	MsgID_MSG_Put_Card            MsgID = 270
	MsgID_MSG_Get_UserCard        MsgID = 280
	MsgID_MSG_Chow                MsgID = 290
	MsgID_MSG_Peng                MsgID = 300
	MsgID_MSG_Kong                MsgID = 310
	MsgID_MSG_Ting                MsgID = 315
	MsgID_MSG_Win                 MsgID = 320
	MsgID_MSG_Pass                MsgID = 330
	MsgID_MSG_Benefits            MsgID = 340
	MsgID_MSG_Change3Card         MsgID = 350
	MsgID_MSG_FixMiss             MsgID = 360
	MsgID_MSG_Chat                MsgID = 370
	MsgID_MSG_MessageJson         MsgID = 380
	MsgID_MSG_Notice              MsgID = 390
	MsgID_MSG_Disband             MsgID = 400
	MsgID_MSG_Vote                MsgID = 401
	MsgID_MSG_Battle_Record       MsgID = 402
	MsgID_MSG_Home_Owner          MsgID = 403
	MsgID_MSG_Room_Summary        MsgID = 404
	MsgID_MSG_Room_Kick           MsgID = 405
	MsgID_MSG_Gift                MsgID = 410
	MsgID_MSG_BattleDetail        MsgID = 411
	// 三人斗地主相关
	MsgID_MSG_Sddz_Jiaofen    MsgID = 1200
	MsgID_MSG_Sddz_Mingpai    MsgID = 1201
	MsgID_MSG_Sddz_Jiabei     MsgID = 1202
	MsgID_MSG_Sddz_Chupai     MsgID = 1203
	MsgID_MSG_Sddz_Pass       MsgID = 1204
	MsgID_MSG_Srddz_Baodao    MsgID = 1205
	MsgID_MSG_Srddz_StrictWin MsgID = 1206
	// 拼十相关
	MsgID_MSG_Nn_Xiazhu MsgID = 1207
	// ACK -------------
	MsgID_MSG_ACK_Error             MsgID = -1
	MsgID_MSG_ACK_Login             MsgID = 500
	MsgID_MSG_ACK_User_Info         MsgID = 510
	MsgID_MSG_ACK_RoomInfo          MsgID = 520
	MsgID_MSG_ACK_Room_User         MsgID = 525
	MsgID_MSG_ACK_Room_List         MsgID = 530
	MsgID_MSG_ACK_Find_Room         MsgID = 540
	MsgID_MSG_ACK_MSG               MsgID = 550
	MsgID_MSG_ACKBC_Into_Room       MsgID = 560
	MsgID_MSG_ACK_Into_MatchRoom    MsgID = 570
	MsgID_MSG_ACKBC_Exit_Room       MsgID = 580
	MsgID_MSG_ACK_Create_Room       MsgID = 590
	MsgID_MSG_ACK_Cancel_Match_Room MsgID = 591
	MsgID_MSG_ACK_Match_Room        MsgID = 592
	MsgID_MSG_ACKBC_Ready           MsgID = 600
	MsgID_MSG_Room_State            MsgID = 605
	MsgID_MSG_ACKBC_Sitdown         MsgID = 607
	MsgID_MSG_ACKBC_Standup         MsgID = 608
	MsgID_MSG_ACKBC_Card_Init       MsgID = 610
	MsgID_MSG_ACK_User_SeatCard     MsgID = 615
	MsgID_MSG_ACKBC_Start           MsgID = 620
	MsgID_MSG_ACK_UserCard          MsgID = 650
	MsgID_MSG_ACK_StartChange3Card  MsgID = 660
	MsgID_MSG_ACK_StartFixMiss      MsgID = 670
	MsgID_MSG_ACK_Change3Card_OK    MsgID = 680
	MsgID_MSG_ACKBC_FixMiss_OK      MsgID = 690
	MsgID_MSG_ACKBC_CurPlayer       MsgID = 700
	MsgID_MSG_ACKBC_GetCard         MsgID = 710
	MsgID_MSG_ACKBC_PutCard         MsgID = 720
	MsgID_MSG_ACK_WaitTool          MsgID = 730
	MsgID_MSG_ACKBC_Chow            MsgID = 740
	MsgID_MSG_ACKBC_Peng            MsgID = 750
	MsgID_MSG_ACKBC_Kong            MsgID = 760
	MsgID_MSG_ACKBC_Win             MsgID = 770
	MsgID_MSG_ACKBC_Draw            MsgID = 780
	MsgID_MSG_ACKBC_Total           MsgID = 790
	MsgID_MSG_ACKBC_Disband_Room    MsgID = 800
	MsgID_MSG_ACKBC_RoundScore      MsgID = 810
	MsgID_MSG_ACKBC_EffectEvent     MsgID = 820
	MsgID_MSG_ACK_Benefits          MsgID = 830
	MsgID_MSG_ACK_NeedBenefits      MsgID = 840
	MsgID_MSG_ACKBC_Restart         MsgID = 850
	MsgID_MSG_Card                  MsgID = 860
	MsgID_MSG_SeatCard              MsgID = 870
	MsgID_MSG_ACKBC_Chat            MsgID = 880
	MsgID_MSG_ACK_MessageJson       MsgID = 890
	MsgID_MSG_ACK_Notice            MsgID = 910
	MsgID_MSG_UPDATE_USERINFO       MsgID = 930
	MsgID_MSG_ACKBC_KICK            MsgID = 980
	MsgID_MSG_ACK_NOTIFY_RECHARGE   MsgID = 991
	MsgID_MSG_ACKBC_TRANSFER_HUA    MsgID = 992
	MsgID_MSG_ACK_Battle_Record     MsgID = 950
	MsgID_MSG_ACK_Home_Owner        MsgID = 951
	MsgID_MSG_ACK_Room_Summary      MsgID = 952
	MsgID_MSG_ACK_BattleDetail      MsgID = 953
	MsgID_MSG_ACK_Gift              MsgID = 1000
	// notify
	MsgID_MSG_NOTIFY_START_GAME   MsgID = 900
	MsgID_MSG_NOTIFY_SUMMARY      MsgID = 920
	MsgID_MSG_NOTIFY_DISBAND      MsgID = 940
	MsgID_MSG_NOTIFY_USER_STATE   MsgID = 960
	MsgID_MSG_NOTIFY_TIP          MsgID = 970
	MsgID_MSG_NOTIFY_KICK         MsgID = 971
	MsgID_MSG_NOTIFY_DESTORY_ROOM MsgID = 972
	MsgID_MSG_NOTIFY_RECHARGE     MsgID = 990
	MsgID_MSG_NOTIFY_GAMENOTICE   MsgID = 1010
	MsgID_MSG_NOTIFY_LEVELCHANGE  MsgID = 1100
	// 三人斗地主相关
	MsgID_MSG_ACKBC_Sddz_Jiaofen    MsgID = 1500
	MsgID_MSG_ACKBC_Sddz_Dizhu      MsgID = 1501
	MsgID_MSG_ACKBC_Sddz_Pass       MsgID = 1502
	MsgID_MSG_ACKBC_Sddz_End        MsgID = 1503
	MsgID_MSG_ACKBC_Sddz_Total      MsgID = 1504
	MsgID_MSG_ACKBC_Sddz_Card_Init  MsgID = 1505
	MsgID_MSG_ACKBC_Sddz_Start      MsgID = 1506
	MsgID_MSG_ACKBC_Sddz_Chupai     MsgID = 1507
	MsgID_MSG_ACKBC_Sddz_JiaoDizhu  MsgID = 1508
	MsgID_MSG_ACKBC_Sddz_Mingpai    MsgID = 1509
	MsgID_MSG_ACKBC_Sddz_Jiabei     MsgID = 1510
	MsgID_MSG_ACKBC_Srddz_Baodao    MsgID = 1511
	MsgID_MSG_ACKBC_Srddz_StrictWin MsgID = 1512
	MsgID_MSG_ACKBC_Nn_Xiazhu       MsgID = 1513
	// ------ 游戏类型  Game Type
	MsgID_GTYPE_SiChuan_XueLiu     MsgID = 2000
	MsgID_GTYPE_SiChuan_XueZhan    MsgID = 2010
	MsgID_GTYPE_ZheJiang_XiZhou    MsgID = 3000
	MsgID_GTYPE_ZheJiang_XiangShan MsgID = 3010
	MsgID_GTYPE_SanDizhu           MsgID = 4000
	MsgID_GTYPE_SirenDizhu         MsgID = 4001
	MsgID_GTYPE_Pinshi             MsgID = 4002
	MsgID_GTYPE_ZheJiang_ZhenHai   MsgID = 3030
	MsgID_GTYPE_ZheJiang_Beilun    MsgID = 3040
	// ------ 游戏状态(血流)  State Type
	MsgID_STYPE_Change3Card MsgID = 5000
	MsgID_STYPE_MissType    MsgID = 5001
)

var MsgID_name = map[int32]string{
	0:    "MSG_NO",
	1:    "MSG_OK",
	100:  "MSG_Login",
	110:  "MSG_Room_List",
	120:  "MSG_Create_Room",
	121:  "MSG_Match_Room",
	122:  "MSG_Cancel_Match_Room",
	130:  "MSG_RuleItem",
	140:  "MSG_Find_Room",
	150:  "MSG_Disband_Room",
	151:  "MSG_Roomowner_Disband_Room",
	160:  "MSG_Room_Info",
	170:  "MSG_Into_Room",
	180:  "MSG_Into_MatchRoom",
	190:  "MSG_Exit_Room",
	195:  "MSG_Sitdown",
	196:  "MSG_Standup",
	200:  "MSG_User_Info",
	210:  "MSG_User_Ready",
	220:  "MSG_Start_Game",
	230:  "MSG_Restart_Game",
	250:  "MSG_Get_CurUser",
	260:  "MSG_Get_User_Card_Count",
	270:  "MSG_Put_Card",
	280:  "MSG_Get_UserCard",
	290:  "MSG_Chow",
	300:  "MSG_Peng",
	310:  "MSG_Kong",
	315:  "MSG_Ting",
	320:  "MSG_Win",
	330:  "MSG_Pass",
	340:  "MSG_Benefits",
	350:  "MSG_Change3Card",
	360:  "MSG_FixMiss",
	370:  "MSG_Chat",
	380:  "MSG_MessageJson",
	390:  "MSG_Notice",
	400:  "MSG_Disband",
	401:  "MSG_Vote",
	402:  "MSG_Battle_Record",
	403:  "MSG_Home_Owner",
	404:  "MSG_Room_Summary",
	405:  "MSG_Room_Kick",
	410:  "MSG_Gift",
	411:  "MSG_BattleDetail",
	1200: "MSG_Sddz_Jiaofen",
	1201: "MSG_Sddz_Mingpai",
	1202: "MSG_Sddz_Jiabei",
	1203: "MSG_Sddz_Chupai",
	1204: "MSG_Sddz_Pass",
	1205: "MSG_Srddz_Baodao",
	1206: "MSG_Srddz_StrictWin",
	1207: "MSG_Nn_Xiazhu",
	-1:   "MSG_ACK_Error",
	500:  "MSG_ACK_Login",
	510:  "MSG_ACK_User_Info",
	520:  "MSG_ACK_RoomInfo",
	525:  "MSG_ACK_Room_User",
	530:  "MSG_ACK_Room_List",
	540:  "MSG_ACK_Find_Room",
	550:  "MSG_ACK_MSG",
	560:  "MSG_ACKBC_Into_Room",
	570:  "MSG_ACK_Into_MatchRoom",
	580:  "MSG_ACKBC_Exit_Room",
	590:  "MSG_ACK_Create_Room",
	591:  "MSG_ACK_Cancel_Match_Room",
	592:  "MSG_ACK_Match_Room",
	600:  "MSG_ACKBC_Ready",
	605:  "MSG_Room_State",
	607:  "MSG_ACKBC_Sitdown",
	608:  "MSG_ACKBC_Standup",
	610:  "MSG_ACKBC_Card_Init",
	615:  "MSG_ACK_User_SeatCard",
	620:  "MSG_ACKBC_Start",
	650:  "MSG_ACK_UserCard",
	660:  "MSG_ACK_StartChange3Card",
	670:  "MSG_ACK_StartFixMiss",
	680:  "MSG_ACK_Change3Card_OK",
	690:  "MSG_ACKBC_FixMiss_OK",
	700:  "MSG_ACKBC_CurPlayer",
	710:  "MSG_ACKBC_GetCard",
	720:  "MSG_ACKBC_PutCard",
	730:  "MSG_ACK_WaitTool",
	740:  "MSG_ACKBC_Chow",
	750:  "MSG_ACKBC_Peng",
	760:  "MSG_ACKBC_Kong",
	770:  "MSG_ACKBC_Win",
	780:  "MSG_ACKBC_Draw",
	790:  "MSG_ACKBC_Total",
	800:  "MSG_ACKBC_Disband_Room",
	810:  "MSG_ACKBC_RoundScore",
	820:  "MSG_ACKBC_EffectEvent",
	830:  "MSG_ACK_Benefits",
	840:  "MSG_ACK_NeedBenefits",
	850:  "MSG_ACKBC_Restart",
	860:  "MSG_Card",
	870:  "MSG_SeatCard",
	880:  "MSG_ACKBC_Chat",
	890:  "MSG_ACK_MessageJson",
	910:  "MSG_ACK_Notice",
	930:  "MSG_UPDATE_USERINFO",
	980:  "MSG_ACKBC_KICK",
	991:  "MSG_ACK_NOTIFY_RECHARGE",
	992:  "MSG_ACKBC_TRANSFER_HUA",
	950:  "MSG_ACK_Battle_Record",
	951:  "MSG_ACK_Home_Owner",
	952:  "MSG_ACK_Room_Summary",
	953:  "MSG_ACK_BattleDetail",
	1000: "MSG_ACK_Gift",
	900:  "MSG_NOTIFY_START_GAME",
	920:  "MSG_NOTIFY_SUMMARY",
	940:  "MSG_NOTIFY_DISBAND",
	960:  "MSG_NOTIFY_USER_STATE",
	970:  "MSG_NOTIFY_TIP",
	971:  "MSG_NOTIFY_KICK",
	972:  "MSG_NOTIFY_DESTORY_ROOM",
	990:  "MSG_NOTIFY_RECHARGE",
	1010: "MSG_NOTIFY_GAMENOTICE",
	1100: "MSG_NOTIFY_LEVELCHANGE",
	1500: "MSG_ACKBC_Sddz_Jiaofen",
	1501: "MSG_ACKBC_Sddz_Dizhu",
	1502: "MSG_ACKBC_Sddz_Pass",
	1503: "MSG_ACKBC_Sddz_End",
	1504: "MSG_ACKBC_Sddz_Total",
	1505: "MSG_ACKBC_Sddz_Card_Init",
	1506: "MSG_ACKBC_Sddz_Start",
	1507: "MSG_ACKBC_Sddz_Chupai",
	1508: "MSG_ACKBC_Sddz_JiaoDizhu",
	1509: "MSG_ACKBC_Sddz_Mingpai",
	1510: "MSG_ACKBC_Sddz_Jiabei",
	1511: "MSG_ACKBC_Srddz_Baodao",
	1512: "MSG_ACKBC_Srddz_StrictWin",
	1513: "MSG_ACKBC_Nn_Xiazhu",
	2000: "GTYPE_SiChuan_XueLiu",
	2010: "GTYPE_SiChuan_XueZhan",
	3000: "GTYPE_ZheJiang_XiZhou",
	3010: "GTYPE_ZheJiang_XiangShan",
	4000: "GTYPE_SanDizhu",
	4001: "GTYPE_SirenDizhu",
	4002: "GTYPE_Pinshi",
	3030: "GTYPE_ZheJiang_ZhenHai",
	3040: "GTYPE_ZheJiang_Beilun",
	5000: "STYPE_Change3Card",
	5001: "STYPE_MissType",
}
var MsgID_value = map[string]int32{
	"MSG_NO":                     0,
	"MSG_OK":                     1,
	"MSG_Login":                  100,
	"MSG_Room_List":              110,
	"MSG_Create_Room":            120,
	"MSG_Match_Room":             121,
	"MSG_Cancel_Match_Room":      122,
	"MSG_RuleItem":               130,
	"MSG_Find_Room":              140,
	"MSG_Disband_Room":           150,
	"MSG_Roomowner_Disband_Room": 151,
	"MSG_Room_Info":              160,
	"MSG_Into_Room":              170,
	"MSG_Into_MatchRoom":         180,
	"MSG_Exit_Room":              190,
	"MSG_Sitdown":                195,
	"MSG_Standup":                196,
	"MSG_User_Info":              200,
	"MSG_User_Ready":             210,
	"MSG_Start_Game":             220,
	"MSG_Restart_Game":           230,
	"MSG_Get_CurUser":            250,
	"MSG_Get_User_Card_Count":    260,
	"MSG_Put_Card":               270,
	"MSG_Get_UserCard":           280,
	"MSG_Chow":                   290,
	"MSG_Peng":                   300,
	"MSG_Kong":                   310,
	"MSG_Ting":                   315,
	"MSG_Win":                    320,
	"MSG_Pass":                   330,
	"MSG_Benefits":               340,
	"MSG_Change3Card":            350,
	"MSG_FixMiss":                360,
	"MSG_Chat":                   370,
	"MSG_MessageJson":            380,
	"MSG_Notice":                 390,
	"MSG_Disband":                400,
	"MSG_Vote":                   401,
	"MSG_Battle_Record":          402,
	"MSG_Home_Owner":             403,
	"MSG_Room_Summary":           404,
	"MSG_Room_Kick":              405,
	"MSG_Gift":                   410,
	"MSG_BattleDetail":           411,
	"MSG_Sddz_Jiaofen":           1200,
	"MSG_Sddz_Mingpai":           1201,
	"MSG_Sddz_Jiabei":            1202,
	"MSG_Sddz_Chupai":            1203,
	"MSG_Sddz_Pass":              1204,
	"MSG_Srddz_Baodao":           1205,
	"MSG_Srddz_StrictWin":        1206,
	"MSG_Nn_Xiazhu":              1207,
	"MSG_ACK_Error":              -1,
	"MSG_ACK_Login":              500,
	"MSG_ACK_User_Info":          510,
	"MSG_ACK_RoomInfo":           520,
	"MSG_ACK_Room_User":          525,
	"MSG_ACK_Room_List":          530,
	"MSG_ACK_Find_Room":          540,
	"MSG_ACK_MSG":                550,
	"MSG_ACKBC_Into_Room":        560,
	"MSG_ACK_Into_MatchRoom":     570,
	"MSG_ACKBC_Exit_Room":        580,
	"MSG_ACK_Create_Room":        590,
	"MSG_ACK_Cancel_Match_Room":  591,
	"MSG_ACK_Match_Room":         592,
	"MSG_ACKBC_Ready":            600,
	"MSG_Room_State":             605,
	"MSG_ACKBC_Sitdown":          607,
	"MSG_ACKBC_Standup":          608,
	"MSG_ACKBC_Card_Init":        610,
	"MSG_ACK_User_SeatCard":      615,
	"MSG_ACKBC_Start":            620,
	"MSG_ACK_UserCard":           650,
	"MSG_ACK_StartChange3Card":   660,
	"MSG_ACK_StartFixMiss":       670,
	"MSG_ACK_Change3Card_OK":     680,
	"MSG_ACKBC_FixMiss_OK":       690,
	"MSG_ACKBC_CurPlayer":        700,
	"MSG_ACKBC_GetCard":          710,
	"MSG_ACKBC_PutCard":          720,
	"MSG_ACK_WaitTool":           730,
	"MSG_ACKBC_Chow":             740,
	"MSG_ACKBC_Peng":             750,
	"MSG_ACKBC_Kong":             760,
	"MSG_ACKBC_Win":              770,
	"MSG_ACKBC_Draw":             780,
	"MSG_ACKBC_Total":            790,
	"MSG_ACKBC_Disband_Room":     800,
	"MSG_ACKBC_RoundScore":       810,
	"MSG_ACKBC_EffectEvent":      820,
	"MSG_ACK_Benefits":           830,
	"MSG_ACK_NeedBenefits":       840,
	"MSG_ACKBC_Restart":          850,
	"MSG_Card":                   860,
	"MSG_SeatCard":               870,
	"MSG_ACKBC_Chat":             880,
	"MSG_ACK_MessageJson":        890,
	"MSG_ACK_Notice":             910,
	"MSG_UPDATE_USERINFO":        930,
	"MSG_ACKBC_KICK":             980,
	"MSG_ACK_NOTIFY_RECHARGE":    991,
	"MSG_ACKBC_TRANSFER_HUA":     992,
	"MSG_ACK_Battle_Record":      950,
	"MSG_ACK_Home_Owner":         951,
	"MSG_ACK_Room_Summary":       952,
	"MSG_ACK_BattleDetail":       953,
	"MSG_ACK_Gift":               1000,
	"MSG_NOTIFY_START_GAME":      900,
	"MSG_NOTIFY_SUMMARY":         920,
	"MSG_NOTIFY_DISBAND":         940,
	"MSG_NOTIFY_USER_STATE":      960,
	"MSG_NOTIFY_TIP":             970,
	"MSG_NOTIFY_KICK":            971,
	"MSG_NOTIFY_DESTORY_ROOM":    972,
	"MSG_NOTIFY_RECHARGE":        990,
	"MSG_NOTIFY_GAMENOTICE":      1010,
	"MSG_NOTIFY_LEVELCHANGE":     1100,
	"MSG_ACKBC_Sddz_Jiaofen":     1500,
	"MSG_ACKBC_Sddz_Dizhu":       1501,
	"MSG_ACKBC_Sddz_Pass":        1502,
	"MSG_ACKBC_Sddz_End":         1503,
	"MSG_ACKBC_Sddz_Total":       1504,
	"MSG_ACKBC_Sddz_Card_Init":   1505,
	"MSG_ACKBC_Sddz_Start":       1506,
	"MSG_ACKBC_Sddz_Chupai":      1507,
	"MSG_ACKBC_Sddz_JiaoDizhu":   1508,
	"MSG_ACKBC_Sddz_Mingpai":     1509,
	"MSG_ACKBC_Sddz_Jiabei":      1510,
	"MSG_ACKBC_Srddz_Baodao":     1511,
	"MSG_ACKBC_Srddz_StrictWin":  1512,
	"MSG_ACKBC_Nn_Xiazhu":        1513,
	"GTYPE_SiChuan_XueLiu":       2000,
	"GTYPE_SiChuan_XueZhan":      2010,
	"GTYPE_ZheJiang_XiZhou":      3000,
	"GTYPE_ZheJiang_XiangShan":   3010,
	"GTYPE_SanDizhu":             4000,
	"GTYPE_SirenDizhu":           4001,
	"GTYPE_Pinshi":               4002,
	"GTYPE_ZheJiang_ZhenHai":     3030,
	"GTYPE_ZheJiang_Beilun":      3040,
	"STYPE_Change3Card":          5000,
	"STYPE_MissType":             5001,
}

func (x MsgID) String() string {
	return proto.EnumName(MsgID_name, int32(x))
}
func (MsgID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StateID int32

const (
	// ------ 用户状态  User State
	StateID_UserState_Normal     StateID = 0
	StateID_UserState_Stand      StateID = 5
	StateID_UserState_Sit        StateID = 6
	StateID_UserState_Ready      StateID = 10
	StateID_UserState_Wait       StateID = 15
	StateID_UserState_WaitPut    StateID = 20
	StateID_UserState_WaitTool   StateID = 30
	StateID_UserState_Disconnect StateID = 40
	StateID_UserState_Looker     StateID = 50
	StateID_UserState_WaitVote   StateID = 60
	StateID_GameState_Normal     StateID = 3
	StateID_GameState_Playing    StateID = 200
	StateID_GameState_Stoped     StateID = 210
	StateID_GameState_Vote       StateID = 220
	StateID_GameState_Total      StateID = 230
)

var StateID_name = map[int32]string{
	0:   "UserState_Normal",
	5:   "UserState_Stand",
	6:   "UserState_Sit",
	10:  "UserState_Ready",
	15:  "UserState_Wait",
	20:  "UserState_WaitPut",
	30:  "UserState_WaitTool",
	40:  "UserState_Disconnect",
	50:  "UserState_Looker",
	60:  "UserState_WaitVote",
	3:   "GameState_Normal",
	200: "GameState_Playing",
	210: "GameState_Stoped",
	220: "GameState_Vote",
	230: "GameState_Total",
}
var StateID_value = map[string]int32{
	"UserState_Normal":     0,
	"UserState_Stand":      5,
	"UserState_Sit":        6,
	"UserState_Ready":      10,
	"UserState_Wait":       15,
	"UserState_WaitPut":    20,
	"UserState_WaitTool":   30,
	"UserState_Disconnect": 40,
	"UserState_Looker":     50,
	"UserState_WaitVote":   60,
	"GameState_Normal":     3,
	"GameState_Playing":    200,
	"GameState_Stoped":     210,
	"GameState_Vote":       220,
	"GameState_Total":      230,
}

func (x StateID) String() string {
	return proto.EnumName(StateID_name, int32(x))
}
func (StateID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RuleID int32

const (
	// ------- 规则 ID
	RuleID_Rule_def     RuleID = 0
	RuleID_Rule_15min   RuleID = 19
	RuleID_Rule_20min   RuleID = 20
	RuleID_Rule_30min   RuleID = 21
	RuleID_Rule_60min   RuleID = 22
	RuleID_Rule_4Round  RuleID = 4
	RuleID_Rule_8Round  RuleID = 8
	RuleID_Rule_16Round RuleID = 9
	RuleID_Rule_1Pay    RuleID = 23
	RuleID_Rule_4Pay    RuleID = 24
)

var RuleID_name = map[int32]string{
	0:  "Rule_def",
	19: "Rule_15min",
	20: "Rule_20min",
	21: "Rule_30min",
	22: "Rule_60min",
	4:  "Rule_4Round",
	8:  "Rule_8Round",
	9:  "Rule_16Round",
	23: "Rule_1Pay",
	24: "Rule_4Pay",
}
var RuleID_value = map[string]int32{
	"Rule_def":     0,
	"Rule_15min":   19,
	"Rule_20min":   20,
	"Rule_30min":   21,
	"Rule_60min":   22,
	"Rule_4Round":  4,
	"Rule_8Round":  8,
	"Rule_16Round": 9,
	"Rule_1Pay":    23,
	"Rule_4Pay":    24,
}

func (x RuleID) String() string {
	return proto.EnumName(RuleID_name, int32(x))
}
func (RuleID) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// -------------------------------------------------------
// Req
type Message struct {
	ID  int32  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	MSG []byte `protobuf:"bytes,2,opt,name=MSG,proto3" json:"MSG,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Message) GetMSG() []byte {
	if m != nil {
		return m.MSG
	}
	return nil
}

// 登录信息  MsgID : 100
type Login struct {
	SID     string  `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
	RID     int32   `protobuf:"varint,2,opt,name=RID" json:"RID,omitempty"`
	GPS_LNG float32 `protobuf:"fixed32,3,opt,name=GPS_LNG,json=GPSLNG" json:"GPS_LNG,omitempty"`
	GPS_LAT float32 `protobuf:"fixed32,4,opt,name=GPS_LAT,json=GPSLAT" json:"GPS_LAT,omitempty"`
	Openid  string  `protobuf:"bytes,5,opt,name=openid" json:"openid,omitempty"`
	Token   string  `protobuf:"bytes,6,opt,name=token" json:"token,omitempty"`
}

func (m *Login) Reset()                    { *m = Login{} }
func (m *Login) String() string            { return proto.CompactTextString(m) }
func (*Login) ProtoMessage()               {}
func (*Login) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Login) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

func (m *Login) GetRID() int32 {
	if m != nil {
		return m.RID
	}
	return 0
}

func (m *Login) GetGPS_LNG() float32 {
	if m != nil {
		return m.GPS_LNG
	}
	return 0
}

func (m *Login) GetGPS_LAT() float32 {
	if m != nil {
		return m.GPS_LAT
	}
	return 0
}

func (m *Login) GetOpenid() string {
	if m != nil {
		return m.Openid
	}
	return ""
}

func (m *Login) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// 房间列表  MsgID : 110
type Room_List struct {
	Type int32 `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty"`
	City int32 `protobuf:"varint,2,opt,name=City" json:"City,omitempty"`
}

func (m *Room_List) Reset()                    { *m = Room_List{} }
func (m *Room_List) String() string            { return proto.CompactTextString(m) }
func (*Room_List) ProtoMessage()               {}
func (*Room_List) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Room_List) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Room_List) GetCity() int32 {
	if m != nil {
		return m.City
	}
	return 0
}

// 创建房间  MsgID : 120
type Create_Room struct {
	SID  string  `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
	Type int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	City int32   `protobuf:"varint,3,opt,name=City" json:"City,omitempty"`
	PWD  string  `protobuf:"bytes,4,opt,name=PWD" json:"PWD,omitempty"`
	Rule []int32 `protobuf:"varint,5,rep,packed,name=Rule" json:"Rule,omitempty"`
}

func (m *Create_Room) Reset()                    { *m = Create_Room{} }
func (m *Create_Room) String() string            { return proto.CompactTextString(m) }
func (*Create_Room) ProtoMessage()               {}
func (*Create_Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Create_Room) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

func (m *Create_Room) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Create_Room) GetCity() int32 {
	if m != nil {
		return m.City
	}
	return 0
}

func (m *Create_Room) GetPWD() string {
	if m != nil {
		return m.PWD
	}
	return ""
}

func (m *Create_Room) GetRule() []int32 {
	if m != nil {
		return m.Rule
	}
	return nil
}

// 匹配房间  MsgID:121
type Match_Room struct {
	SID  string  `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
	Type int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	City int32   `protobuf:"varint,3,opt,name=City" json:"City,omitempty"`
	PWD  string  `protobuf:"bytes,4,opt,name=PWD" json:"PWD,omitempty"`
	Rule []int32 `protobuf:"varint,5,rep,packed,name=Rule" json:"Rule,omitempty"`
}

func (m *Match_Room) Reset()                    { *m = Match_Room{} }
func (m *Match_Room) String() string            { return proto.CompactTextString(m) }
func (*Match_Room) ProtoMessage()               {}
func (*Match_Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Match_Room) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

func (m *Match_Room) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Match_Room) GetCity() int32 {
	if m != nil {
		return m.City
	}
	return 0
}

func (m *Match_Room) GetPWD() string {
	if m != nil {
		return m.PWD
	}
	return ""
}

func (m *Match_Room) GetRule() []int32 {
	if m != nil {
		return m.Rule
	}
	return nil
}

// 取消匹配  MsgID : 122;
type Cancel_Match_Room struct {
	SID string `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
}

func (m *Cancel_Match_Room) Reset()                    { *m = Cancel_Match_Room{} }
func (m *Cancel_Match_Room) String() string            { return proto.CompactTextString(m) }
func (*Cancel_Match_Room) ProtoMessage()               {}
func (*Cancel_Match_Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Cancel_Match_Room) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

// 规则  MsgID : 130
type RuleItem struct {
	ID   int32  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=Desc" json:"Desc,omitempty"`
}

func (m *RuleItem) Reset()                    { *m = RuleItem{} }
func (m *RuleItem) String() string            { return proto.CompactTextString(m) }
func (*RuleItem) ProtoMessage()               {}
func (*RuleItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RuleItem) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RuleItem) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

// 查找房间  MsgID : 140;
type Find_Room struct {
	SID string `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
	RID int32  `protobuf:"varint,2,opt,name=RID" json:"RID,omitempty"`
}

func (m *Find_Room) Reset()                    { *m = Find_Room{} }
func (m *Find_Room) String() string            { return proto.CompactTextString(m) }
func (*Find_Room) ProtoMessage()               {}
func (*Find_Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Find_Room) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

func (m *Find_Room) GetRID() int32 {
	if m != nil {
		return m.RID
	}
	return 0
}

// 解散房间  MsgID : 150
type Disband_Room struct {
	SID   string `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
	AGREE int32  `protobuf:"varint,2,opt,name=AGREE" json:"AGREE,omitempty"`
	PWD   string `protobuf:"bytes,4,opt,name=PWD" json:"PWD,omitempty"`
}

func (m *Disband_Room) Reset()                    { *m = Disband_Room{} }
func (m *Disband_Room) String() string            { return proto.CompactTextString(m) }
func (*Disband_Room) ProtoMessage()               {}
func (*Disband_Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Disband_Room) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

func (m *Disband_Room) GetAGREE() int32 {
	if m != nil {
		return m.AGREE
	}
	return 0
}

func (m *Disband_Room) GetPWD() string {
	if m != nil {
		return m.PWD
	}
	return ""
}

// 房主解散房间 : 151
type Roomowner_Disband_Room struct {
	SID string `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
}

func (m *Roomowner_Disband_Room) Reset()                    { *m = Roomowner_Disband_Room{} }
func (m *Roomowner_Disband_Room) String() string            { return proto.CompactTextString(m) }
func (*Roomowner_Disband_Room) ProtoMessage()               {}
func (*Roomowner_Disband_Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Roomowner_Disband_Room) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

// 房间信息  MsgID : 160
type Room_Info struct {
	RID int32  `protobuf:"varint,1,opt,name=RID" json:"RID,omitempty"`
	PWD string `protobuf:"bytes,2,opt,name=PWD" json:"PWD,omitempty"`
}

func (m *Room_Info) Reset()                    { *m = Room_Info{} }
func (m *Room_Info) String() string            { return proto.CompactTextString(m) }
func (*Room_Info) ProtoMessage()               {}
func (*Room_Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Room_Info) GetRID() int32 {
	if m != nil {
		return m.RID
	}
	return 0
}

func (m *Room_Info) GetPWD() string {
	if m != nil {
		return m.PWD
	}
	return ""
}

// 进入房间  MsgID : 170
type Into_Room struct {
	SID  string `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
	UID  string `protobuf:"bytes,2,opt,name=UID" json:"UID,omitempty"`
	RID  int32  `protobuf:"varint,3,opt,name=RID" json:"RID,omitempty"`
	PWD  string `protobuf:"bytes,4,opt,name=PWD" json:"PWD,omitempty"`
	Code string `protobuf:"bytes,5,opt,name=code" json:"code,omitempty"`
}

func (m *Into_Room) Reset()                    { *m = Into_Room{} }
func (m *Into_Room) String() string            { return proto.CompactTextString(m) }
func (*Into_Room) ProtoMessage()               {}
func (*Into_Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Into_Room) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

func (m *Into_Room) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *Into_Room) GetRID() int32 {
	if m != nil {
		return m.RID
	}
	return 0
}

func (m *Into_Room) GetPWD() string {
	if m != nil {
		return m.PWD
	}
	return ""
}

func (m *Into_Room) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// 进入自动匹配场  MsgID : 180
type Into_MatchRoom struct {
	SID   string `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
	Type  int32  `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	Level int32  `protobuf:"varint,3,opt,name=Level" json:"Level,omitempty"`
}

func (m *Into_MatchRoom) Reset()                    { *m = Into_MatchRoom{} }
func (m *Into_MatchRoom) String() string            { return proto.CompactTextString(m) }
func (*Into_MatchRoom) ProtoMessage()               {}
func (*Into_MatchRoom) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Into_MatchRoom) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

func (m *Into_MatchRoom) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Into_MatchRoom) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

// 退出房间  MsgID : 190
type ExitRoom struct {
	Sid string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
}

func (m *ExitRoom) Reset()                    { *m = ExitRoom{} }
func (m *ExitRoom) String() string            { return proto.CompactTextString(m) }
func (*ExitRoom) ProtoMessage()               {}
func (*ExitRoom) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ExitRoom) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

// 坐下   	MsgID : 195
type SitDown struct {
	Sid   string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	Index int32  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
}

func (m *SitDown) Reset()                    { *m = SitDown{} }
func (m *SitDown) String() string            { return proto.CompactTextString(m) }
func (*SitDown) ProtoMessage()               {}
func (*SitDown) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SitDown) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *SitDown) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

// 站起来   MsgID : 196
type StandUp struct {
	Sid   string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	Index int32  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
}

func (m *StandUp) Reset()                    { *m = StandUp{} }
func (m *StandUp) String() string            { return proto.CompactTextString(m) }
func (*StandUp) ProtoMessage()               {}
func (*StandUp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *StandUp) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *StandUp) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

// 用户信息  MsgID : 200
type User_Info struct {
	UID string `protobuf:"bytes,1,opt,name=UID" json:"UID,omitempty"`
}

func (m *User_Info) Reset()                    { *m = User_Info{} }
func (m *User_Info) String() string            { return proto.CompactTextString(m) }
func (*User_Info) ProtoMessage()               {}
func (*User_Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *User_Info) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

// 玩家准备好了  MsgID : 210
type UserReady struct {
	Sid string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
}

func (m *UserReady) Reset()                    { *m = UserReady{} }
func (m *UserReady) String() string            { return proto.CompactTextString(m) }
func (*UserReady) ProtoMessage()               {}
func (*UserReady) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UserReady) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

// 玩家座位  MsgID : 215
type User_Seat struct {
	SID   string `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
	Index string `protobuf:"bytes,2,opt,name=Index" json:"Index,omitempty"`
}

func (m *User_Seat) Reset()                    { *m = User_Seat{} }
func (m *User_Seat) String() string            { return proto.CompactTextString(m) }
func (*User_Seat) ProtoMessage()               {}
func (*User_Seat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *User_Seat) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

func (m *User_Seat) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

// 开始游戏  MsgID : 220
type Start_Game struct {
	Sid string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
}

func (m *Start_Game) Reset()                    { *m = Start_Game{} }
func (m *Start_Game) String() string            { return proto.CompactTextString(m) }
func (*Start_Game) ProtoMessage()               {}
func (*Start_Game) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Start_Game) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

// 重新开始游戏 (测试接口)  MsgID : 230
type Restart_Game struct {
	SID int32  `protobuf:"varint,1,opt,name=SID" json:"SID,omitempty"`
	PWD string `protobuf:"bytes,3,opt,name=PWD" json:"PWD,omitempty"`
}

func (m *Restart_Game) Reset()                    { *m = Restart_Game{} }
func (m *Restart_Game) String() string            { return proto.CompactTextString(m) }
func (*Restart_Game) ProtoMessage()               {}
func (*Restart_Game) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Restart_Game) GetSID() int32 {
	if m != nil {
		return m.SID
	}
	return 0
}

func (m *Restart_Game) GetPWD() string {
	if m != nil {
		return m.PWD
	}
	return ""
}

// 得到当前操作的用户  MsgID : 250
type Get_CurUser struct {
	UID  string `protobuf:"bytes,1,opt,name=UID" json:"UID,omitempty"`
	Time int32  `protobuf:"varint,3,opt,name=Time" json:"Time,omitempty"`
}

func (m *Get_CurUser) Reset()                    { *m = Get_CurUser{} }
func (m *Get_CurUser) String() string            { return proto.CompactTextString(m) }
func (*Get_CurUser) ProtoMessage()               {}
func (*Get_CurUser) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Get_CurUser) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *Get_CurUser) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

// 得到玩家牌的数量  MsgID : 260
type Get_User_Card_Count struct {
	UID string `protobuf:"bytes,1,opt,name=UID" json:"UID,omitempty"`
}

func (m *Get_User_Card_Count) Reset()                    { *m = Get_User_Card_Count{} }
func (m *Get_User_Card_Count) String() string            { return proto.CompactTextString(m) }
func (*Get_User_Card_Count) ProtoMessage()               {}
func (*Get_User_Card_Count) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Get_User_Card_Count) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

// 打牌  MsgID : 270
type Put_Card struct {
	Sid  string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	Cid  int32  `protobuf:"varint,2,opt,name=cid" json:"cid,omitempty"`
	Ting int32  `protobuf:"varint,3,opt,name=ting" json:"ting,omitempty"`
}

func (m *Put_Card) Reset()                    { *m = Put_Card{} }
func (m *Put_Card) String() string            { return proto.CompactTextString(m) }
func (*Put_Card) ProtoMessage()               {}
func (*Put_Card) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Put_Card) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *Put_Card) GetCid() int32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *Put_Card) GetTing() int32 {
	if m != nil {
		return m.Ting
	}
	return 0
}

// 吃牌  MsgID : 290
type Chow struct {
	Sid    string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	Cid1   int32  `protobuf:"varint,2,opt,name=cid1" json:"cid1,omitempty"`
	Cid2   int32  `protobuf:"varint,3,opt,name=cid2" json:"cid2,omitempty"`
	Cid3   int32  `protobuf:"varint,4,opt,name=cid3" json:"cid3,omitempty"`
	DefCid int32  `protobuf:"varint,5,opt,name=def_cid,json=defCid" json:"def_cid,omitempty"`
}

func (m *Chow) Reset()                    { *m = Chow{} }
func (m *Chow) String() string            { return proto.CompactTextString(m) }
func (*Chow) ProtoMessage()               {}
func (*Chow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Chow) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *Chow) GetCid1() int32 {
	if m != nil {
		return m.Cid1
	}
	return 0
}

func (m *Chow) GetCid2() int32 {
	if m != nil {
		return m.Cid2
	}
	return 0
}

func (m *Chow) GetCid3() int32 {
	if m != nil {
		return m.Cid3
	}
	return 0
}

func (m *Chow) GetDefCid() int32 {
	if m != nil {
		return m.DefCid
	}
	return 0
}

// 碰  MsgID : 300
type Peng struct {
	Sid    string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	Cid    int32  `protobuf:"varint,2,opt,name=cid" json:"cid,omitempty"`
	DefCid int32  `protobuf:"varint,3,opt,name=def_cid,json=defCid" json:"def_cid,omitempty"`
}

func (m *Peng) Reset()                    { *m = Peng{} }
func (m *Peng) String() string            { return proto.CompactTextString(m) }
func (*Peng) ProtoMessage()               {}
func (*Peng) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Peng) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *Peng) GetCid() int32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *Peng) GetDefCid() int32 {
	if m != nil {
		return m.DefCid
	}
	return 0
}

// 杠  MsgID : 310
type Kong struct {
	Sid string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	Cid int32  `protobuf:"varint,2,opt,name=cid" json:"cid,omitempty"`
}

func (m *Kong) Reset()                    { *m = Kong{} }
func (m *Kong) String() string            { return proto.CompactTextString(m) }
func (*Kong) ProtoMessage()               {}
func (*Kong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *Kong) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *Kong) GetCid() int32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

// 听 MsgID : 315
type Ting struct {
	SID string `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
	CID int32  `protobuf:"varint,2,opt,name=CID" json:"CID,omitempty"`
}

func (m *Ting) Reset()                    { *m = Ting{} }
func (m *Ting) String() string            { return proto.CompactTextString(m) }
func (*Ting) ProtoMessage()               {}
func (*Ting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *Ting) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

func (m *Ting) GetCID() int32 {
	if m != nil {
		return m.CID
	}
	return 0
}

// 胡牌  MsgID : 320
type Win struct {
	Sid string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	Cid int32  `protobuf:"varint,2,opt,name=cid" json:"cid,omitempty"`
}

func (m *Win) Reset()                    { *m = Win{} }
func (m *Win) String() string            { return proto.CompactTextString(m) }
func (*Win) ProtoMessage()               {}
func (*Win) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *Win) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *Win) GetCid() int32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

// 取消  MsgID : 330
type Pass struct {
	SID string `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
}

func (m *Pass) Reset()                    { *m = Pass{} }
func (m *Pass) String() string            { return proto.CompactTextString(m) }
func (*Pass) ProtoMessage()               {}
func (*Pass) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *Pass) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

// 救济金  MsgID : 340
type Benefits struct {
	SID string `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
}

func (m *Benefits) Reset()                    { *m = Benefits{} }
func (m *Benefits) String() string            { return proto.CompactTextString(m) }
func (*Benefits) ProtoMessage()               {}
func (*Benefits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *Benefits) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

// 换三张  MsgID : 350
type Change3Card struct {
	SID string  `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
	CID []int32 `protobuf:"varint,2,rep,packed,name=CID" json:"CID,omitempty"`
}

func (m *Change3Card) Reset()                    { *m = Change3Card{} }
func (m *Change3Card) String() string            { return proto.CompactTextString(m) }
func (*Change3Card) ProtoMessage()               {}
func (*Change3Card) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *Change3Card) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

func (m *Change3Card) GetCID() []int32 {
	if m != nil {
		return m.CID
	}
	return nil
}

// 定缺  MsgID : 360
type FixMiss struct {
	SID  string `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
	Type int32  `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
}

func (m *FixMiss) Reset()                    { *m = FixMiss{} }
func (m *FixMiss) String() string            { return proto.CompactTextString(m) }
func (*FixMiss) ProtoMessage()               {}
func (*FixMiss) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *FixMiss) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

func (m *FixMiss) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// 发送消息  MsgID : 370
type Chat struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Type    int32  `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
}

func (m *Chat) Reset()                    { *m = Chat{} }
func (m *Chat) String() string            { return proto.CompactTextString(m) }
func (*Chat) ProtoMessage()               {}
func (*Chat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *Chat) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Chat) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// (预留)发送Json消息 MsgID : 380
type MessageJson struct {
	SID  string `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
	JSON string `protobuf:"bytes,2,opt,name=JSON" json:"JSON,omitempty"`
}

func (m *MessageJson) Reset()                    { *m = MessageJson{} }
func (m *MessageJson) String() string            { return proto.CompactTextString(m) }
func (*MessageJson) ProtoMessage()               {}
func (*MessageJson) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *MessageJson) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

func (m *MessageJson) GetJSON() string {
	if m != nil {
		return m.JSON
	}
	return ""
}

// 踢人
type KickRequest struct {
	Index int32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
}

func (m *KickRequest) Reset()                    { *m = KickRequest{} }
func (m *KickRequest) String() string            { return proto.CompactTextString(m) }
func (*KickRequest) ProtoMessage()               {}
func (*KickRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *KickRequest) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type KickResponse struct {
	Index  int32  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *KickResponse) Reset()                    { *m = KickResponse{} }
func (m *KickResponse) String() string            { return proto.CompactTextString(m) }
func (*KickResponse) ProtoMessage()               {}
func (*KickResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *KickResponse) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *KickResponse) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// 登录  MsgID : 500
type ACK_Login struct {
	Sid string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
}

func (m *ACK_Login) Reset()                    { *m = ACK_Login{} }
func (m *ACK_Login) String() string            { return proto.CompactTextString(m) }
func (*ACK_Login) ProtoMessage()               {}
func (*ACK_Login) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *ACK_Login) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

// 用户信息  MsgID : 510
type ACK_User_Info struct {
	Name        string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Uid         string  `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
	RoomId      int32   `protobuf:"varint,3,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
	Ip          string  `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	Index       int32   `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Icon        string  `protobuf:"bytes,6,opt,name=icon" json:"icon,omitempty"`
	Coin        int32   `protobuf:"varint,7,opt,name=coin" json:"coin,omitempty"`
	Type        int32   `protobuf:"varint,8,opt,name=type" json:"type,omitempty"`
	Diamond     int32   `protobuf:"varint,9,opt,name=diamond" json:"diamond,omitempty"`
	Level       int32   `protobuf:"varint,10,opt,name=level" json:"level,omitempty"`
	Email       string  `protobuf:"bytes,11,opt,name=email" json:"email,omitempty"`
	GPS_LNG     float32 `protobuf:"fixed32,12,opt,name=GPS_LNG,json=GPSLNG" json:"GPS_LNG,omitempty"`
	GPS_LAT     float32 `protobuf:"fixed32,13,opt,name=GPS_LAT,json=GPSLAT" json:"GPS_LAT,omitempty"`
	Robot       int32   `protobuf:"varint,14,opt,name=robot" json:"robot,omitempty"`
	Winweek     int32   `protobuf:"varint,15,opt,name=winweek" json:"winweek,omitempty"`
	Ready       bool    `protobuf:"varint,16,opt,name=ready" json:"ready,omitempty"`
	State       int32   `protobuf:"varint,17,opt,name=state" json:"state,omitempty"`
	Sex         int32   `protobuf:"varint,18,opt,name=sex" json:"sex,omitempty"`
	Score       int32   `protobuf:"varint,19,opt,name=score" json:"score,omitempty"`
	CanKick     bool    `protobuf:"varint,20,opt,name=can_kick,json=canKick" json:"can_kick,omitempty"`
	OfflineTime int32   `protobuf:"varint,21,opt,name=offline_time,json=offlineTime" json:"offline_time,omitempty"`
	ParentUid   string  `protobuf:"bytes,22,opt,name=ParentUid" json:"ParentUid,omitempty"`
}

func (m *ACK_User_Info) Reset()                    { *m = ACK_User_Info{} }
func (m *ACK_User_Info) String() string            { return proto.CompactTextString(m) }
func (*ACK_User_Info) ProtoMessage()               {}
func (*ACK_User_Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ACK_User_Info) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ACK_User_Info) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ACK_User_Info) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *ACK_User_Info) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ACK_User_Info) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ACK_User_Info) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *ACK_User_Info) GetCoin() int32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *ACK_User_Info) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ACK_User_Info) GetDiamond() int32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *ACK_User_Info) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ACK_User_Info) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *ACK_User_Info) GetGPS_LNG() float32 {
	if m != nil {
		return m.GPS_LNG
	}
	return 0
}

func (m *ACK_User_Info) GetGPS_LAT() float32 {
	if m != nil {
		return m.GPS_LAT
	}
	return 0
}

func (m *ACK_User_Info) GetRobot() int32 {
	if m != nil {
		return m.Robot
	}
	return 0
}

func (m *ACK_User_Info) GetWinweek() int32 {
	if m != nil {
		return m.Winweek
	}
	return 0
}

func (m *ACK_User_Info) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *ACK_User_Info) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ACK_User_Info) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *ACK_User_Info) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ACK_User_Info) GetCanKick() bool {
	if m != nil {
		return m.CanKick
	}
	return false
}

func (m *ACK_User_Info) GetOfflineTime() int32 {
	if m != nil {
		return m.OfflineTime
	}
	return 0
}

func (m *ACK_User_Info) GetParentUid() string {
	if m != nil {
		return m.ParentUid
	}
	return ""
}

// 房间信息  MsgID : 520
type ACK_Room_Info struct {
	RoomId          int32   `protobuf:"varint,1,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
	Type            int32   `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	City            int32   `protobuf:"varint,3,opt,name=city" json:"city,omitempty"`
	Level           int32   `protobuf:"varint,4,opt,name=level" json:"level,omitempty"`
	Rules           []int32 `protobuf:"varint,5,rep,packed,name=rules" json:"rules,omitempty"`
	RoundCount      int32   `protobuf:"varint,6,opt,name=round_count,json=roundCount" json:"round_count,omitempty"`
	BigRoundCount   int32   `protobuf:"varint,7,opt,name=big_round_count,json=bigRoundCount" json:"big_round_count,omitempty"`
	StartTime       int64   `protobuf:"varint,8,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	RoundTime       int64   `protobuf:"varint,9,opt,name=round_time,json=roundTime" json:"round_time,omitempty"`
	SeatCount       int32   `protobuf:"varint,10,opt,name=seat_count,json=seatCount" json:"seat_count,omitempty"`
	UserCount       int32   `protobuf:"varint,11,opt,name=user_count,json=userCount" json:"user_count,omitempty"`
	CurIndex        int32   `protobuf:"varint,12,opt,name=cur_index,json=curIndex" json:"cur_index,omitempty"`
	CurToolIndex    int32   `protobuf:"varint,13,opt,name=cur_tool_index,json=curToolIndex" json:"cur_tool_index,omitempty"`
	Starting        bool    `protobuf:"varint,14,opt,name=starting" json:"starting,omitempty"`
	LeftTime        int64   `protobuf:"varint,15,opt,name=left_time,json=leftTime" json:"left_time,omitempty"`
	Direction       int32   `protobuf:"varint,16,opt,name=direction" json:"direction,omitempty"`
	DisbandLeftTime int64   `protobuf:"varint,17,opt,name=disband_left_time,json=disbandLeftTime" json:"disband_left_time,omitempty"`
	NickName        string  `protobuf:"bytes,18,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	UniqueCode      string  `protobuf:"bytes,19,opt,name=unique_code,json=uniqueCode" json:"unique_code,omitempty"`
	RoomOwner       string  `protobuf:"bytes,20,opt,name=RoomOwner" json:"RoomOwner,omitempty"`
}

func (m *ACK_Room_Info) Reset()                    { *m = ACK_Room_Info{} }
func (m *ACK_Room_Info) String() string            { return proto.CompactTextString(m) }
func (*ACK_Room_Info) ProtoMessage()               {}
func (*ACK_Room_Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ACK_Room_Info) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *ACK_Room_Info) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ACK_Room_Info) GetCity() int32 {
	if m != nil {
		return m.City
	}
	return 0
}

func (m *ACK_Room_Info) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ACK_Room_Info) GetRules() []int32 {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *ACK_Room_Info) GetRoundCount() int32 {
	if m != nil {
		return m.RoundCount
	}
	return 0
}

func (m *ACK_Room_Info) GetBigRoundCount() int32 {
	if m != nil {
		return m.BigRoundCount
	}
	return 0
}

func (m *ACK_Room_Info) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ACK_Room_Info) GetRoundTime() int64 {
	if m != nil {
		return m.RoundTime
	}
	return 0
}

func (m *ACK_Room_Info) GetSeatCount() int32 {
	if m != nil {
		return m.SeatCount
	}
	return 0
}

func (m *ACK_Room_Info) GetUserCount() int32 {
	if m != nil {
		return m.UserCount
	}
	return 0
}

func (m *ACK_Room_Info) GetCurIndex() int32 {
	if m != nil {
		return m.CurIndex
	}
	return 0
}

func (m *ACK_Room_Info) GetCurToolIndex() int32 {
	if m != nil {
		return m.CurToolIndex
	}
	return 0
}

func (m *ACK_Room_Info) GetStarting() bool {
	if m != nil {
		return m.Starting
	}
	return false
}

func (m *ACK_Room_Info) GetLeftTime() int64 {
	if m != nil {
		return m.LeftTime
	}
	return 0
}

func (m *ACK_Room_Info) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *ACK_Room_Info) GetDisbandLeftTime() int64 {
	if m != nil {
		return m.DisbandLeftTime
	}
	return 0
}

func (m *ACK_Room_Info) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *ACK_Room_Info) GetUniqueCode() string {
	if m != nil {
		return m.UniqueCode
	}
	return ""
}

func (m *ACK_Room_Info) GetRoomOwner() string {
	if m != nil {
		return m.RoomOwner
	}
	return ""
}

// 房间中的用户信息  MsgID : 525
type ACK_Room_User struct {
	RID   int32            `protobuf:"varint,1,opt,name=RID" json:"RID,omitempty"`
	Users []*ACK_User_Info `protobuf:"bytes,2,rep,name=Users" json:"Users,omitempty"`
}

func (m *ACK_Room_User) Reset()                    { *m = ACK_Room_User{} }
func (m *ACK_Room_User) String() string            { return proto.CompactTextString(m) }
func (*ACK_Room_User) ProtoMessage()               {}
func (*ACK_Room_User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *ACK_Room_User) GetRID() int32 {
	if m != nil {
		return m.RID
	}
	return 0
}

func (m *ACK_Room_User) GetUsers() []*ACK_User_Info {
	if m != nil {
		return m.Users
	}
	return nil
}

// 房间列表 (自动匹配场)  MsgID : 530
type ACK_Room_List struct {
	Type int32            `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty"`
	City int32            `protobuf:"varint,2,opt,name=City" json:"City,omitempty"`
	List []*ACK_Room_Info `protobuf:"bytes,3,rep,name=List" json:"List,omitempty"`
}

func (m *ACK_Room_List) Reset()                    { *m = ACK_Room_List{} }
func (m *ACK_Room_List) String() string            { return proto.CompactTextString(m) }
func (*ACK_Room_List) ProtoMessage()               {}
func (*ACK_Room_List) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *ACK_Room_List) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ACK_Room_List) GetCity() int32 {
	if m != nil {
		return m.City
	}
	return 0
}

func (m *ACK_Room_List) GetList() []*ACK_Room_Info {
	if m != nil {
		return m.List
	}
	return nil
}

// 查询房间  MsgID : 540
type ACK_Find_Room struct {
	RID       int32 `protobuf:"varint,1,opt,name=RID" json:"RID,omitempty"`
	UserCount int32 `protobuf:"varint,2,opt,name=UserCount" json:"UserCount,omitempty"`
}

func (m *ACK_Find_Room) Reset()                    { *m = ACK_Find_Room{} }
func (m *ACK_Find_Room) String() string            { return proto.CompactTextString(m) }
func (*ACK_Find_Room) ProtoMessage()               {}
func (*ACK_Find_Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *ACK_Find_Room) GetRID() int32 {
	if m != nil {
		return m.RID
	}
	return 0
}

func (m *ACK_Find_Room) GetUserCount() int32 {
	if m != nil {
		return m.UserCount
	}
	return 0
}

// 消息  MsgID : 550
type ACK_MSG struct {
	UID  string `protobuf:"bytes,1,opt,name=UID" json:"UID,omitempty"`
	Type int32  `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	MSG  string `protobuf:"bytes,3,opt,name=MSG" json:"MSG,omitempty"`
}

func (m *ACK_MSG) Reset()                    { *m = ACK_MSG{} }
func (m *ACK_MSG) String() string            { return proto.CompactTextString(m) }
func (*ACK_MSG) ProtoMessage()               {}
func (*ACK_MSG) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *ACK_MSG) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *ACK_MSG) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ACK_MSG) GetMSG() string {
	if m != nil {
		return m.MSG
	}
	return ""
}

// 进入房间  MsgID : 560
type ACKBC_Into_Room struct {
	Name       string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Uid        string  `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
	RoomId     int32   `protobuf:"varint,3,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
	Ip         string  `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	Index      int32   `protobuf:"varint,5,opt,name=index" json:"index,omitempty"`
	Icon       string  `protobuf:"bytes,6,opt,name=icon" json:"icon,omitempty"`
	Coin       int32   `protobuf:"varint,7,opt,name=coin" json:"coin,omitempty"`
	Type       int32   `protobuf:"varint,8,opt,name=type" json:"type,omitempty"`
	Diamond    int32   `protobuf:"varint,9,opt,name=diamond" json:"diamond,omitempty"`
	Level      int32   `protobuf:"varint,10,opt,name=level" json:"level,omitempty"`
	Robot      int32   `protobuf:"varint,11,opt,name=robot" json:"robot,omitempty"`
	GPS_LNG    float32 `protobuf:"fixed32,12,opt,name=GPS_LNG,json=GPSLNG" json:"GPS_LNG,omitempty"`
	GPS_LAT    float32 `protobuf:"fixed32,13,opt,name=GPS_LAT,json=GPSLAT" json:"GPS_LAT,omitempty"`
	UniqueCode int32   `protobuf:"varint,14,opt,name=unique_code,json=uniqueCode" json:"unique_code,omitempty"`
	Rule       []int32 `protobuf:"varint,15,rep,packed,name=Rule" json:"Rule,omitempty"`
}

func (m *ACKBC_Into_Room) Reset()                    { *m = ACKBC_Into_Room{} }
func (m *ACKBC_Into_Room) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Into_Room) ProtoMessage()               {}
func (*ACKBC_Into_Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ACKBC_Into_Room) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ACKBC_Into_Room) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ACKBC_Into_Room) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *ACKBC_Into_Room) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ACKBC_Into_Room) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ACKBC_Into_Room) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *ACKBC_Into_Room) GetCoin() int32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *ACKBC_Into_Room) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ACKBC_Into_Room) GetDiamond() int32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *ACKBC_Into_Room) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ACKBC_Into_Room) GetRobot() int32 {
	if m != nil {
		return m.Robot
	}
	return 0
}

func (m *ACKBC_Into_Room) GetGPS_LNG() float32 {
	if m != nil {
		return m.GPS_LNG
	}
	return 0
}

func (m *ACKBC_Into_Room) GetGPS_LAT() float32 {
	if m != nil {
		return m.GPS_LAT
	}
	return 0
}

func (m *ACKBC_Into_Room) GetUniqueCode() int32 {
	if m != nil {
		return m.UniqueCode
	}
	return 0
}

func (m *ACKBC_Into_Room) GetRule() []int32 {
	if m != nil {
		return m.Rule
	}
	return nil
}

// 进入匹配场  MsgID : 570
type ACK_Into_MatchRoom struct {
	SID      string         `protobuf:"bytes,1,opt,name=SID" json:"SID,omitempty"`
	RoomInfo *ACK_Room_Info `protobuf:"bytes,2,opt,name=RoomInfo" json:"RoomInfo,omitempty"`
}

func (m *ACK_Into_MatchRoom) Reset()                    { *m = ACK_Into_MatchRoom{} }
func (m *ACK_Into_MatchRoom) String() string            { return proto.CompactTextString(m) }
func (*ACK_Into_MatchRoom) ProtoMessage()               {}
func (*ACK_Into_MatchRoom) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *ACK_Into_MatchRoom) GetSID() string {
	if m != nil {
		return m.SID
	}
	return ""
}

func (m *ACK_Into_MatchRoom) GetRoomInfo() *ACK_Room_Info {
	if m != nil {
		return m.RoomInfo
	}
	return nil
}

// 退出房间 广播  MsgID : 580
type ACKBC_Exit_Room struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *ACKBC_Exit_Room) Reset()                    { *m = ACKBC_Exit_Room{} }
func (m *ACKBC_Exit_Room) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Exit_Room) ProtoMessage()               {}
func (*ACKBC_Exit_Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *ACKBC_Exit_Room) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

// 创建房间  MsgID : 590
type ACK_Create_Room struct {
	RID  int32   `protobuf:"varint,1,opt,name=RID" json:"RID,omitempty"`
	PWD  string  `protobuf:"bytes,2,opt,name=PWD" json:"PWD,omitempty"`
	Rule []int32 `protobuf:"varint,3,rep,packed,name=Rule" json:"Rule,omitempty"`
	Type int32   `protobuf:"varint,4,opt,name=Type" json:"Type,omitempty"`
	Err  int32   `protobuf:"varint,5,opt,name=Err" json:"Err,omitempty"`
	MSG  string  `protobuf:"bytes,6,opt,name=MSG" json:"MSG,omitempty"`
}

func (m *ACK_Create_Room) Reset()                    { *m = ACK_Create_Room{} }
func (m *ACK_Create_Room) String() string            { return proto.CompactTextString(m) }
func (*ACK_Create_Room) ProtoMessage()               {}
func (*ACK_Create_Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *ACK_Create_Room) GetRID() int32 {
	if m != nil {
		return m.RID
	}
	return 0
}

func (m *ACK_Create_Room) GetPWD() string {
	if m != nil {
		return m.PWD
	}
	return ""
}

func (m *ACK_Create_Room) GetRule() []int32 {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *ACK_Create_Room) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ACK_Create_Room) GetErr() int32 {
	if m != nil {
		return m.Err
	}
	return 0
}

func (m *ACK_Create_Room) GetMSG() string {
	if m != nil {
		return m.MSG
	}
	return ""
}

// 取消匹配 MsgID：591
type ACK_Cancel_Match_Room struct {
	UID string `protobuf:"bytes,1,opt,name=UID" json:"UID,omitempty"`
}

func (m *ACK_Cancel_Match_Room) Reset()                    { *m = ACK_Cancel_Match_Room{} }
func (m *ACK_Cancel_Match_Room) String() string            { return proto.CompactTextString(m) }
func (*ACK_Cancel_Match_Room) ProtoMessage()               {}
func (*ACK_Cancel_Match_Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *ACK_Cancel_Match_Room) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

// 返回玩家匹配信息 592
type ACK_Match_Room struct {
	UID  string  `protobuf:"bytes,1,opt,name=UID" json:"UID,omitempty"`
	Type int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	City int32   `protobuf:"varint,3,opt,name=City" json:"City,omitempty"`
	PWD  string  `protobuf:"bytes,4,opt,name=PWD" json:"PWD,omitempty"`
	Rule []int32 `protobuf:"varint,5,rep,packed,name=Rule" json:"Rule,omitempty"`
}

func (m *ACK_Match_Room) Reset()                    { *m = ACK_Match_Room{} }
func (m *ACK_Match_Room) String() string            { return proto.CompactTextString(m) }
func (*ACK_Match_Room) ProtoMessage()               {}
func (*ACK_Match_Room) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *ACK_Match_Room) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *ACK_Match_Room) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ACK_Match_Room) GetCity() int32 {
	if m != nil {
		return m.City
	}
	return 0
}

func (m *ACK_Match_Room) GetPWD() string {
	if m != nil {
		return m.PWD
	}
	return ""
}

func (m *ACK_Match_Room) GetRule() []int32 {
	if m != nil {
		return m.Rule
	}
	return nil
}

// 玩家准备的信息  MsgID : 600
type ACKBC_Ready struct {
	ReadyCount int32  `protobuf:"varint,1,opt,name=ReadyCount" json:"ReadyCount,omitempty"`
	UID        string `protobuf:"bytes,2,opt,name=UID" json:"UID,omitempty"`
	MSG        string `protobuf:"bytes,3,opt,name=MSG" json:"MSG,omitempty"`
}

func (m *ACKBC_Ready) Reset()                    { *m = ACKBC_Ready{} }
func (m *ACKBC_Ready) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Ready) ProtoMessage()               {}
func (*ACKBC_Ready) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *ACKBC_Ready) GetReadyCount() int32 {
	if m != nil {
		return m.ReadyCount
	}
	return 0
}

func (m *ACKBC_Ready) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *ACKBC_Ready) GetMSG() string {
	if m != nil {
		return m.MSG
	}
	return ""
}

// 各种玩法的状态     MsgID : 605
// Type 状态类型
// TimeOut 读秒时间
// Val 值 (按游戏玩法来)
type Room_State struct {
	Type    int32   `protobuf:"varint,1,opt,name=Type" json:"Type,omitempty"`
	TimeOut int32   `protobuf:"varint,2,opt,name=TimeOut" json:"TimeOut,omitempty"`
	Val     []int32 `protobuf:"varint,3,rep,packed,name=Val" json:"Val,omitempty"`
}

func (m *Room_State) Reset()                    { *m = Room_State{} }
func (m *Room_State) String() string            { return proto.CompactTextString(m) }
func (*Room_State) ProtoMessage()               {}
func (*Room_State) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *Room_State) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Room_State) GetTimeOut() int32 {
	if m != nil {
		return m.TimeOut
	}
	return 0
}

func (m *Room_State) GetVal() []int32 {
	if m != nil {
		return m.Val
	}
	return nil
}

// 坐下   	MsgID : 607
type ACKBC_Sitdown struct {
	Uid      int32  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Index    int32  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	NickName string `protobuf:"bytes,3,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	Score    int32  `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
}

func (m *ACKBC_Sitdown) Reset()                    { *m = ACKBC_Sitdown{} }
func (m *ACKBC_Sitdown) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Sitdown) ProtoMessage()               {}
func (*ACKBC_Sitdown) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *ACKBC_Sitdown) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ACKBC_Sitdown) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ACKBC_Sitdown) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *ACKBC_Sitdown) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

// 站起来   MsgID : 608
type ACKBC_Standup struct {
	Uid      int32  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Index    int32  `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	NickName string `protobuf:"bytes,3,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
}

func (m *ACKBC_Standup) Reset()                    { *m = ACKBC_Standup{} }
func (m *ACKBC_Standup) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Standup) ProtoMessage()               {}
func (*ACKBC_Standup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *ACKBC_Standup) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ACKBC_Standup) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ACKBC_Standup) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

// 初始化 房间牌局信息 (新开局, 断线重连)   MsgID : 610
type ACKBC_Card_Init struct {
	Dict         int32         `protobuf:"varint,1,opt,name=Dict" json:"Dict,omitempty"`
	CardCount    int32         `protobuf:"varint,2,opt,name=CardCount" json:"CardCount,omitempty"`
	CardFirst    int32         `protobuf:"varint,3,opt,name=CardFirst" json:"CardFirst,omitempty"`
	EndBlank     int32         `protobuf:"varint,4,opt,name=EndBlank" json:"EndBlank,omitempty"`
	CardLeft     int32         `protobuf:"varint,5,opt,name=CardLeft" json:"CardLeft,omitempty"`
	CurCardId    int32         `protobuf:"varint,6,opt,name=CurCardId" json:"CurCardId,omitempty"`
	CurIndex     int32         `protobuf:"varint,7,opt,name=CurIndex" json:"CurIndex,omitempty"`
	CurTime      int32         `protobuf:"varint,8,opt,name=CurTime" json:"CurTime,omitempty"`
	ZhuangIndex  int32         `protobuf:"varint,9,opt,name=ZhuangIndex" json:"ZhuangIndex,omitempty"`
	StartGame    int32         `protobuf:"varint,10,opt,name=StartGame" json:"StartGame,omitempty"`
	Defeat       []int32       `protobuf:"varint,11,rep,packed,name=Defeat" json:"Defeat,omitempty"`
	States       []*Room_State `protobuf:"bytes,12,rep,name=States" json:"States,omitempty"`
	LastPutIndex int32         `protobuf:"varint,13,opt,name=last_put_index,json=lastPutIndex" json:"last_put_index,omitempty"`
	Show         bool          `protobuf:"varint,14,opt,name=show" json:"show,omitempty"`
}

func (m *ACKBC_Card_Init) Reset()                    { *m = ACKBC_Card_Init{} }
func (m *ACKBC_Card_Init) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Card_Init) ProtoMessage()               {}
func (*ACKBC_Card_Init) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *ACKBC_Card_Init) GetDict() int32 {
	if m != nil {
		return m.Dict
	}
	return 0
}

func (m *ACKBC_Card_Init) GetCardCount() int32 {
	if m != nil {
		return m.CardCount
	}
	return 0
}

func (m *ACKBC_Card_Init) GetCardFirst() int32 {
	if m != nil {
		return m.CardFirst
	}
	return 0
}

func (m *ACKBC_Card_Init) GetEndBlank() int32 {
	if m != nil {
		return m.EndBlank
	}
	return 0
}

func (m *ACKBC_Card_Init) GetCardLeft() int32 {
	if m != nil {
		return m.CardLeft
	}
	return 0
}

func (m *ACKBC_Card_Init) GetCurCardId() int32 {
	if m != nil {
		return m.CurCardId
	}
	return 0
}

func (m *ACKBC_Card_Init) GetCurIndex() int32 {
	if m != nil {
		return m.CurIndex
	}
	return 0
}

func (m *ACKBC_Card_Init) GetCurTime() int32 {
	if m != nil {
		return m.CurTime
	}
	return 0
}

func (m *ACKBC_Card_Init) GetZhuangIndex() int32 {
	if m != nil {
		return m.ZhuangIndex
	}
	return 0
}

func (m *ACKBC_Card_Init) GetStartGame() int32 {
	if m != nil {
		return m.StartGame
	}
	return 0
}

func (m *ACKBC_Card_Init) GetDefeat() []int32 {
	if m != nil {
		return m.Defeat
	}
	return nil
}

func (m *ACKBC_Card_Init) GetStates() []*Room_State {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *ACKBC_Card_Init) GetLastPutIndex() int32 {
	if m != nil {
		return m.LastPutIndex
	}
	return 0
}

func (m *ACKBC_Card_Init) GetShow() bool {
	if m != nil {
		return m.Show
	}
	return false
}

// 玩家座位信息 MsgID : 615
type ACK_User_SeatCard struct {
	Cards []*SeatCard `protobuf:"bytes,1,rep,name=Cards" json:"Cards,omitempty"`
}

func (m *ACK_User_SeatCard) Reset()                    { *m = ACK_User_SeatCard{} }
func (m *ACK_User_SeatCard) String() string            { return proto.CompactTextString(m) }
func (*ACK_User_SeatCard) ProtoMessage()               {}
func (*ACK_User_SeatCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *ACK_User_SeatCard) GetCards() []*SeatCard {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 游戏开始  MsgID : 620
type ACKBC_Start struct {
	RoomId          int32            `protobuf:"varint,1,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
	Points          int32            `protobuf:"varint,2,opt,name=points" json:"points,omitempty"`
	State           int32            `protobuf:"varint,3,opt,name=state" json:"state,omitempty"`
	RollIndex       int32            `protobuf:"varint,4,opt,name=roll_index,json=rollIndex" json:"roll_index,omitempty"`
	ZhuangIndex     int32            `protobuf:"varint,5,opt,name=zhuang_index,json=zhuangIndex" json:"zhuang_index,omitempty"`
	Users           []*ACK_User_Info `protobuf:"bytes,6,rep,name=Users" json:"Users,omitempty"`
	Direction       int32            `protobuf:"varint,7,opt,name=direction" json:"direction,omitempty"`
	RoundCount      int32            `protobuf:"varint,8,opt,name=round_count,json=roundCount" json:"round_count,omitempty"`
	TotalRoundCount int32            `protobuf:"varint,9,opt,name=total_round_count,json=totalRoundCount" json:"total_round_count,omitempty"`
	LeftTime        int64            `protobuf:"varint,10,opt,name=left_time,json=leftTime" json:"left_time,omitempty"`
	Type            int32            `protobuf:"varint,11,opt,name=type" json:"type,omitempty"`
	Point1          int32            `protobuf:"varint,12,opt,name=Point1" json:"Point1,omitempty"`
	Point2          int32            `protobuf:"varint,13,opt,name=Point2" json:"Point2,omitempty"`
	FanCard         int32            `protobuf:"varint,14,opt,name=FanCard" json:"FanCard,omitempty"`
}

func (m *ACKBC_Start) Reset()                    { *m = ACKBC_Start{} }
func (m *ACKBC_Start) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Start) ProtoMessage()               {}
func (*ACKBC_Start) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *ACKBC_Start) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *ACKBC_Start) GetPoints() int32 {
	if m != nil {
		return m.Points
	}
	return 0
}

func (m *ACKBC_Start) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ACKBC_Start) GetRollIndex() int32 {
	if m != nil {
		return m.RollIndex
	}
	return 0
}

func (m *ACKBC_Start) GetZhuangIndex() int32 {
	if m != nil {
		return m.ZhuangIndex
	}
	return 0
}

func (m *ACKBC_Start) GetUsers() []*ACK_User_Info {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ACKBC_Start) GetDirection() int32 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *ACKBC_Start) GetRoundCount() int32 {
	if m != nil {
		return m.RoundCount
	}
	return 0
}

func (m *ACKBC_Start) GetTotalRoundCount() int32 {
	if m != nil {
		return m.TotalRoundCount
	}
	return 0
}

func (m *ACKBC_Start) GetLeftTime() int64 {
	if m != nil {
		return m.LeftTime
	}
	return 0
}

func (m *ACKBC_Start) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ACKBC_Start) GetPoint1() int32 {
	if m != nil {
		return m.Point1
	}
	return 0
}

func (m *ACKBC_Start) GetPoint2() int32 {
	if m != nil {
		return m.Point2
	}
	return 0
}

func (m *ACKBC_Start) GetFanCard() int32 {
	if m != nil {
		return m.FanCard
	}
	return 0
}

// 初始牌()  MsgID : 650
type ACK_UserCard struct {
	Seat  int32   `protobuf:"varint,1,opt,name=Seat" json:"Seat,omitempty"`
	Cards []*Card `protobuf:"bytes,2,rep,name=Cards" json:"Cards,omitempty"`
}

func (m *ACK_UserCard) Reset()                    { *m = ACK_UserCard{} }
func (m *ACK_UserCard) String() string            { return proto.CompactTextString(m) }
func (*ACK_UserCard) ProtoMessage()               {}
func (*ACK_UserCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *ACK_UserCard) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *ACK_UserCard) GetCards() []*Card {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 开始换3张  MsgID : 660
type ACK_StartChange3Card struct {
	Seat    int32   `protobuf:"varint,1,opt,name=Seat" json:"Seat,omitempty"`
	Cards   []int32 `protobuf:"varint,2,rep,packed,name=Cards" json:"Cards,omitempty"`
	TimeOut int32   `protobuf:"varint,3,opt,name=TimeOut" json:"TimeOut,omitempty"`
}

func (m *ACK_StartChange3Card) Reset()                    { *m = ACK_StartChange3Card{} }
func (m *ACK_StartChange3Card) String() string            { return proto.CompactTextString(m) }
func (*ACK_StartChange3Card) ProtoMessage()               {}
func (*ACK_StartChange3Card) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *ACK_StartChange3Card) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *ACK_StartChange3Card) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *ACK_StartChange3Card) GetTimeOut() int32 {
	if m != nil {
		return m.TimeOut
	}
	return 0
}

// 开始定缺  MsgID : 670
type ACK_StartFixMiss struct {
	Seat    int32 `protobuf:"varint,1,opt,name=Seat" json:"Seat,omitempty"`
	Type    int32 `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	TimeOut int32 `protobuf:"varint,3,opt,name=TimeOut" json:"TimeOut,omitempty"`
}

func (m *ACK_StartFixMiss) Reset()                    { *m = ACK_StartFixMiss{} }
func (m *ACK_StartFixMiss) String() string            { return proto.CompactTextString(m) }
func (*ACK_StartFixMiss) ProtoMessage()               {}
func (*ACK_StartFixMiss) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *ACK_StartFixMiss) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *ACK_StartFixMiss) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ACK_StartFixMiss) GetTimeOut() int32 {
	if m != nil {
		return m.TimeOut
	}
	return 0
}

// 换三张  MsgID : 680
type ACK_Change3Card_OK struct {
	Seat  int32   `protobuf:"varint,1,opt,name=Seat" json:"Seat,omitempty"`
	Cards []int32 `protobuf:"varint,2,rep,packed,name=Cards" json:"Cards,omitempty"`
}

func (m *ACK_Change3Card_OK) Reset()                    { *m = ACK_Change3Card_OK{} }
func (m *ACK_Change3Card_OK) String() string            { return proto.CompactTextString(m) }
func (*ACK_Change3Card_OK) ProtoMessage()               {}
func (*ACK_Change3Card_OK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *ACK_Change3Card_OK) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *ACK_Change3Card_OK) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 定缺广播  MsgID : 690
type ACKBC_FixMiss_OK struct {
	MissType []int32 `protobuf:"varint,1,rep,packed,name=MissType" json:"MissType,omitempty"`
}

func (m *ACKBC_FixMiss_OK) Reset()                    { *m = ACKBC_FixMiss_OK{} }
func (m *ACKBC_FixMiss_OK) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_FixMiss_OK) ProtoMessage()               {}
func (*ACKBC_FixMiss_OK) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *ACKBC_FixMiss_OK) GetMissType() []int32 {
	if m != nil {
		return m.MissType
	}
	return nil
}

// 当前回合的玩家  MsgID : 700
type ACKBC_CurPlayer struct {
	Seat      int32   `protobuf:"varint,1,opt,name=Seat" json:"Seat,omitempty"`
	Type      int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	Tool      []int32 `protobuf:"varint,3,rep,packed,name=Tool" json:"Tool,omitempty"`
	RoundTime int32   `protobuf:"varint,4,opt,name=RoundTime" json:"RoundTime,omitempty"`
	LeftTime  int32   `protobuf:"varint,5,opt,name=LeftTime" json:"LeftTime,omitempty"`
}

func (m *ACKBC_CurPlayer) Reset()                    { *m = ACKBC_CurPlayer{} }
func (m *ACKBC_CurPlayer) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_CurPlayer) ProtoMessage()               {}
func (*ACKBC_CurPlayer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *ACKBC_CurPlayer) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *ACKBC_CurPlayer) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ACKBC_CurPlayer) GetTool() []int32 {
	if m != nil {
		return m.Tool
	}
	return nil
}

func (m *ACKBC_CurPlayer) GetRoundTime() int32 {
	if m != nil {
		return m.RoundTime
	}
	return 0
}

func (m *ACKBC_CurPlayer) GetLeftTime() int32 {
	if m != nil {
		return m.LeftTime
	}
	return 0
}

// 摸牌  MsgID : 710
type ACKBC_GetCard struct {
	Index    int32   `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Cid      int32   `protobuf:"varint,2,opt,name=cid" json:"cid,omitempty"`
	FromLast bool    `protobuf:"varint,3,opt,name=from_last,json=fromLast" json:"from_last,omitempty"`
	Tool     []int32 `protobuf:"varint,4,rep,packed,name=Tool" json:"Tool,omitempty"`
}

func (m *ACKBC_GetCard) Reset()                    { *m = ACKBC_GetCard{} }
func (m *ACKBC_GetCard) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_GetCard) ProtoMessage()               {}
func (*ACKBC_GetCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *ACKBC_GetCard) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ACKBC_GetCard) GetCid() int32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ACKBC_GetCard) GetFromLast() bool {
	if m != nil {
		return m.FromLast
	}
	return false
}

func (m *ACKBC_GetCard) GetTool() []int32 {
	if m != nil {
		return m.Tool
	}
	return nil
}

// 出牌   MsgID : 720
type ACKBC_PutCard struct {
	Index int32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Cid   int32 `protobuf:"varint,2,opt,name=cid" json:"cid,omitempty"`
	Ting  int32 `protobuf:"varint,3,opt,name=ting" json:"ting,omitempty"`
}

func (m *ACKBC_PutCard) Reset()                    { *m = ACKBC_PutCard{} }
func (m *ACKBC_PutCard) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_PutCard) ProtoMessage()               {}
func (*ACKBC_PutCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *ACKBC_PutCard) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ACKBC_PutCard) GetCid() int32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ACKBC_PutCard) GetTing() int32 {
	if m != nil {
		return m.Ting
	}
	return 0
}

// 等待操作 ACK_WaitTool   MsgID : 730
type ACK_WaitTool struct {
	Seat    int32   `protobuf:"varint,1,opt,name=Seat" json:"Seat,omitempty"`
	Type    []int32 `protobuf:"varint,2,rep,packed,name=Type" json:"Type,omitempty"`
	TimeOut int32   `protobuf:"varint,3,opt,name=TimeOut" json:"TimeOut,omitempty"`
}

func (m *ACK_WaitTool) Reset()                    { *m = ACK_WaitTool{} }
func (m *ACK_WaitTool) String() string            { return proto.CompactTextString(m) }
func (*ACK_WaitTool) ProtoMessage()               {}
func (*ACK_WaitTool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *ACK_WaitTool) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *ACK_WaitTool) GetType() []int32 {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ACK_WaitTool) GetTimeOut() int32 {
	if m != nil {
		return m.TimeOut
	}
	return 0
}

// 吃牌 BC  MsgID : 740
type ACKBC_Chow struct {
	Seat  int32 `protobuf:"varint,1,opt,name=Seat" json:"Seat,omitempty"`
	TSeat int32 `protobuf:"varint,2,opt,name=TSeat" json:"TSeat,omitempty"`
	CID1  int32 `protobuf:"varint,3,opt,name=CID1" json:"CID1,omitempty"`
	CID2  int32 `protobuf:"varint,4,opt,name=CID2" json:"CID2,omitempty"`
	CID3  int32 `protobuf:"varint,5,opt,name=CID3" json:"CID3,omitempty"`
}

func (m *ACKBC_Chow) Reset()                    { *m = ACKBC_Chow{} }
func (m *ACKBC_Chow) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Chow) ProtoMessage()               {}
func (*ACKBC_Chow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *ACKBC_Chow) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *ACKBC_Chow) GetTSeat() int32 {
	if m != nil {
		return m.TSeat
	}
	return 0
}

func (m *ACKBC_Chow) GetCID1() int32 {
	if m != nil {
		return m.CID1
	}
	return 0
}

func (m *ACKBC_Chow) GetCID2() int32 {
	if m != nil {
		return m.CID2
	}
	return 0
}

func (m *ACKBC_Chow) GetCID3() int32 {
	if m != nil {
		return m.CID3
	}
	return 0
}

// 碰牌 BC  MsgID : 750
type ACKBC_Peng struct {
	Seat  int32 `protobuf:"varint,1,opt,name=Seat" json:"Seat,omitempty"`
	TSeat int32 `protobuf:"varint,2,opt,name=TSeat" json:"TSeat,omitempty"`
	CID   int32 `protobuf:"varint,3,opt,name=CID" json:"CID,omitempty"`
}

func (m *ACKBC_Peng) Reset()                    { *m = ACKBC_Peng{} }
func (m *ACKBC_Peng) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Peng) ProtoMessage()               {}
func (*ACKBC_Peng) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *ACKBC_Peng) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *ACKBC_Peng) GetTSeat() int32 {
	if m != nil {
		return m.TSeat
	}
	return 0
}

func (m *ACKBC_Peng) GetCID() int32 {
	if m != nil {
		return m.CID
	}
	return 0
}

// 杠牌 BC 暗杠不带CID, Type, Number,  MsgID : 760
type ACKBC_Kong struct {
	Seat     int32 `protobuf:"varint,1,opt,name=Seat" json:"Seat,omitempty"`
	TSeat    int32 `protobuf:"varint,2,opt,name=TSeat" json:"TSeat,omitempty"`
	KongType int32 `protobuf:"varint,3,opt,name=KongType" json:"KongType,omitempty"`
	CID      int32 `protobuf:"varint,4,opt,name=CID" json:"CID,omitempty"`
}

func (m *ACKBC_Kong) Reset()                    { *m = ACKBC_Kong{} }
func (m *ACKBC_Kong) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Kong) ProtoMessage()               {}
func (*ACKBC_Kong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *ACKBC_Kong) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *ACKBC_Kong) GetTSeat() int32 {
	if m != nil {
		return m.TSeat
	}
	return 0
}

func (m *ACKBC_Kong) GetKongType() int32 {
	if m != nil {
		return m.KongType
	}
	return 0
}

func (m *ACKBC_Kong) GetCID() int32 {
	if m != nil {
		return m.CID
	}
	return 0
}

// 胡牌(带一炮多响) BC  MsgID : 770
type ACKBC_Win struct {
	Seat  []int32     `protobuf:"varint,1,rep,packed,name=Seat" json:"Seat,omitempty"`
	TSeat int32       `protobuf:"varint,2,opt,name=TSeat" json:"TSeat,omitempty"`
	CID   int32       `protobuf:"varint,3,opt,name=CID" json:"CID,omitempty"`
	Cards []*SeatCard `protobuf:"bytes,4,rep,name=Cards" json:"Cards,omitempty"`
}

func (m *ACKBC_Win) Reset()                    { *m = ACKBC_Win{} }
func (m *ACKBC_Win) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Win) ProtoMessage()               {}
func (*ACKBC_Win) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *ACKBC_Win) GetSeat() []int32 {
	if m != nil {
		return m.Seat
	}
	return nil
}

func (m *ACKBC_Win) GetTSeat() int32 {
	if m != nil {
		return m.TSeat
	}
	return 0
}

func (m *ACKBC_Win) GetCID() int32 {
	if m != nil {
		return m.CID
	}
	return 0
}

func (m *ACKBC_Win) GetCards() []*SeatCard {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 流局  MsgID : 780
type ACKBC_Draw struct {
	RoomId int32       `protobuf:"varint,1,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
	Cards  []*SeatCard `protobuf:"bytes,2,rep,name=Cards" json:"Cards,omitempty"`
}

func (m *ACKBC_Draw) Reset()                    { *m = ACKBC_Draw{} }
func (m *ACKBC_Draw) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Draw) ProtoMessage()               {}
func (*ACKBC_Draw) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *ACKBC_Draw) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *ACKBC_Draw) GetCards() []*SeatCard {
	if m != nil {
		return m.Cards
	}
	return nil
}

type Reward struct {
	Score      int32 `protobuf:"varint,1,opt,name=score" json:"score,omitempty"`
	TotalScore int32 `protobuf:"varint,2,opt,name=total_score,json=totalScore" json:"total_score,omitempty"`
}

func (m *Reward) Reset()                    { *m = Reward{} }
func (m *Reward) String() string            { return proto.CompactTextString(m) }
func (*Reward) ProtoMessage()               {}
func (*Reward) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *Reward) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Reward) GetTotalScore() int32 {
	if m != nil {
		return m.TotalScore
	}
	return 0
}

// 一局结束的结算  MsgID : 790
type ACKBC_Total struct {
	WinSeat    int32       `protobuf:"varint,1,opt,name=WinSeat" json:"WinSeat,omitempty"`
	WinCard    int32       `protobuf:"varint,2,opt,name=WinCard" json:"WinCard,omitempty"`
	Cards      []*SeatCard `protobuf:"bytes,3,rep,name=Cards" json:"Cards,omitempty"`
	Tai        []int32     `protobuf:"varint,4,rep,packed,name=Tai" json:"Tai,omitempty"`
	Msg        []string    `protobuf:"bytes,5,rep,name=Msg" json:"Msg,omitempty"`
	Reward     []*Reward   `protobuf:"bytes,6,rep,name=Reward" json:"Reward,omitempty"`
	Finished   bool        `protobuf:"varint,7,opt,name=finished" json:"finished,omitempty"`
	RoundCount int64       `protobuf:"varint,8,opt,name=round_count,json=roundCount" json:"round_count,omitempty"`
	Attached   string      `protobuf:"bytes,9,opt,name=attached" json:"attached,omitempty"`
}

func (m *ACKBC_Total) Reset()                    { *m = ACKBC_Total{} }
func (m *ACKBC_Total) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Total) ProtoMessage()               {}
func (*ACKBC_Total) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *ACKBC_Total) GetWinSeat() int32 {
	if m != nil {
		return m.WinSeat
	}
	return 0
}

func (m *ACKBC_Total) GetWinCard() int32 {
	if m != nil {
		return m.WinCard
	}
	return 0
}

func (m *ACKBC_Total) GetCards() []*SeatCard {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *ACKBC_Total) GetTai() []int32 {
	if m != nil {
		return m.Tai
	}
	return nil
}

func (m *ACKBC_Total) GetMsg() []string {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *ACKBC_Total) GetReward() []*Reward {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *ACKBC_Total) GetFinished() bool {
	if m != nil {
		return m.Finished
	}
	return false
}

func (m *ACKBC_Total) GetRoundCount() int64 {
	if m != nil {
		return m.RoundCount
	}
	return 0
}

func (m *ACKBC_Total) GetAttached() string {
	if m != nil {
		return m.Attached
	}
	return ""
}

// 每次操作的结算 (血流)  MsgID : 810
type ACKBC_RoundScore struct {
	Scores []int32  `protobuf:"varint,1,rep,packed,name=Scores" json:"Scores,omitempty"`
	MSG    []string `protobuf:"bytes,2,rep,name=MSG" json:"MSG,omitempty"`
}

func (m *ACKBC_RoundScore) Reset()                    { *m = ACKBC_RoundScore{} }
func (m *ACKBC_RoundScore) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_RoundScore) ProtoMessage()               {}
func (*ACKBC_RoundScore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *ACKBC_RoundScore) GetScores() []int32 {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *ACKBC_RoundScore) GetMSG() []string {
	if m != nil {
		return m.MSG
	}
	return nil
}

// 特效事件  MsgID : 820
type ACKBC_EffectEvent struct {
	Type []int32 `protobuf:"varint,1,rep,packed,name=Type" json:"Type,omitempty"`
}

func (m *ACKBC_EffectEvent) Reset()                    { *m = ACKBC_EffectEvent{} }
func (m *ACKBC_EffectEvent) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_EffectEvent) ProtoMessage()               {}
func (*ACKBC_EffectEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *ACKBC_EffectEvent) GetType() []int32 {
	if m != nil {
		return m.Type
	}
	return nil
}

// 救济金  MsgID : 830
type ACK_Benefits struct {
	UID    string `protobuf:"bytes,1,opt,name=UID" json:"UID,omitempty"`
	Reward int32  `protobuf:"varint,2,opt,name=Reward" json:"Reward,omitempty"`
	Coin   int32  `protobuf:"varint,3,opt,name=Coin" json:"Coin,omitempty"`
}

func (m *ACK_Benefits) Reset()                    { *m = ACK_Benefits{} }
func (m *ACK_Benefits) String() string            { return proto.CompactTextString(m) }
func (*ACK_Benefits) ProtoMessage()               {}
func (*ACK_Benefits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *ACK_Benefits) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *ACK_Benefits) GetReward() int32 {
	if m != nil {
		return m.Reward
	}
	return 0
}

func (m *ACK_Benefits) GetCoin() int32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

// 需要救济金(客户端弹出页面)  MsgID : 840
type ACK_NeedBenefits struct {
	UID  string `protobuf:"bytes,1,opt,name=UID" json:"UID,omitempty"`
	Coin int32  `protobuf:"varint,2,opt,name=Coin" json:"Coin,omitempty"`
}

func (m *ACK_NeedBenefits) Reset()                    { *m = ACK_NeedBenefits{} }
func (m *ACK_NeedBenefits) String() string            { return proto.CompactTextString(m) }
func (*ACK_NeedBenefits) ProtoMessage()               {}
func (*ACK_NeedBenefits) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *ACK_NeedBenefits) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *ACK_NeedBenefits) GetCoin() int32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

// 重新开始(客户端清空, 不包括用户信息)  MsgID : 850
type ACKBC_Restart struct {
	RID int32  `protobuf:"varint,1,opt,name=RID" json:"RID,omitempty"`
	MSG string `protobuf:"bytes,2,opt,name=MSG" json:"MSG,omitempty"`
}

func (m *ACKBC_Restart) Reset()                    { *m = ACKBC_Restart{} }
func (m *ACKBC_Restart) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Restart) ProtoMessage()               {}
func (*ACKBC_Restart) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *ACKBC_Restart) GetRID() int32 {
	if m != nil {
		return m.RID
	}
	return 0
}

func (m *ACKBC_Restart) GetMSG() string {
	if m != nil {
		return m.MSG
	}
	return ""
}

//   MsgID : 860
type Card struct {
	Cid         int32 `protobuf:"varint,1,opt,name=cid" json:"cid,omitempty"`
	TargetIndex int32 `protobuf:"varint,2,opt,name=target_index,json=targetIndex" json:"target_index,omitempty"`
	Type        int32 `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
}

func (m *Card) Reset()                    { *m = Card{} }
func (m *Card) String() string            { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()               {}
func (*Card) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *Card) GetCid() int32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *Card) GetTargetIndex() int32 {
	if m != nil {
		return m.TargetIndex
	}
	return 0
}

func (m *Card) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// 玩家的牌,  用于进入玩家同步数据
//   MsgID : 870
type SeatCard struct {
	Seat       int32   `protobuf:"varint,1,opt,name=Seat" json:"Seat,omitempty"`
	ListLen    int32   `protobuf:"varint,2,opt,name=ListLen" json:"ListLen,omitempty"`
	List       []*Card `protobuf:"bytes,3,rep,name=List" json:"List,omitempty"`
	Kong       []*Card `protobuf:"bytes,4,rep,name=Kong" json:"Kong,omitempty"`
	Peng       []*Card `protobuf:"bytes,5,rep,name=Peng" json:"Peng,omitempty"`
	Chow       []*Card `protobuf:"bytes,6,rep,name=Chow" json:"Chow,omitempty"`
	Out        []*Card `protobuf:"bytes,7,rep,name=Out" json:"Out,omitempty"`
	Hua        []*Card `protobuf:"bytes,8,rep,name=Hua" json:"Hua,omitempty"`
	Hu         []*Card `protobuf:"bytes,9,rep,name=Hu" json:"Hu,omitempty"`
	LastCardId int32   `protobuf:"varint,10,opt,name=last_card_id,json=lastCardId" json:"last_card_id,omitempty"`
	Type       int32   `protobuf:"varint,11,opt,name=type" json:"type,omitempty"`
}

func (m *SeatCard) Reset()                    { *m = SeatCard{} }
func (m *SeatCard) String() string            { return proto.CompactTextString(m) }
func (*SeatCard) ProtoMessage()               {}
func (*SeatCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *SeatCard) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SeatCard) GetListLen() int32 {
	if m != nil {
		return m.ListLen
	}
	return 0
}

func (m *SeatCard) GetList() []*Card {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SeatCard) GetKong() []*Card {
	if m != nil {
		return m.Kong
	}
	return nil
}

func (m *SeatCard) GetPeng() []*Card {
	if m != nil {
		return m.Peng
	}
	return nil
}

func (m *SeatCard) GetChow() []*Card {
	if m != nil {
		return m.Chow
	}
	return nil
}

func (m *SeatCard) GetOut() []*Card {
	if m != nil {
		return m.Out
	}
	return nil
}

func (m *SeatCard) GetHua() []*Card {
	if m != nil {
		return m.Hua
	}
	return nil
}

func (m *SeatCard) GetHu() []*Card {
	if m != nil {
		return m.Hu
	}
	return nil
}

func (m *SeatCard) GetLastCardId() int32 {
	if m != nil {
		return m.LastCardId
	}
	return 0
}

func (m *SeatCard) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// 错误信息   MsgID : -1
type ErrorItem struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ErrorItem) Reset()                    { *m = ErrorItem{} }
func (m *ErrorItem) String() string            { return proto.CompactTextString(m) }
func (*ErrorItem) ProtoMessage()               {}
func (*ErrorItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *ErrorItem) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ErrorItem) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// 发送消息  MsgID : 880
type ACKBC_SendMsg struct {
	UID  string `protobuf:"bytes,1,opt,name=UID" json:"UID,omitempty"`
	Type int32  `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	Msg  int32  `protobuf:"varint,3,opt,name=Msg" json:"Msg,omitempty"`
}

func (m *ACKBC_SendMsg) Reset()                    { *m = ACKBC_SendMsg{} }
func (m *ACKBC_SendMsg) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_SendMsg) ProtoMessage()               {}
func (*ACKBC_SendMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *ACKBC_SendMsg) GetUID() string {
	if m != nil {
		return m.UID
	}
	return ""
}

func (m *ACKBC_SendMsg) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ACKBC_SendMsg) GetMsg() int32 {
	if m != nil {
		return m.Msg
	}
	return 0
}

// (预留)发送Json消息 MsgID : 890
type ACK_MessageJson struct {
	JSON string `protobuf:"bytes,1,opt,name=JSON" json:"JSON,omitempty"`
}

func (m *ACK_MessageJson) Reset()                    { *m = ACK_MessageJson{} }
func (m *ACK_MessageJson) String() string            { return proto.CompactTextString(m) }
func (*ACK_MessageJson) ProtoMessage()               {}
func (*ACK_MessageJson) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *ACK_MessageJson) GetJSON() string {
	if m != nil {
		return m.JSON
	}
	return ""
}

// MsgID:900 通知玩家开始游戏
type NotifyStartGame struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *NotifyStartGame) Reset()                    { *m = NotifyStartGame{} }
func (m *NotifyStartGame) String() string            { return proto.CompactTextString(m) }
func (*NotifyStartGame) ProtoMessage()               {}
func (*NotifyStartGame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *NotifyStartGame) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

// MsgID:390 公告客户端请求
type Notice struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *Notice) Reset()                    { *m = Notice{} }
func (m *Notice) String() string            { return proto.CompactTextString(m) }
func (*Notice) ProtoMessage()               {}
func (*Notice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *Notice) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 服务器响应结构
type NoticeInfo struct {
	Id      int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	Type    int32  `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
}

func (m *NoticeInfo) Reset()                    { *m = NoticeInfo{} }
func (m *NoticeInfo) String() string            { return proto.CompactTextString(m) }
func (*NoticeInfo) ProtoMessage()               {}
func (*NoticeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *NoticeInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NoticeInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *NoticeInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// MsgID:910 服务器响应
type AckNotice struct {
	Notices []*NoticeInfo `protobuf:"bytes,1,rep,name=notices" json:"notices,omitempty"`
}

func (m *AckNotice) Reset()                    { *m = AckNotice{} }
func (m *AckNotice) String() string            { return proto.CompactTextString(m) }
func (*AckNotice) ProtoMessage()               {}
func (*AckNotice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

func (m *AckNotice) GetNotices() []*NoticeInfo {
	if m != nil {
		return m.Notices
	}
	return nil
}

type Summary struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Icon       string `protobuf:"bytes,3,opt,name=icon" json:"icon,omitempty"`
	RoundCount int32  `protobuf:"varint,4,opt,name=round_count,json=roundCount" json:"round_count,omitempty"`
	WinCount   int32  `protobuf:"varint,5,opt,name=win_count,json=winCount" json:"win_count,omitempty"`
	PayCount   int32  `protobuf:"varint,6,opt,name=pay_count,json=payCount" json:"pay_count,omitempty"`
	FireCount  int32  `protobuf:"varint,7,opt,name=fire_count,json=fireCount" json:"fire_count,omitempty"`
	Score      int32  `protobuf:"varint,8,opt,name=score" json:"score,omitempty"`
	Houseowner bool   `protobuf:"varint,9,opt,name=houseowner" json:"houseowner,omitempty"`
	Rank       int32  `protobuf:"varint,10,opt,name=rank" json:"rank,omitempty"`
}

func (m *Summary) Reset()                    { *m = Summary{} }
func (m *Summary) String() string            { return proto.CompactTextString(m) }
func (*Summary) ProtoMessage()               {}
func (*Summary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

func (m *Summary) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Summary) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Summary) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *Summary) GetRoundCount() int32 {
	if m != nil {
		return m.RoundCount
	}
	return 0
}

func (m *Summary) GetWinCount() int32 {
	if m != nil {
		return m.WinCount
	}
	return 0
}

func (m *Summary) GetPayCount() int32 {
	if m != nil {
		return m.PayCount
	}
	return 0
}

func (m *Summary) GetFireCount() int32 {
	if m != nil {
		return m.FireCount
	}
	return 0
}

func (m *Summary) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Summary) GetHouseowner() bool {
	if m != nil {
		return m.Houseowner
	}
	return false
}

func (m *Summary) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

// MsgID:920 每局结算战绩统计
type TotalSummary struct {
	List []*Summary `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *TotalSummary) Reset()                    { *m = TotalSummary{} }
func (m *TotalSummary) String() string            { return proto.CompactTextString(m) }
func (*TotalSummary) ProtoMessage()               {}
func (*TotalSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88} }

func (m *TotalSummary) GetList() []*Summary {
	if m != nil {
		return m.List
	}
	return nil
}

// MsgID:400
type Disband struct {
	RoomId int32 `protobuf:"varint,1,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
}

func (m *Disband) Reset()                    { *m = Disband{} }
func (m *Disband) String() string            { return proto.CompactTextString(m) }
func (*Disband) ProtoMessage()               {}
func (*Disband) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{89} }

func (m *Disband) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type DisbandItem struct {
	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	NickName  string `protobuf:"bytes,2,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	Icon      string `protobuf:"bytes,3,opt,name=icon" json:"icon,omitempty"`
	Result    int64  `protobuf:"varint,4,opt,name=result" json:"result,omitempty"`
	IsStarter bool   `protobuf:"varint,5,opt,name=is_starter,json=isStarter" json:"is_starter,omitempty"`
}

func (m *DisbandItem) Reset()                    { *m = DisbandItem{} }
func (m *DisbandItem) String() string            { return proto.CompactTextString(m) }
func (*DisbandItem) ProtoMessage()               {}
func (*DisbandItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{90} }

func (m *DisbandItem) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *DisbandItem) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *DisbandItem) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *DisbandItem) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *DisbandItem) GetIsStarter() bool {
	if m != nil {
		return m.IsStarter
	}
	return false
}

// MsgID:800
type AckDisband struct {
	List     []*DisbandItem `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	LeftTime int32          `protobuf:"varint,2,opt,name=left_time,json=leftTime" json:"left_time,omitempty"`
}

func (m *AckDisband) Reset()                    { *m = AckDisband{} }
func (m *AckDisband) String() string            { return proto.CompactTextString(m) }
func (*AckDisband) ProtoMessage()               {}
func (*AckDisband) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91} }

func (m *AckDisband) GetList() []*DisbandItem {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *AckDisband) GetLeftTime() int32 {
	if m != nil {
		return m.LeftTime
	}
	return 0
}

// MsgID:401 投票
type Vote struct {
	RoomId int32 `protobuf:"varint,1,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
	Result int32 `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
}

func (m *Vote) Reset()                    { *m = Vote{} }
func (m *Vote) String() string            { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()               {}
func (*Vote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{92} }

func (m *Vote) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *Vote) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

// MsgID:940 通知解散
type NotifyDisband struct {
	RoomId int32 `protobuf:"varint,1,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
	Result int32 `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
}

func (m *NotifyDisband) Reset()                    { *m = NotifyDisband{} }
func (m *NotifyDisband) String() string            { return proto.CompactTextString(m) }
func (*NotifyDisband) ProtoMessage()               {}
func (*NotifyDisband) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93} }

func (m *NotifyDisband) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *NotifyDisband) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type BattleRecord struct {
	Type            int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	TotalRoundCount int32 `protobuf:"varint,2,opt,name=total_round_count,json=totalRoundCount" json:"total_round_count,omitempty"`
	Ratio           int32 `protobuf:"varint,3,opt,name=ratio" json:"ratio,omitempty"`
}

func (m *BattleRecord) Reset()                    { *m = BattleRecord{} }
func (m *BattleRecord) String() string            { return proto.CompactTextString(m) }
func (*BattleRecord) ProtoMessage()               {}
func (*BattleRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{94} }

func (m *BattleRecord) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *BattleRecord) GetTotalRoundCount() int32 {
	if m != nil {
		return m.TotalRoundCount
	}
	return 0
}

func (m *BattleRecord) GetRatio() int32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

type BattleRecordRequest struct {
}

func (m *BattleRecordRequest) Reset()                    { *m = BattleRecordRequest{} }
func (m *BattleRecordRequest) String() string            { return proto.CompactTextString(m) }
func (*BattleRecordRequest) ProtoMessage()               {}
func (*BattleRecordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{95} }

// MsgID:402 战绩统计记录
type BattleRecordResponse struct {
	List []*BattleRecord `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *BattleRecordResponse) Reset()                    { *m = BattleRecordResponse{} }
func (m *BattleRecordResponse) String() string            { return proto.CompactTextString(m) }
func (*BattleRecordResponse) ProtoMessage()               {}
func (*BattleRecordResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{96} }

func (m *BattleRecordResponse) GetList() []*BattleRecord {
	if m != nil {
		return m.List
	}
	return nil
}

type HomeOwner struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	NickName   string `protobuf:"bytes,2,opt,name=nick_name,json=nickName" json:"nick_name,omitempty"`
	Icon       string `protobuf:"bytes,3,opt,name=icon" json:"icon,omitempty"`
	Rule       string `protobuf:"bytes,4,opt,name=rule" json:"rule,omitempty"`
	Timestamp  int64  `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	RoomId     int64  `protobuf:"varint,6,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
	UniqueCode string `protobuf:"bytes,7,opt,name=unique_code,json=uniqueCode" json:"unique_code,omitempty"`
	Rid        int32  `protobuf:"varint,8,opt,name=rid" json:"rid,omitempty"`
	SelfRecord int32  `protobuf:"varint,9,opt,name=selfRecord" json:"selfRecord,omitempty"`
	Roomtype   int32  `protobuf:"varint,10,opt,name=roomtype" json:"roomtype,omitempty"`
}

func (m *HomeOwner) Reset()                    { *m = HomeOwner{} }
func (m *HomeOwner) String() string            { return proto.CompactTextString(m) }
func (*HomeOwner) ProtoMessage()               {}
func (*HomeOwner) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{97} }

func (m *HomeOwner) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HomeOwner) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *HomeOwner) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *HomeOwner) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *HomeOwner) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *HomeOwner) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *HomeOwner) GetUniqueCode() string {
	if m != nil {
		return m.UniqueCode
	}
	return ""
}

func (m *HomeOwner) GetRid() int32 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *HomeOwner) GetSelfRecord() int32 {
	if m != nil {
		return m.SelfRecord
	}
	return 0
}

func (m *HomeOwner) GetRoomtype() int32 {
	if m != nil {
		return m.Roomtype
	}
	return 0
}

type HomeOwnerRequest struct {
	Type int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
}

func (m *HomeOwnerRequest) Reset()                    { *m = HomeOwnerRequest{} }
func (m *HomeOwnerRequest) String() string            { return proto.CompactTextString(m) }
func (*HomeOwnerRequest) ProtoMessage()               {}
func (*HomeOwnerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{98} }

func (m *HomeOwnerRequest) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

// MsgID:403 房主信息
type HomeOwnerResponse struct {
	List []*HomeOwner `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *HomeOwnerResponse) Reset()                    { *m = HomeOwnerResponse{} }
func (m *HomeOwnerResponse) String() string            { return proto.CompactTextString(m) }
func (*HomeOwnerResponse) ProtoMessage()               {}
func (*HomeOwnerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{99} }

func (m *HomeOwnerResponse) GetList() []*HomeOwner {
	if m != nil {
		return m.List
	}
	return nil
}

type RoomSummaryRequest struct {
	UniqueCode string `protobuf:"bytes,1,opt,name=unique_code,json=uniqueCode" json:"unique_code,omitempty"`
}

func (m *RoomSummaryRequest) Reset()                    { *m = RoomSummaryRequest{} }
func (m *RoomSummaryRequest) String() string            { return proto.CompactTextString(m) }
func (*RoomSummaryRequest) ProtoMessage()               {}
func (*RoomSummaryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{100} }

func (m *RoomSummaryRequest) GetUniqueCode() string {
	if m != nil {
		return m.UniqueCode
	}
	return ""
}

// MsgID:404 房间玩家信息
type RoomSummaryResponse struct {
	List      []*Summary `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	RoomId    int32      `protobuf:"varint,2,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
	RoomType  int32      `protobuf:"varint,3,opt,name=roomType" json:"roomType,omitempty"`
	HomeOwner *HomeOwner `protobuf:"bytes,4,opt,name=home_owner,json=homeOwner" json:"home_owner,omitempty"`
}

func (m *RoomSummaryResponse) Reset()                    { *m = RoomSummaryResponse{} }
func (m *RoomSummaryResponse) String() string            { return proto.CompactTextString(m) }
func (*RoomSummaryResponse) ProtoMessage()               {}
func (*RoomSummaryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{101} }

func (m *RoomSummaryResponse) GetList() []*Summary {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *RoomSummaryResponse) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoomSummaryResponse) GetRoomType() int32 {
	if m != nil {
		return m.RoomType
	}
	return 0
}

func (m *RoomSummaryResponse) GetHomeOwner() *HomeOwner {
	if m != nil {
		return m.HomeOwner
	}
	return nil
}

// ACK_BattleDetail  953
type ACK_BattleDetail struct {
	RoomId     int64                 `protobuf:"varint,1,opt,name=roomId" json:"roomId,omitempty"`
	UniqueCode string                `protobuf:"bytes,2,opt,name=uniqueCode" json:"uniqueCode,omitempty"`
	RoomType   int32                 `protobuf:"varint,3,opt,name=roomType" json:"roomType,omitempty"`
	Rid        int32                 `protobuf:"varint,4,opt,name=rid" json:"rid,omitempty"`
	RoundCount int32                 `protobuf:"varint,5,opt,name=roundCount" json:"roundCount,omitempty"`
	List       []*PlayerBattleDetail `protobuf:"bytes,6,rep,name=list" json:"list,omitempty"`
}

func (m *ACK_BattleDetail) Reset()                    { *m = ACK_BattleDetail{} }
func (m *ACK_BattleDetail) String() string            { return proto.CompactTextString(m) }
func (*ACK_BattleDetail) ProtoMessage()               {}
func (*ACK_BattleDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{102} }

func (m *ACK_BattleDetail) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *ACK_BattleDetail) GetUniqueCode() string {
	if m != nil {
		return m.UniqueCode
	}
	return ""
}

func (m *ACK_BattleDetail) GetRoomType() int32 {
	if m != nil {
		return m.RoomType
	}
	return 0
}

func (m *ACK_BattleDetail) GetRid() int32 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *ACK_BattleDetail) GetRoundCount() int32 {
	if m != nil {
		return m.RoundCount
	}
	return 0
}

func (m *ACK_BattleDetail) GetList() []*PlayerBattleDetail {
	if m != nil {
		return m.List
	}
	return nil
}

type PlayerBattleDetail struct {
	PlayBack   string              `protobuf:"bytes,1,opt,name=playBack" json:"playBack,omitempty"`
	ReviewCode string              `protobuf:"bytes,2,opt,name=reviewCode" json:"reviewCode,omitempty"`
	List       []*PlayerBattleInfo `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
}

func (m *PlayerBattleDetail) Reset()                    { *m = PlayerBattleDetail{} }
func (m *PlayerBattleDetail) String() string            { return proto.CompactTextString(m) }
func (*PlayerBattleDetail) ProtoMessage()               {}
func (*PlayerBattleDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{103} }

func (m *PlayerBattleDetail) GetPlayBack() string {
	if m != nil {
		return m.PlayBack
	}
	return ""
}

func (m *PlayerBattleDetail) GetReviewCode() string {
	if m != nil {
		return m.ReviewCode
	}
	return ""
}

func (m *PlayerBattleDetail) GetList() []*PlayerBattleInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type PlayerBattleInfo struct {
	UserId   string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	NickName string `protobuf:"bytes,2,opt,name=nickName" json:"nickName,omitempty"`
	Icon     string `protobuf:"bytes,3,opt,name=icon" json:"icon,omitempty"`
	Score    int32  `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
}

func (m *PlayerBattleInfo) Reset()                    { *m = PlayerBattleInfo{} }
func (m *PlayerBattleInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayerBattleInfo) ProtoMessage()               {}
func (*PlayerBattleInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{104} }

func (m *PlayerBattleInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *PlayerBattleInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *PlayerBattleInfo) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *PlayerBattleInfo) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

// MsgID:960 通知玩家状态
type NotifyUserState struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status      int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	OfflineTime int32  `protobuf:"varint,3,opt,name=offline_time,json=offlineTime" json:"offline_time,omitempty"`
}

func (m *NotifyUserState) Reset()                    { *m = NotifyUserState{} }
func (m *NotifyUserState) String() string            { return proto.CompactTextString(m) }
func (*NotifyUserState) ProtoMessage()               {}
func (*NotifyUserState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{105} }

func (m *NotifyUserState) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NotifyUserState) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *NotifyUserState) GetOfflineTime() int32 {
	if m != nil {
		return m.OfflineTime
	}
	return 0
}

// MsgID:970 通知客户端小提示
type Tip struct {
	Tip string `protobuf:"bytes,1,opt,name=tip" json:"tip,omitempty"`
}

func (m *Tip) Reset()                    { *m = Tip{} }
func (m *Tip) String() string            { return proto.CompactTextString(m) }
func (*Tip) ProtoMessage()               {}
func (*Tip) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{106} }

func (m *Tip) GetTip() string {
	if m != nil {
		return m.Tip
	}
	return ""
}

// MsgID:971 通知踢人
type NotifyKick struct {
	Indexs []int32 `protobuf:"varint,1,rep,packed,name=indexs" json:"indexs,omitempty"`
}

func (m *NotifyKick) Reset()                    { *m = NotifyKick{} }
func (m *NotifyKick) String() string            { return proto.CompactTextString(m) }
func (*NotifyKick) ProtoMessage()               {}
func (*NotifyKick) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{107} }

func (m *NotifyKick) GetIndexs() []int32 {
	if m != nil {
		return m.Indexs
	}
	return nil
}

// MsgID:972 通知销毁房间
type NotifyDestoryRoom struct {
	RoomId         int32 `protobuf:"varint,1,opt,name=room_id,json=roomId" json:"room_id,omitempty"`
	IsOwnerDisband bool  `protobuf:"varint,2,opt,name=IsOwnerDisband" json:"IsOwnerDisband,omitempty"`
}

func (m *NotifyDestoryRoom) Reset()                    { *m = NotifyDestoryRoom{} }
func (m *NotifyDestoryRoom) String() string            { return proto.CompactTextString(m) }
func (*NotifyDestoryRoom) ProtoMessage()               {}
func (*NotifyDestoryRoom) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{108} }

func (m *NotifyDestoryRoom) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *NotifyDestoryRoom) GetIsOwnerDisband() bool {
	if m != nil {
		return m.IsOwnerDisband
	}
	return false
}

// MsgID:990 通知充值
type NotifyRecharge struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *NotifyRecharge) Reset()                    { *m = NotifyRecharge{} }
func (m *NotifyRecharge) String() string            { return proto.CompactTextString(m) }
func (*NotifyRecharge) ProtoMessage()               {}
func (*NotifyRecharge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{109} }

func (m *NotifyRecharge) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// MsgID:991 通知充值响应
type NotifyRechargeResponse struct {
	Id      int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Diamond int32 `protobuf:"varint,2,opt,name=diamond" json:"diamond,omitempty"`
}

func (m *NotifyRechargeResponse) Reset()                    { *m = NotifyRechargeResponse{} }
func (m *NotifyRechargeResponse) String() string            { return proto.CompactTextString(m) }
func (*NotifyRechargeResponse) ProtoMessage()               {}
func (*NotifyRechargeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{110} }

func (m *NotifyRechargeResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NotifyRechargeResponse) GetDiamond() int32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

// 换花请求
type TransferHuaRequest struct {
}

func (m *TransferHuaRequest) Reset()                    { *m = TransferHuaRequest{} }
func (m *TransferHuaRequest) String() string            { return proto.CompactTextString(m) }
func (*TransferHuaRequest) ProtoMessage()               {}
func (*TransferHuaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{111} }

// MsgID:992 换花响应
type TransferHuaResponse struct {
	Index   int32   `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	HuaList []int32 `protobuf:"varint,2,rep,packed,name=hua_list,json=huaList" json:"hua_list,omitempty"`
	CardIds []int32 `protobuf:"varint,3,rep,packed,name=card_ids,json=cardIds" json:"card_ids,omitempty"`
}

func (m *TransferHuaResponse) Reset()                    { *m = TransferHuaResponse{} }
func (m *TransferHuaResponse) String() string            { return proto.CompactTextString(m) }
func (*TransferHuaResponse) ProtoMessage()               {}
func (*TransferHuaResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{112} }

func (m *TransferHuaResponse) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TransferHuaResponse) GetHuaList() []int32 {
	if m != nil {
		return m.HuaList
	}
	return nil
}

func (m *TransferHuaResponse) GetCardIds() []int32 {
	if m != nil {
		return m.CardIds
	}
	return nil
}

// 送礼物请求
type Gift struct {
	Id   int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	TUid string `protobuf:"bytes,2,opt,name=tUid" json:"tUid,omitempty"`
}

func (m *Gift) Reset()                    { *m = Gift{} }
func (m *Gift) String() string            { return proto.CompactTextString(m) }
func (*Gift) ProtoMessage()               {}
func (*Gift) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{113} }

func (m *Gift) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Gift) GetTUid() string {
	if m != nil {
		return m.TUid
	}
	return ""
}

// 请求房间战绩详细列表信息
type BattleDetail struct {
	RoomId int32 `protobuf:"varint,1,opt,name=roomId" json:"roomId,omitempty"`
}

func (m *BattleDetail) Reset()                    { *m = BattleDetail{} }
func (m *BattleDetail) String() string            { return proto.CompactTextString(m) }
func (*BattleDetail) ProtoMessage()               {}
func (*BattleDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{114} }

func (m *BattleDetail) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// 送礼物响应
type ACK_Gift struct {
	Id      int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Diamond int32  `protobuf:"varint,2,opt,name=diamond" json:"diamond,omitempty"`
	Uid     string `protobuf:"bytes,3,opt,name=uid" json:"uid,omitempty"`
	TUid    string `protobuf:"bytes,4,opt,name=tUid" json:"tUid,omitempty"`
}

func (m *ACK_Gift) Reset()                    { *m = ACK_Gift{} }
func (m *ACK_Gift) String() string            { return proto.CompactTextString(m) }
func (*ACK_Gift) ProtoMessage()               {}
func (*ACK_Gift) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{115} }

func (m *ACK_Gift) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ACK_Gift) GetDiamond() int32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *ACK_Gift) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ACK_Gift) GetTUid() string {
	if m != nil {
		return m.TUid
	}
	return ""
}

// MsgID:1010 通知客户端停服
type GameNotice struct {
	Id      int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *GameNotice) Reset()                    { *m = GameNotice{} }
func (m *GameNotice) String() string            { return proto.CompactTextString(m) }
func (*GameNotice) ProtoMessage()               {}
func (*GameNotice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{116} }

func (m *GameNotice) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GameNotice) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// 叫分 1200
type Sddz_Jiaofen struct {
	Sid string `protobuf:"bytes,1,opt,name=Sid" json:"Sid,omitempty"`
	Fen int32  `protobuf:"varint,2,opt,name=Fen" json:"Fen,omitempty"`
}

func (m *Sddz_Jiaofen) Reset()                    { *m = Sddz_Jiaofen{} }
func (m *Sddz_Jiaofen) String() string            { return proto.CompactTextString(m) }
func (*Sddz_Jiaofen) ProtoMessage()               {}
func (*Sddz_Jiaofen) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{117} }

func (m *Sddz_Jiaofen) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *Sddz_Jiaofen) GetFen() int32 {
	if m != nil {
		return m.Fen
	}
	return 0
}

// 明牌请求 1201
type Sddz_Mingpai struct {
	Sid string `protobuf:"bytes,1,opt,name=Sid" json:"Sid,omitempty"`
}

func (m *Sddz_Mingpai) Reset()                    { *m = Sddz_Mingpai{} }
func (m *Sddz_Mingpai) String() string            { return proto.CompactTextString(m) }
func (*Sddz_Mingpai) ProtoMessage()               {}
func (*Sddz_Mingpai) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{118} }

func (m *Sddz_Mingpai) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

// 加倍请求 1202
type Sddz_Jiabei struct {
	Sid    string `protobuf:"bytes,1,opt,name=Sid" json:"Sid,omitempty"`
	Jiabei bool   `protobuf:"varint,2,opt,name=Jiabei" json:"Jiabei,omitempty"`
}

func (m *Sddz_Jiabei) Reset()                    { *m = Sddz_Jiabei{} }
func (m *Sddz_Jiabei) String() string            { return proto.CompactTextString(m) }
func (*Sddz_Jiabei) ProtoMessage()               {}
func (*Sddz_Jiabei) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{119} }

func (m *Sddz_Jiabei) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *Sddz_Jiabei) GetJiabei() bool {
	if m != nil {
		return m.Jiabei
	}
	return false
}

// 请求出牌 1203
type Sddz_Chupai struct {
	Sid   string  `protobuf:"bytes,1,opt,name=Sid" json:"Sid,omitempty"`
	Type  int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	Cards []int32 `protobuf:"varint,3,rep,packed,name=Cards" json:"Cards,omitempty"`
}

func (m *Sddz_Chupai) Reset()                    { *m = Sddz_Chupai{} }
func (m *Sddz_Chupai) String() string            { return proto.CompactTextString(m) }
func (*Sddz_Chupai) ProtoMessage()               {}
func (*Sddz_Chupai) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{120} }

func (m *Sddz_Chupai) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *Sddz_Chupai) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Sddz_Chupai) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 不要或者要不起 1204
type Sddz_Pass struct {
	Sid string `protobuf:"bytes,1,opt,name=Sid" json:"Sid,omitempty"`
}

func (m *Sddz_Pass) Reset()                    { *m = Sddz_Pass{} }
func (m *Sddz_Pass) String() string            { return proto.CompactTextString(m) }
func (*Sddz_Pass) ProtoMessage()               {}
func (*Sddz_Pass) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{121} }

func (m *Sddz_Pass) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

// 报到请求 1205
type Srddz_Baodao struct {
	Sid       string  `protobuf:"bytes,1,opt,name=Sid" json:"Sid,omitempty"`
	BaodaoNum int32   `protobuf:"varint,2,opt,name=BaodaoNum" json:"BaodaoNum,omitempty"`
	Cards     []int32 `protobuf:"varint,3,rep,packed,name=Cards" json:"Cards,omitempty"`
}

func (m *Srddz_Baodao) Reset()                    { *m = Srddz_Baodao{} }
func (m *Srddz_Baodao) String() string            { return proto.CompactTextString(m) }
func (*Srddz_Baodao) ProtoMessage()               {}
func (*Srddz_Baodao) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{122} }

func (m *Srddz_Baodao) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *Srddz_Baodao) GetBaodaoNum() int32 {
	if m != nil {
		return m.BaodaoNum
	}
	return 0
}

func (m *Srddz_Baodao) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 正常打和直接赢请求 1206
type Srddz_StrictWin struct {
	Sid         string `protobuf:"bytes,1,opt,name=Sid" json:"Sid,omitempty"`
	IsStrictWin bool   `protobuf:"varint,2,opt,name=IsStrictWin" json:"IsStrictWin,omitempty"`
}

func (m *Srddz_StrictWin) Reset()                    { *m = Srddz_StrictWin{} }
func (m *Srddz_StrictWin) String() string            { return proto.CompactTextString(m) }
func (*Srddz_StrictWin) ProtoMessage()               {}
func (*Srddz_StrictWin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{123} }

func (m *Srddz_StrictWin) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *Srddz_StrictWin) GetIsStrictWin() bool {
	if m != nil {
		return m.IsStrictWin
	}
	return false
}

// 下注请求 1207
type Nn_Xiazhu struct {
	Sid string `protobuf:"bytes,1,opt,name=Sid" json:"Sid,omitempty"`
	Fen int32  `protobuf:"varint,2,opt,name=Fen" json:"Fen,omitempty"`
}

func (m *Nn_Xiazhu) Reset()                    { *m = Nn_Xiazhu{} }
func (m *Nn_Xiazhu) String() string            { return proto.CompactTextString(m) }
func (*Nn_Xiazhu) ProtoMessage()               {}
func (*Nn_Xiazhu) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{124} }

func (m *Nn_Xiazhu) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *Nn_Xiazhu) GetFen() int32 {
	if m != nil {
		return m.Fen
	}
	return 0
}

// 叫分广播 1500
type ACKBC_Sddz_Jiaofen struct {
	Uid int32 `protobuf:"varint,1,opt,name=Uid" json:"Uid,omitempty"`
	Fen int32 `protobuf:"varint,2,opt,name=Fen" json:"Fen,omitempty"`
}

func (m *ACKBC_Sddz_Jiaofen) Reset()                    { *m = ACKBC_Sddz_Jiaofen{} }
func (m *ACKBC_Sddz_Jiaofen) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Sddz_Jiaofen) ProtoMessage()               {}
func (*ACKBC_Sddz_Jiaofen) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{125} }

func (m *ACKBC_Sddz_Jiaofen) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ACKBC_Sddz_Jiaofen) GetFen() int32 {
	if m != nil {
		return m.Fen
	}
	return 0
}

// 通知地主 1501
type ACKBC_Sddz_Dizhu struct {
	Uid      int32   `protobuf:"varint,1,opt,name=Uid" json:"Uid,omitempty"`
	Fen      int32   `protobuf:"varint,2,opt,name=Fen" json:"Fen,omitempty"`
	Mingpai  bool    `protobuf:"varint,3,opt,name=Mingpai" json:"Mingpai,omitempty"`
	Jiabei   bool    `protobuf:"varint,4,opt,name=Jiabei" json:"Jiabei,omitempty"`
	Dipai    []int32 `protobuf:"varint,5,rep,packed,name=Dipai" json:"Dipai,omitempty"`
	LeftTime int32   `protobuf:"varint,6,opt,name=LeftTime" json:"LeftTime,omitempty"`
}

func (m *ACKBC_Sddz_Dizhu) Reset()                    { *m = ACKBC_Sddz_Dizhu{} }
func (m *ACKBC_Sddz_Dizhu) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Sddz_Dizhu) ProtoMessage()               {}
func (*ACKBC_Sddz_Dizhu) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{126} }

func (m *ACKBC_Sddz_Dizhu) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ACKBC_Sddz_Dizhu) GetFen() int32 {
	if m != nil {
		return m.Fen
	}
	return 0
}

func (m *ACKBC_Sddz_Dizhu) GetMingpai() bool {
	if m != nil {
		return m.Mingpai
	}
	return false
}

func (m *ACKBC_Sddz_Dizhu) GetJiabei() bool {
	if m != nil {
		return m.Jiabei
	}
	return false
}

func (m *ACKBC_Sddz_Dizhu) GetDipai() []int32 {
	if m != nil {
		return m.Dipai
	}
	return nil
}

func (m *ACKBC_Sddz_Dizhu) GetLeftTime() int32 {
	if m != nil {
		return m.LeftTime
	}
	return 0
}

// 过 1502
type ACKBC_Sddz_Pass struct {
	Uid int32 `protobuf:"varint,1,opt,name=Uid" json:"Uid,omitempty"`
}

func (m *ACKBC_Sddz_Pass) Reset()                    { *m = ACKBC_Sddz_Pass{} }
func (m *ACKBC_Sddz_Pass) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Sddz_Pass) ProtoMessage()               {}
func (*ACKBC_Sddz_Pass) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{127} }

func (m *ACKBC_Sddz_Pass) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// 一局游戏结束，通知谁先出完了 1503
type ACKBC_Sddz_End struct {
	Uid   int32       `protobuf:"varint,1,opt,name=Uid" json:"Uid,omitempty"`
	Cards []*SeatCard `protobuf:"bytes,2,rep,name=Cards" json:"Cards,omitempty"`
	Dipai []int32     `protobuf:"varint,3,rep,packed,name=Dipai" json:"Dipai,omitempty"`
}

func (m *ACKBC_Sddz_End) Reset()                    { *m = ACKBC_Sddz_End{} }
func (m *ACKBC_Sddz_End) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Sddz_End) ProtoMessage()               {}
func (*ACKBC_Sddz_End) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{128} }

func (m *ACKBC_Sddz_End) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ACKBC_Sddz_End) GetCards() []*SeatCard {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *ACKBC_Sddz_End) GetDipai() []int32 {
	if m != nil {
		return m.Dipai
	}
	return nil
}

// 三人斗地主一局结束的结算  MsgID : 1504
type ACKBC_Sddz_Total struct {
	List       []*SddzPerTotal `protobuf:"bytes,1,rep,name=List" json:"List,omitempty"`
	Finished   bool            `protobuf:"varint,2,opt,name=Finished" json:"Finished,omitempty"`
	RoundCount int64           `protobuf:"varint,3,opt,name=RoundCount" json:"RoundCount,omitempty"`
	Attached   string          `protobuf:"bytes,4,opt,name=Attached" json:"Attached,omitempty"`
	LeftTime   int32           `protobuf:"varint,5,opt,name=LeftTime" json:"LeftTime,omitempty"`
}

func (m *ACKBC_Sddz_Total) Reset()                    { *m = ACKBC_Sddz_Total{} }
func (m *ACKBC_Sddz_Total) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Sddz_Total) ProtoMessage()               {}
func (*ACKBC_Sddz_Total) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{129} }

func (m *ACKBC_Sddz_Total) GetList() []*SddzPerTotal {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ACKBC_Sddz_Total) GetFinished() bool {
	if m != nil {
		return m.Finished
	}
	return false
}

func (m *ACKBC_Sddz_Total) GetRoundCount() int64 {
	if m != nil {
		return m.RoundCount
	}
	return 0
}

func (m *ACKBC_Sddz_Total) GetAttached() string {
	if m != nil {
		return m.Attached
	}
	return ""
}

func (m *ACKBC_Sddz_Total) GetLeftTime() int32 {
	if m != nil {
		return m.LeftTime
	}
	return 0
}

// 初始化 房间牌局信息 (新开局, 断线重连)   MsgID : 1505
type ACKBC_Sddz_Card_Init struct {
	CurCards        []int32         `protobuf:"varint,1,rep,packed,name=CurCards" json:"CurCards,omitempty"`
	CurIndex        int32           `protobuf:"varint,2,opt,name=CurIndex" json:"CurIndex,omitempty"`
	CurTime         int32           `protobuf:"varint,3,opt,name=CurTime" json:"CurTime,omitempty"`
	DizhuIndex      int32           `protobuf:"varint,4,opt,name=DizhuIndex" json:"DizhuIndex,omitempty"`
	StartGame       int32           `protobuf:"varint,5,opt,name=StartGame" json:"StartGame,omitempty"`
	CurOutputIndex  int32           `protobuf:"varint,6,opt,name=CurOutputIndex" json:"CurOutputIndex,omitempty"`
	Difen           int32           `protobuf:"varint,7,opt,name=Difen" json:"Difen,omitempty"`
	Dipai           []int32         `protobuf:"varint,8,rep,packed,name=Dipai" json:"Dipai,omitempty"`
	Stage           int32           `protobuf:"varint,9,opt,name=Stage" json:"Stage,omitempty"`
	HaveJiao        []bool          `protobuf:"varint,10,rep,packed,name=HaveJiao" json:"HaveJiao,omitempty"`
	JiaoFen         []int32         `protobuf:"varint,11,rep,packed,name=JiaoFen" json:"JiaoFen,omitempty"`
	HaveJiabei      []bool          `protobuf:"varint,12,rep,packed,name=HaveJiabei" json:"HaveJiabei,omitempty"`
	IsJiabei        []bool          `protobuf:"varint,13,rep,packed,name=IsJiabei" json:"IsJiabei,omitempty"`
	IsMing          []bool          `protobuf:"varint,14,rep,packed,name=IsMing" json:"IsMing,omitempty"`
	Beishu          int32           `protobuf:"varint,15,opt,name=Beishu" json:"Beishu,omitempty"`
	LastOpt         []int32         `protobuf:"varint,16,rep,packed,name=LastOpt" json:"LastOpt,omitempty"`
	LastOptParam    []*SddzPerCards `protobuf:"bytes,17,rep,name=LastOptParam" json:"LastOptParam,omitempty"`
	IsHuang         bool            `protobuf:"varint,18,opt,name=IsHuang" json:"IsHuang,omitempty"`
	IsTouliao       bool            `protobuf:"varint,19,opt,name=IsTouliao" json:"IsTouliao,omitempty"`
	IsMingW         bool            `protobuf:"varint,20,opt,name=IsMingW" json:"IsMingW,omitempty"`
	BaodaoState     int32           `protobuf:"varint,21,opt,name=BaodaoState" json:"BaodaoState,omitempty"`
	BaodaoNum       int32           `protobuf:"varint,22,opt,name=BaodaoNum" json:"BaodaoNum,omitempty"`
	IsStrictWin     bool            `protobuf:"varint,23,opt,name=IsStrictWin" json:"IsStrictWin,omitempty"`
	IsSeleBaodao    bool            `protobuf:"varint,24,opt,name=IsSeleBaodao" json:"IsSeleBaodao,omitempty"`
	IsSeleStrictWin bool            `protobuf:"varint,25,opt,name=IsSeleStrictWin" json:"IsSeleStrictWin,omitempty"`
	BaodaoCards     []int32         `protobuf:"varint,26,rep,packed,name=BaodaoCards" json:"BaodaoCards,omitempty"`
	XiaZhu          []int32         `protobuf:"varint,27,rep,packed,name=XiaZhu" json:"XiaZhu,omitempty"`
	OutZhadan       []int32         `protobuf:"varint,28,rep,packed,name=OutZhadan" json:"OutZhadan,omitempty"`
}

func (m *ACKBC_Sddz_Card_Init) Reset()                    { *m = ACKBC_Sddz_Card_Init{} }
func (m *ACKBC_Sddz_Card_Init) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Sddz_Card_Init) ProtoMessage()               {}
func (*ACKBC_Sddz_Card_Init) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{130} }

func (m *ACKBC_Sddz_Card_Init) GetCurCards() []int32 {
	if m != nil {
		return m.CurCards
	}
	return nil
}

func (m *ACKBC_Sddz_Card_Init) GetCurIndex() int32 {
	if m != nil {
		return m.CurIndex
	}
	return 0
}

func (m *ACKBC_Sddz_Card_Init) GetCurTime() int32 {
	if m != nil {
		return m.CurTime
	}
	return 0
}

func (m *ACKBC_Sddz_Card_Init) GetDizhuIndex() int32 {
	if m != nil {
		return m.DizhuIndex
	}
	return 0
}

func (m *ACKBC_Sddz_Card_Init) GetStartGame() int32 {
	if m != nil {
		return m.StartGame
	}
	return 0
}

func (m *ACKBC_Sddz_Card_Init) GetCurOutputIndex() int32 {
	if m != nil {
		return m.CurOutputIndex
	}
	return 0
}

func (m *ACKBC_Sddz_Card_Init) GetDifen() int32 {
	if m != nil {
		return m.Difen
	}
	return 0
}

func (m *ACKBC_Sddz_Card_Init) GetDipai() []int32 {
	if m != nil {
		return m.Dipai
	}
	return nil
}

func (m *ACKBC_Sddz_Card_Init) GetStage() int32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

func (m *ACKBC_Sddz_Card_Init) GetHaveJiao() []bool {
	if m != nil {
		return m.HaveJiao
	}
	return nil
}

func (m *ACKBC_Sddz_Card_Init) GetJiaoFen() []int32 {
	if m != nil {
		return m.JiaoFen
	}
	return nil
}

func (m *ACKBC_Sddz_Card_Init) GetHaveJiabei() []bool {
	if m != nil {
		return m.HaveJiabei
	}
	return nil
}

func (m *ACKBC_Sddz_Card_Init) GetIsJiabei() []bool {
	if m != nil {
		return m.IsJiabei
	}
	return nil
}

func (m *ACKBC_Sddz_Card_Init) GetIsMing() []bool {
	if m != nil {
		return m.IsMing
	}
	return nil
}

func (m *ACKBC_Sddz_Card_Init) GetBeishu() int32 {
	if m != nil {
		return m.Beishu
	}
	return 0
}

func (m *ACKBC_Sddz_Card_Init) GetLastOpt() []int32 {
	if m != nil {
		return m.LastOpt
	}
	return nil
}

func (m *ACKBC_Sddz_Card_Init) GetLastOptParam() []*SddzPerCards {
	if m != nil {
		return m.LastOptParam
	}
	return nil
}

func (m *ACKBC_Sddz_Card_Init) GetIsHuang() bool {
	if m != nil {
		return m.IsHuang
	}
	return false
}

func (m *ACKBC_Sddz_Card_Init) GetIsTouliao() bool {
	if m != nil {
		return m.IsTouliao
	}
	return false
}

func (m *ACKBC_Sddz_Card_Init) GetIsMingW() bool {
	if m != nil {
		return m.IsMingW
	}
	return false
}

func (m *ACKBC_Sddz_Card_Init) GetBaodaoState() int32 {
	if m != nil {
		return m.BaodaoState
	}
	return 0
}

func (m *ACKBC_Sddz_Card_Init) GetBaodaoNum() int32 {
	if m != nil {
		return m.BaodaoNum
	}
	return 0
}

func (m *ACKBC_Sddz_Card_Init) GetIsStrictWin() bool {
	if m != nil {
		return m.IsStrictWin
	}
	return false
}

func (m *ACKBC_Sddz_Card_Init) GetIsSeleBaodao() bool {
	if m != nil {
		return m.IsSeleBaodao
	}
	return false
}

func (m *ACKBC_Sddz_Card_Init) GetIsSeleStrictWin() bool {
	if m != nil {
		return m.IsSeleStrictWin
	}
	return false
}

func (m *ACKBC_Sddz_Card_Init) GetBaodaoCards() []int32 {
	if m != nil {
		return m.BaodaoCards
	}
	return nil
}

func (m *ACKBC_Sddz_Card_Init) GetXiaZhu() []int32 {
	if m != nil {
		return m.XiaZhu
	}
	return nil
}

func (m *ACKBC_Sddz_Card_Init) GetOutZhadan() []int32 {
	if m != nil {
		return m.OutZhadan
	}
	return nil
}

// 游戏开始  MsgID : 1506
type ACKBC_Sddz_Start struct {
	RoundCount      int32 `protobuf:"varint,1,opt,name=RoundCount" json:"RoundCount,omitempty"`
	TotalRoundCount int32 `protobuf:"varint,2,opt,name=TotalRoundCount" json:"TotalRoundCount,omitempty"`
	LeftTime        int64 `protobuf:"varint,3,opt,name=LeftTime" json:"LeftTime,omitempty"`
}

func (m *ACKBC_Sddz_Start) Reset()                    { *m = ACKBC_Sddz_Start{} }
func (m *ACKBC_Sddz_Start) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Sddz_Start) ProtoMessage()               {}
func (*ACKBC_Sddz_Start) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{131} }

func (m *ACKBC_Sddz_Start) GetRoundCount() int32 {
	if m != nil {
		return m.RoundCount
	}
	return 0
}

func (m *ACKBC_Sddz_Start) GetTotalRoundCount() int32 {
	if m != nil {
		return m.TotalRoundCount
	}
	return 0
}

func (m *ACKBC_Sddz_Start) GetLeftTime() int64 {
	if m != nil {
		return m.LeftTime
	}
	return 0
}

// 出牌 1507
type ACKBC_Sddz_Chupai struct {
	Uid    int32   `protobuf:"varint,1,opt,name=Uid" json:"Uid,omitempty"`
	Type   int32   `protobuf:"varint,2,opt,name=Type" json:"Type,omitempty"`
	Cards  []int32 `protobuf:"varint,3,rep,packed,name=Cards" json:"Cards,omitempty"`
	Beishu int32   `protobuf:"varint,4,opt,name=Beishu" json:"Beishu,omitempty"`
}

func (m *ACKBC_Sddz_Chupai) Reset()                    { *m = ACKBC_Sddz_Chupai{} }
func (m *ACKBC_Sddz_Chupai) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Sddz_Chupai) ProtoMessage()               {}
func (*ACKBC_Sddz_Chupai) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{132} }

func (m *ACKBC_Sddz_Chupai) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ACKBC_Sddz_Chupai) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ACKBC_Sddz_Chupai) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *ACKBC_Sddz_Chupai) GetBeishu() int32 {
	if m != nil {
		return m.Beishu
	}
	return 0
}

// 通知叫地主 1508
type ACKBC_Sddz_JiaoDizhu struct {
	Uid      int32 `protobuf:"varint,1,opt,name=Uid" json:"Uid,omitempty"`
	CurFen   int32 `protobuf:"varint,2,opt,name=CurFen" json:"CurFen,omitempty"`
	LeftTime int32 `protobuf:"varint,3,opt,name=LeftTime" json:"LeftTime,omitempty"`
}

func (m *ACKBC_Sddz_JiaoDizhu) Reset()                    { *m = ACKBC_Sddz_JiaoDizhu{} }
func (m *ACKBC_Sddz_JiaoDizhu) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Sddz_JiaoDizhu) ProtoMessage()               {}
func (*ACKBC_Sddz_JiaoDizhu) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{133} }

func (m *ACKBC_Sddz_JiaoDizhu) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ACKBC_Sddz_JiaoDizhu) GetCurFen() int32 {
	if m != nil {
		return m.CurFen
	}
	return 0
}

func (m *ACKBC_Sddz_JiaoDizhu) GetLeftTime() int32 {
	if m != nil {
		return m.LeftTime
	}
	return 0
}

// 明牌通知 1509
type ACKBC_Sddz_Mingpai struct {
	Uid     int32   `protobuf:"varint,1,opt,name=Uid" json:"Uid,omitempty"`
	Mingpai bool    `protobuf:"varint,2,opt,name=Mingpai" json:"Mingpai,omitempty"`
	Cards   []int32 `protobuf:"varint,3,rep,packed,name=Cards" json:"Cards,omitempty"`
}

func (m *ACKBC_Sddz_Mingpai) Reset()                    { *m = ACKBC_Sddz_Mingpai{} }
func (m *ACKBC_Sddz_Mingpai) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Sddz_Mingpai) ProtoMessage()               {}
func (*ACKBC_Sddz_Mingpai) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{134} }

func (m *ACKBC_Sddz_Mingpai) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ACKBC_Sddz_Mingpai) GetMingpai() bool {
	if m != nil {
		return m.Mingpai
	}
	return false
}

func (m *ACKBC_Sddz_Mingpai) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 加倍通知 1510
type ACKBC_Sddz_Jiabei struct {
	Uid    int32 `protobuf:"varint,1,opt,name=Uid" json:"Uid,omitempty"`
	Jiabei bool  `protobuf:"varint,2,opt,name=Jiabei" json:"Jiabei,omitempty"`
}

func (m *ACKBC_Sddz_Jiabei) Reset()                    { *m = ACKBC_Sddz_Jiabei{} }
func (m *ACKBC_Sddz_Jiabei) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Sddz_Jiabei) ProtoMessage()               {}
func (*ACKBC_Sddz_Jiabei) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{135} }

func (m *ACKBC_Sddz_Jiabei) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ACKBC_Sddz_Jiabei) GetJiabei() bool {
	if m != nil {
		return m.Jiabei
	}
	return false
}

// 报到通知 1511
type ACKBC_Srddz_Baodao struct {
	Uid       int32   `protobuf:"varint,1,opt,name=Uid" json:"Uid,omitempty"`
	BaodaoNum int32   `protobuf:"varint,2,opt,name=BaodaoNum" json:"BaodaoNum,omitempty"`
	Cards     []int32 `protobuf:"varint,3,rep,packed,name=Cards" json:"Cards,omitempty"`
}

func (m *ACKBC_Srddz_Baodao) Reset()                    { *m = ACKBC_Srddz_Baodao{} }
func (m *ACKBC_Srddz_Baodao) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Srddz_Baodao) ProtoMessage()               {}
func (*ACKBC_Srddz_Baodao) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{136} }

func (m *ACKBC_Srddz_Baodao) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ACKBC_Srddz_Baodao) GetBaodaoNum() int32 {
	if m != nil {
		return m.BaodaoNum
	}
	return 0
}

func (m *ACKBC_Srddz_Baodao) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

// 直接赢通知 1512
type ACKBC_Srddz_StrictWin struct {
	Uid         int32 `protobuf:"varint,1,opt,name=Uid" json:"Uid,omitempty"`
	IsStrictWin bool  `protobuf:"varint,2,opt,name=IsStrictWin" json:"IsStrictWin,omitempty"`
}

func (m *ACKBC_Srddz_StrictWin) Reset()                    { *m = ACKBC_Srddz_StrictWin{} }
func (m *ACKBC_Srddz_StrictWin) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Srddz_StrictWin) ProtoMessage()               {}
func (*ACKBC_Srddz_StrictWin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{137} }

func (m *ACKBC_Srddz_StrictWin) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ACKBC_Srddz_StrictWin) GetIsStrictWin() bool {
	if m != nil {
		return m.IsStrictWin
	}
	return false
}

// 叫分广播 1513
type ACKBC_Nn_Xiazhu struct {
	Uid int32 `protobuf:"varint,1,opt,name=Uid" json:"Uid,omitempty"`
	Fen int32 `protobuf:"varint,2,opt,name=Fen" json:"Fen,omitempty"`
}

func (m *ACKBC_Nn_Xiazhu) Reset()                    { *m = ACKBC_Nn_Xiazhu{} }
func (m *ACKBC_Nn_Xiazhu) String() string            { return proto.CompactTextString(m) }
func (*ACKBC_Nn_Xiazhu) ProtoMessage()               {}
func (*ACKBC_Nn_Xiazhu) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{138} }

func (m *ACKBC_Nn_Xiazhu) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ACKBC_Nn_Xiazhu) GetFen() int32 {
	if m != nil {
		return m.Fen
	}
	return 0
}

type SddzPerCards struct {
	Cards []int32 `protobuf:"varint,1,rep,packed,name=Cards" json:"Cards,omitempty"`
}

func (m *SddzPerCards) Reset()                    { *m = SddzPerCards{} }
func (m *SddzPerCards) String() string            { return proto.CompactTextString(m) }
func (*SddzPerCards) ProtoMessage()               {}
func (*SddzPerCards) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{139} }

func (m *SddzPerCards) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

type SddzPerTotal struct {
	Seat       int32 `protobuf:"varint,1,opt,name=Seat" json:"Seat,omitempty"`
	Difen      int32 `protobuf:"varint,2,opt,name=Difen" json:"Difen,omitempty"`
	Beishu     int32 `protobuf:"varint,3,opt,name=Beishu" json:"Beishu,omitempty"`
	Score      int32 `protobuf:"varint,4,opt,name=Score" json:"Score,omitempty"`
	TotalScore int32 `protobuf:"varint,5,opt,name=TotalScore" json:"TotalScore,omitempty"`
	Chun       bool  `protobuf:"varint,6,opt,name=Chun" json:"Chun,omitempty"`
	Fanchun    bool  `protobuf:"varint,7,opt,name=Fanchun" json:"Fanchun,omitempty"`
	DirectWin  bool  `protobuf:"varint,8,opt,name=DirectWin" json:"DirectWin,omitempty"`
}

func (m *SddzPerTotal) Reset()                    { *m = SddzPerTotal{} }
func (m *SddzPerTotal) String() string            { return proto.CompactTextString(m) }
func (*SddzPerTotal) ProtoMessage()               {}
func (*SddzPerTotal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{140} }

func (m *SddzPerTotal) GetSeat() int32 {
	if m != nil {
		return m.Seat
	}
	return 0
}

func (m *SddzPerTotal) GetDifen() int32 {
	if m != nil {
		return m.Difen
	}
	return 0
}

func (m *SddzPerTotal) GetBeishu() int32 {
	if m != nil {
		return m.Beishu
	}
	return 0
}

func (m *SddzPerTotal) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *SddzPerTotal) GetTotalScore() int32 {
	if m != nil {
		return m.TotalScore
	}
	return 0
}

func (m *SddzPerTotal) GetChun() bool {
	if m != nil {
		return m.Chun
	}
	return false
}

func (m *SddzPerTotal) GetFanchun() bool {
	if m != nil {
		return m.Fanchun
	}
	return false
}

func (m *SddzPerTotal) GetDirectWin() bool {
	if m != nil {
		return m.DirectWin
	}
	return false
}

func init() {
	proto.RegisterType((*Message)(nil), "mjgame.Message")
	proto.RegisterType((*Login)(nil), "mjgame.Login")
	proto.RegisterType((*Room_List)(nil), "mjgame.Room_List")
	proto.RegisterType((*Create_Room)(nil), "mjgame.Create_Room")
	proto.RegisterType((*Match_Room)(nil), "mjgame.Match_Room")
	proto.RegisterType((*Cancel_Match_Room)(nil), "mjgame.Cancel_Match_Room")
	proto.RegisterType((*RuleItem)(nil), "mjgame.RuleItem")
	proto.RegisterType((*Find_Room)(nil), "mjgame.Find_Room")
	proto.RegisterType((*Disband_Room)(nil), "mjgame.Disband_Room")
	proto.RegisterType((*Roomowner_Disband_Room)(nil), "mjgame.Roomowner_Disband_Room")
	proto.RegisterType((*Room_Info)(nil), "mjgame.Room_Info")
	proto.RegisterType((*Into_Room)(nil), "mjgame.Into_Room")
	proto.RegisterType((*Into_MatchRoom)(nil), "mjgame.Into_MatchRoom")
	proto.RegisterType((*ExitRoom)(nil), "mjgame.ExitRoom")
	proto.RegisterType((*SitDown)(nil), "mjgame.SitDown")
	proto.RegisterType((*StandUp)(nil), "mjgame.StandUp")
	proto.RegisterType((*User_Info)(nil), "mjgame.User_Info")
	proto.RegisterType((*UserReady)(nil), "mjgame.UserReady")
	proto.RegisterType((*User_Seat)(nil), "mjgame.User_Seat")
	proto.RegisterType((*Start_Game)(nil), "mjgame.Start_Game")
	proto.RegisterType((*Restart_Game)(nil), "mjgame.Restart_Game")
	proto.RegisterType((*Get_CurUser)(nil), "mjgame.Get_CurUser")
	proto.RegisterType((*Get_User_Card_Count)(nil), "mjgame.Get_User_Card_Count")
	proto.RegisterType((*Put_Card)(nil), "mjgame.Put_Card")
	proto.RegisterType((*Chow)(nil), "mjgame.Chow")
	proto.RegisterType((*Peng)(nil), "mjgame.Peng")
	proto.RegisterType((*Kong)(nil), "mjgame.Kong")
	proto.RegisterType((*Ting)(nil), "mjgame.Ting")
	proto.RegisterType((*Win)(nil), "mjgame.Win")
	proto.RegisterType((*Pass)(nil), "mjgame.Pass")
	proto.RegisterType((*Benefits)(nil), "mjgame.Benefits")
	proto.RegisterType((*Change3Card)(nil), "mjgame.Change3Card")
	proto.RegisterType((*FixMiss)(nil), "mjgame.FixMiss")
	proto.RegisterType((*Chat)(nil), "mjgame.Chat")
	proto.RegisterType((*MessageJson)(nil), "mjgame.MessageJson")
	proto.RegisterType((*KickRequest)(nil), "mjgame.KickRequest")
	proto.RegisterType((*KickResponse)(nil), "mjgame.KickResponse")
	proto.RegisterType((*ACK_Login)(nil), "mjgame.ACK_Login")
	proto.RegisterType((*ACK_User_Info)(nil), "mjgame.ACK_User_Info")
	proto.RegisterType((*ACK_Room_Info)(nil), "mjgame.ACK_Room_Info")
	proto.RegisterType((*ACK_Room_User)(nil), "mjgame.ACK_Room_User")
	proto.RegisterType((*ACK_Room_List)(nil), "mjgame.ACK_Room_List")
	proto.RegisterType((*ACK_Find_Room)(nil), "mjgame.ACK_Find_Room")
	proto.RegisterType((*ACK_MSG)(nil), "mjgame.ACK_MSG")
	proto.RegisterType((*ACKBC_Into_Room)(nil), "mjgame.ACKBC_Into_Room")
	proto.RegisterType((*ACK_Into_MatchRoom)(nil), "mjgame.ACK_Into_MatchRoom")
	proto.RegisterType((*ACKBC_Exit_Room)(nil), "mjgame.ACKBC_Exit_Room")
	proto.RegisterType((*ACK_Create_Room)(nil), "mjgame.ACK_Create_Room")
	proto.RegisterType((*ACK_Cancel_Match_Room)(nil), "mjgame.ACK_Cancel_Match_Room")
	proto.RegisterType((*ACK_Match_Room)(nil), "mjgame.ACK_Match_Room")
	proto.RegisterType((*ACKBC_Ready)(nil), "mjgame.ACKBC_Ready")
	proto.RegisterType((*Room_State)(nil), "mjgame.Room_State")
	proto.RegisterType((*ACKBC_Sitdown)(nil), "mjgame.ACKBC_Sitdown")
	proto.RegisterType((*ACKBC_Standup)(nil), "mjgame.ACKBC_Standup")
	proto.RegisterType((*ACKBC_Card_Init)(nil), "mjgame.ACKBC_Card_Init")
	proto.RegisterType((*ACK_User_SeatCard)(nil), "mjgame.ACK_User_SeatCard")
	proto.RegisterType((*ACKBC_Start)(nil), "mjgame.ACKBC_Start")
	proto.RegisterType((*ACK_UserCard)(nil), "mjgame.ACK_UserCard")
	proto.RegisterType((*ACK_StartChange3Card)(nil), "mjgame.ACK_StartChange3Card")
	proto.RegisterType((*ACK_StartFixMiss)(nil), "mjgame.ACK_StartFixMiss")
	proto.RegisterType((*ACK_Change3Card_OK)(nil), "mjgame.ACK_Change3Card_OK")
	proto.RegisterType((*ACKBC_FixMiss_OK)(nil), "mjgame.ACKBC_FixMiss_OK")
	proto.RegisterType((*ACKBC_CurPlayer)(nil), "mjgame.ACKBC_CurPlayer")
	proto.RegisterType((*ACKBC_GetCard)(nil), "mjgame.ACKBC_GetCard")
	proto.RegisterType((*ACKBC_PutCard)(nil), "mjgame.ACKBC_PutCard")
	proto.RegisterType((*ACK_WaitTool)(nil), "mjgame.ACK_WaitTool")
	proto.RegisterType((*ACKBC_Chow)(nil), "mjgame.ACKBC_Chow")
	proto.RegisterType((*ACKBC_Peng)(nil), "mjgame.ACKBC_Peng")
	proto.RegisterType((*ACKBC_Kong)(nil), "mjgame.ACKBC_Kong")
	proto.RegisterType((*ACKBC_Win)(nil), "mjgame.ACKBC_Win")
	proto.RegisterType((*ACKBC_Draw)(nil), "mjgame.ACKBC_Draw")
	proto.RegisterType((*Reward)(nil), "mjgame.Reward")
	proto.RegisterType((*ACKBC_Total)(nil), "mjgame.ACKBC_Total")
	proto.RegisterType((*ACKBC_RoundScore)(nil), "mjgame.ACKBC_RoundScore")
	proto.RegisterType((*ACKBC_EffectEvent)(nil), "mjgame.ACKBC_EffectEvent")
	proto.RegisterType((*ACK_Benefits)(nil), "mjgame.ACK_Benefits")
	proto.RegisterType((*ACK_NeedBenefits)(nil), "mjgame.ACK_NeedBenefits")
	proto.RegisterType((*ACKBC_Restart)(nil), "mjgame.ACKBC_Restart")
	proto.RegisterType((*Card)(nil), "mjgame.Card")
	proto.RegisterType((*SeatCard)(nil), "mjgame.SeatCard")
	proto.RegisterType((*ErrorItem)(nil), "mjgame.ErrorItem")
	proto.RegisterType((*ACKBC_SendMsg)(nil), "mjgame.ACKBC_SendMsg")
	proto.RegisterType((*ACK_MessageJson)(nil), "mjgame.ACK_MessageJson")
	proto.RegisterType((*NotifyStartGame)(nil), "mjgame.NotifyStartGame")
	proto.RegisterType((*Notice)(nil), "mjgame.Notice")
	proto.RegisterType((*NoticeInfo)(nil), "mjgame.NoticeInfo")
	proto.RegisterType((*AckNotice)(nil), "mjgame.AckNotice")
	proto.RegisterType((*Summary)(nil), "mjgame.Summary")
	proto.RegisterType((*TotalSummary)(nil), "mjgame.TotalSummary")
	proto.RegisterType((*Disband)(nil), "mjgame.Disband")
	proto.RegisterType((*DisbandItem)(nil), "mjgame.DisbandItem")
	proto.RegisterType((*AckDisband)(nil), "mjgame.AckDisband")
	proto.RegisterType((*Vote)(nil), "mjgame.Vote")
	proto.RegisterType((*NotifyDisband)(nil), "mjgame.NotifyDisband")
	proto.RegisterType((*BattleRecord)(nil), "mjgame.BattleRecord")
	proto.RegisterType((*BattleRecordRequest)(nil), "mjgame.BattleRecordRequest")
	proto.RegisterType((*BattleRecordResponse)(nil), "mjgame.BattleRecordResponse")
	proto.RegisterType((*HomeOwner)(nil), "mjgame.HomeOwner")
	proto.RegisterType((*HomeOwnerRequest)(nil), "mjgame.HomeOwnerRequest")
	proto.RegisterType((*HomeOwnerResponse)(nil), "mjgame.HomeOwnerResponse")
	proto.RegisterType((*RoomSummaryRequest)(nil), "mjgame.RoomSummaryRequest")
	proto.RegisterType((*RoomSummaryResponse)(nil), "mjgame.RoomSummaryResponse")
	proto.RegisterType((*ACK_BattleDetail)(nil), "mjgame.ACK_BattleDetail")
	proto.RegisterType((*PlayerBattleDetail)(nil), "mjgame.PlayerBattleDetail")
	proto.RegisterType((*PlayerBattleInfo)(nil), "mjgame.PlayerBattleInfo")
	proto.RegisterType((*NotifyUserState)(nil), "mjgame.NotifyUserState")
	proto.RegisterType((*Tip)(nil), "mjgame.Tip")
	proto.RegisterType((*NotifyKick)(nil), "mjgame.NotifyKick")
	proto.RegisterType((*NotifyDestoryRoom)(nil), "mjgame.NotifyDestoryRoom")
	proto.RegisterType((*NotifyRecharge)(nil), "mjgame.NotifyRecharge")
	proto.RegisterType((*NotifyRechargeResponse)(nil), "mjgame.NotifyRechargeResponse")
	proto.RegisterType((*TransferHuaRequest)(nil), "mjgame.TransferHuaRequest")
	proto.RegisterType((*TransferHuaResponse)(nil), "mjgame.TransferHuaResponse")
	proto.RegisterType((*Gift)(nil), "mjgame.Gift")
	proto.RegisterType((*BattleDetail)(nil), "mjgame.BattleDetail")
	proto.RegisterType((*ACK_Gift)(nil), "mjgame.ACK_Gift")
	proto.RegisterType((*GameNotice)(nil), "mjgame.GameNotice")
	proto.RegisterType((*Sddz_Jiaofen)(nil), "mjgame.Sddz_Jiaofen")
	proto.RegisterType((*Sddz_Mingpai)(nil), "mjgame.Sddz_Mingpai")
	proto.RegisterType((*Sddz_Jiabei)(nil), "mjgame.Sddz_Jiabei")
	proto.RegisterType((*Sddz_Chupai)(nil), "mjgame.Sddz_Chupai")
	proto.RegisterType((*Sddz_Pass)(nil), "mjgame.Sddz_Pass")
	proto.RegisterType((*Srddz_Baodao)(nil), "mjgame.Srddz_Baodao")
	proto.RegisterType((*Srddz_StrictWin)(nil), "mjgame.Srddz_StrictWin")
	proto.RegisterType((*Nn_Xiazhu)(nil), "mjgame.Nn_Xiazhu")
	proto.RegisterType((*ACKBC_Sddz_Jiaofen)(nil), "mjgame.ACKBC_Sddz_Jiaofen")
	proto.RegisterType((*ACKBC_Sddz_Dizhu)(nil), "mjgame.ACKBC_Sddz_Dizhu")
	proto.RegisterType((*ACKBC_Sddz_Pass)(nil), "mjgame.ACKBC_Sddz_Pass")
	proto.RegisterType((*ACKBC_Sddz_End)(nil), "mjgame.ACKBC_Sddz_End")
	proto.RegisterType((*ACKBC_Sddz_Total)(nil), "mjgame.ACKBC_Sddz_Total")
	proto.RegisterType((*ACKBC_Sddz_Card_Init)(nil), "mjgame.ACKBC_Sddz_Card_Init")
	proto.RegisterType((*ACKBC_Sddz_Start)(nil), "mjgame.ACKBC_Sddz_Start")
	proto.RegisterType((*ACKBC_Sddz_Chupai)(nil), "mjgame.ACKBC_Sddz_Chupai")
	proto.RegisterType((*ACKBC_Sddz_JiaoDizhu)(nil), "mjgame.ACKBC_Sddz_JiaoDizhu")
	proto.RegisterType((*ACKBC_Sddz_Mingpai)(nil), "mjgame.ACKBC_Sddz_Mingpai")
	proto.RegisterType((*ACKBC_Sddz_Jiabei)(nil), "mjgame.ACKBC_Sddz_Jiabei")
	proto.RegisterType((*ACKBC_Srddz_Baodao)(nil), "mjgame.ACKBC_Srddz_Baodao")
	proto.RegisterType((*ACKBC_Srddz_StrictWin)(nil), "mjgame.ACKBC_Srddz_StrictWin")
	proto.RegisterType((*ACKBC_Nn_Xiazhu)(nil), "mjgame.ACKBC_Nn_Xiazhu")
	proto.RegisterType((*SddzPerCards)(nil), "mjgame.SddzPerCards")
	proto.RegisterType((*SddzPerTotal)(nil), "mjgame.SddzPerTotal")
	proto.RegisterEnum("mjgame.Direction", Direction_name, Direction_value)
	proto.RegisterEnum("mjgame.MsgID", MsgID_name, MsgID_value)
	proto.RegisterEnum("mjgame.StateID", StateID_name, StateID_value)
	proto.RegisterEnum("mjgame.RuleID", RuleID_name, RuleID_value)
}

func init() { proto.RegisterFile("proto/mjgame.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 5889 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x7c, 0x5d, 0x8c, 0x1c, 0x59,
	0x75, 0xf0, 0xf6, 0x7f, 0xf7, 0xe9, 0xb1, 0xe7, 0x4e, 0x79, 0x3c, 0xee, 0xf5, 0x7a, 0xed, 0xa1,
	0x00, 0xaf, 0x31, 0x68, 0x17, 0xdb, 0x2c, 0x2c, 0xdf, 0x07, 0x81, 0x99, 0x9e, 0xf1, 0x4c, 0xaf,
	0xe7, 0x2f, 0xd5, 0x3d, 0xeb, 0x5d, 0x0b, 0xa9, 0x53, 0xee, 0xae, 0x99, 0x2e, 0xdc, 0x53, 0x35,
	0xd4, 0xcf, 0x8e, 0xbd, 0x0f, 0x91, 0x82, 0x08, 0x21, 0x09, 0x59, 0x25, 0x84, 0x10, 0x44, 0xa2,
	0x08, 0x78, 0x88, 0x08, 0xe1, 0x81, 0x10, 0x02, 0xe4, 0x47, 0x08, 0x25, 0x28, 0x5a, 0x11, 0x94,
	0x20, 0x84, 0x92, 0x08, 0x2d, 0xec, 0x06, 0xc8, 0xb2, 0x91, 0xa2, 0x28, 0x42, 0x79, 0x88, 0x50,
	0x94, 0x44, 0xe7, 0xdc, 0x9f, 0xba, 0x55, 0x5d, 0x63, 0xcf, 0x46, 0x28, 0x0f, 0xf1, 0x8b, 0xef,
	0x39, 0xf7, 0xd6, 0xb9, 0xe7, 0x9e, 0x73, 0xee, 0xf9, 0xb9, 0xf7, 0xf6, 0x80, 0xb1, 0x1f, 0xf8,
	0x91, 0xff, 0xc8, 0xde, 0xbb, 0x77, 0xed, 0x3d, 0xe7, 0x61, 0x02, 0x8c, 0x2a, 0x87, 0xcc, 0xd7,
	0x43, 0x6d, 0xdd, 0x09, 0x43, 0x7b, 0xd7, 0x31, 0x8e, 0x43, 0xb1, 0xb3, 0xd4, 0x2a, 0xcc, 0x17,
	0x2e, 0x54, 0xac, 0x62, 0x67, 0xc9, 0x60, 0x50, 0x5a, 0xef, 0xae, 0xb4, 0x8a, 0xf3, 0x85, 0x0b,
	0x53, 0x16, 0x36, 0xcd, 0x5f, 0x2e, 0x40, 0x65, 0xcd, 0xdf, 0x75, 0x3d, 0xec, 0xeb, 0x8a, 0xc1,
	0x0d, 0x0b, 0x9b, 0x88, 0xb1, 0x3a, 0x4b, 0x34, 0xba, 0x62, 0x61, 0xd3, 0x38, 0x05, 0xb5, 0x95,
	0xad, 0x6e, 0x7f, 0x6d, 0x63, 0xa5, 0x55, 0x9a, 0x2f, 0x5c, 0x28, 0x5a, 0xd5, 0x95, 0xad, 0xee,
	0xda, 0xc6, 0x8a, 0xea, 0x58, 0xe8, 0xb5, 0xca, 0x49, 0xc7, 0x42, 0xcf, 0x98, 0x83, 0xaa, 0xbf,
	0xef, 0x78, 0xee, 0xb0, 0x55, 0x21, 0xc2, 0x02, 0x32, 0x66, 0xa1, 0x12, 0xf9, 0xb7, 0x1c, 0xaf,
	0x55, 0x25, 0x34, 0x07, 0xcc, 0x2b, 0xd0, 0xb0, 0x7c, 0x7f, 0xaf, 0xbf, 0xe6, 0x86, 0x91, 0x61,
	0x40, 0xb9, 0x77, 0x67, 0xdf, 0x11, 0xec, 0x53, 0x1b, 0x71, 0x6d, 0x37, 0xba, 0x23, 0x78, 0xa2,
	0xb6, 0xb9, 0x07, 0xcd, 0x76, 0xe0, 0xd8, 0x91, 0xd3, 0xc7, 0x6f, 0x73, 0xd6, 0x21, 0x09, 0x15,
	0x73, 0x08, 0x95, 0x12, 0x42, 0xf8, 0xe5, 0xd6, 0xf5, 0x25, 0x5a, 0x40, 0xc3, 0xc2, 0x26, 0x8e,
	0xb2, 0xe2, 0xb1, 0xd3, 0xaa, 0xcc, 0x97, 0x70, 0x14, 0xb6, 0xcd, 0x31, 0xc0, 0xba, 0x1d, 0x0d,
	0x46, 0xff, 0x3b, 0xb3, 0xbd, 0x16, 0x66, 0xda, 0xb6, 0x37, 0x70, 0xc6, 0xfd, 0xbb, 0x4d, 0x6a,
	0x3e, 0x0c, 0x75, 0x1c, 0xde, 0x89, 0x9c, 0xbd, 0x09, 0xa5, 0x1b, 0x50, 0x5e, 0x72, 0xc2, 0x01,
	0x31, 0xd4, 0xb0, 0xa8, 0x6d, 0x3e, 0x02, 0x8d, 0xab, 0xae, 0x37, 0x3c, 0x6c, 0x0d, 0x13, 0x9a,
	0x37, 0x57, 0x61, 0x6a, 0xc9, 0x0d, 0x6f, 0xda, 0x87, 0x7f, 0x33, 0x0b, 0x95, 0x85, 0x15, 0x6b,
	0x79, 0x59, 0x7c, 0xc5, 0x81, 0xc9, 0x55, 0x9a, 0x17, 0x61, 0x0e, 0x29, 0xf8, 0x07, 0x9e, 0x13,
	0xf4, 0xef, 0x4e, 0x13, 0xd9, 0x24, 0x7b, 0xe8, 0x78, 0x3b, 0xbe, 0x64, 0xaa, 0x90, 0x98, 0xa3,
	0x20, 0x5e, 0x4c, 0x88, 0xef, 0x42, 0xa3, 0xe3, 0x45, 0xfe, 0x5d, 0xd6, 0xb5, 0xdd, 0x51, 0x1f,
	0x6c, 0x27, 0x2b, 0x2d, 0x4d, 0x10, 0x4d, 0xeb, 0x65, 0xe0, 0x0f, 0x1d, 0x61, 0xc1, 0xd4, 0x36,
	0xd7, 0xe0, 0x38, 0x4d, 0x44, 0x5a, 0x79, 0x05, 0x96, 0x30, 0x0b, 0x95, 0x35, 0xe7, 0x69, 0x67,
	0x2c, 0x66, 0xe4, 0x80, 0x79, 0x06, 0xea, 0xcb, 0xb7, 0xdd, 0x48, 0xd2, 0x09, 0xdd, 0xa1, 0xa4,
	0x13, 0xba, 0x43, 0xf3, 0x12, 0xd4, 0xba, 0x6e, 0xb4, 0xe4, 0x1f, 0x78, 0x93, 0x9d, 0x48, 0xd0,
	0xf5, 0x86, 0xce, 0x6d, 0x29, 0x76, 0x02, 0xe8, 0x93, 0xc8, 0xf6, 0x86, 0xdb, 0xfb, 0x47, 0xfe,
	0xe4, 0x41, 0x68, 0x6c, 0x87, 0x4e, 0xa0, 0x64, 0xbd, 0x9d, 0x2c, 0x66, 0xbb, 0xb3, 0x24, 0xbb,
	0x2d, 0xc7, 0x1e, 0xde, 0xc9, 0xe1, 0xf1, 0x8a, 0xf8, 0xba, 0xeb, 0xd8, 0x51, 0xbe, 0x71, 0x74,
	0xd4, 0x94, 0x0d, 0x8b, 0x03, 0xe6, 0x59, 0x80, 0x6e, 0x64, 0x07, 0x51, 0x7f, 0xc5, 0xde, 0x73,
	0x72, 0x88, 0x5e, 0x86, 0x29, 0xcb, 0x09, 0x53, 0x23, 0xba, 0x89, 0x05, 0x74, 0x13, 0x65, 0x95,
	0x12, 0x0b, 0xb8, 0x02, 0xcd, 0x15, 0x27, 0xea, 0xb7, 0xe3, 0x00, 0xf9, 0x99, 0x5c, 0x08, 0x69,
	0xc5, 0xdd, 0x73, 0xe4, 0x5e, 0xc4, 0xb6, 0xf9, 0x10, 0x9c, 0xc0, 0x8f, 0x68, 0x05, 0x6d, 0x3b,
	0x18, 0xf6, 0xdb, 0x7e, 0xec, 0x45, 0x39, 0x52, 0x58, 0x84, 0xfa, 0x56, 0x1c, 0xd1, 0x98, 0x1c,
	0xc1, 0x32, 0x28, 0x0d, 0xdc, 0xa1, 0xdc, 0x36, 0x03, 0x77, 0x88, 0x93, 0x45, 0xae, 0xb7, 0x2b,
	0x27, 0xc3, 0xb6, 0xb9, 0x07, 0xe5, 0xf6, 0xc8, 0x3f, 0xc8, 0xf9, 0x1e, 0x0d, 0xcd, 0x1d, 0x5e,
	0x92, 0x06, 0x83, 0x6d, 0x81, 0xbb, 0x2c, 0x29, 0x60, 0x5b, 0xe0, 0xae, 0x90, 0x8d, 0x72, 0xdc,
	0x15, 0xf4, 0xc0, 0x43, 0x67, 0xa7, 0x3f, 0x10, 0x9e, 0xb6, 0x62, 0x55, 0x87, 0xce, 0x4e, 0xdb,
	0x1d, 0x9a, 0x6d, 0x28, 0x6f, 0x39, 0xde, 0xee, 0x91, 0xd8, 0xd5, 0x88, 0x94, 0x52, 0x44, 0x2e,
	0x42, 0xf9, 0x9a, 0x7f, 0x34, 0x22, 0x38, 0xb6, 0xe7, 0xf2, 0xb1, 0x93, 0xdb, 0xaf, 0x9d, 0xb8,
	0x95, 0x76, 0x67, 0xc9, 0x7c, 0x1d, 0x94, 0xae, 0xbb, 0xde, 0x91, 0xc8, 0xb6, 0xa0, 0xbc, 0x65,
	0x87, 0x61, 0x8e, 0x97, 0x38, 0x03, 0xf5, 0x45, 0xc7, 0x73, 0x76, 0xdc, 0x28, 0xaf, 0xf7, 0x12,
	0x34, 0xdb, 0x23, 0xdb, 0xdb, 0x75, 0xae, 0x48, 0xad, 0x1d, 0xc6, 0x55, 0x49, 0x72, 0xf5, 0x08,
	0xd4, 0xae, 0xba, 0xb7, 0xd7, 0xdd, 0xbc, 0xd9, 0xf2, 0x76, 0xb5, 0xf9, 0x26, 0x54, 0xa9, 0x1d,
	0x19, 0x2d, 0xa8, 0xed, 0xf1, 0xd0, 0x2b, 0xbe, 0x90, 0x20, 0x19, 0x82, 0xf6, 0x15, 0xb6, 0xd1,
	0x54, 0x45, 0xa0, 0x7e, 0x3c, 0xf4, 0xbd, 0xfc, 0xa9, 0x1e, 0xef, 0x6e, 0x6e, 0x48, 0xcf, 0x8d,
	0x6d, 0xf3, 0xd5, 0xd0, 0xbc, 0xe6, 0x0e, 0x6e, 0x59, 0xce, 0x7b, 0x62, 0x27, 0x8c, 0x92, 0xbd,
	0x5c, 0xd0, 0xf7, 0xf2, 0xdb, 0x61, 0x8a, 0x0f, 0x0a, 0xf7, 0x7d, 0x2f, 0x74, 0xf2, 0x47, 0xa1,
	0xb6, 0x63, 0xb4, 0x78, 0x21, 0xe7, 0x86, 0x55, 0x45, 0xb0, 0x33, 0xc4, 0xbd, 0xbe, 0xd0, 0xbe,
	0xd6, 0x57, 0x79, 0x41, 0x66, 0x5b, 0x7e, 0xa0, 0x0c, 0xc7, 0xb0, 0x3f, 0x71, 0x17, 0x06, 0x94,
	0x3d, 0x7b, 0x4f, 0x2e, 0x9a, 0xda, 0xf8, 0x5d, 0xac, 0x28, 0x63, 0x13, 0xe7, 0x0b, 0xd0, 0x9b,
	0x27, 0xd6, 0x85, 0x60, 0x67, 0x88, 0x11, 0xcb, 0xdd, 0x17, 0x1e, 0xb7, 0xe8, 0xee, 0x27, 0xec,
	0x56, 0x74, 0x76, 0x0d, 0x28, 0xbb, 0x03, 0x5f, 0x66, 0x0c, 0xd4, 0xe6, 0xae, 0xd9, 0xf5, 0x5a,
	0x35, 0xb1, 0x13, 0x7c, 0xd7, 0x53, 0xa2, 0xae, 0x27, 0xa2, 0x46, 0xc5, 0x0c, 0x5d, 0x7b, 0xcf,
	0xf7, 0x86, 0xad, 0x06, 0xa1, 0x25, 0x88, 0x73, 0x8d, 0xc9, 0x21, 0x03, 0x9f, 0x8b, 0x00, 0xc4,
	0x3a, 0x7b, 0xb6, 0x3b, 0x6e, 0x35, 0xb9, 0xbf, 0x22, 0x40, 0x4f, 0x7f, 0xa6, 0x0e, 0x4b, 0x7f,
	0x8e, 0xa5, 0xd2, 0x9f, 0x59, 0xa8, 0x04, 0xfe, 0x4d, 0x3f, 0x6a, 0x1d, 0xe7, 0xd4, 0x09, 0x40,
	0x6e, 0x0e, 0x5c, 0xef, 0xc0, 0x71, 0x6e, 0xb5, 0xa6, 0x39, 0x37, 0x02, 0xa4, 0xf1, 0xe8, 0x61,
	0x5b, 0x6c, 0xbe, 0x70, 0xa1, 0x6e, 0x71, 0x00, 0xb1, 0x61, 0x64, 0x47, 0x4e, 0x6b, 0x86, 0x53,
	0x21, 0x80, 0x14, 0xe3, 0xdc, 0x6e, 0x19, 0x7c, 0x8b, 0x84, 0xce, 0x6d, 0x1a, 0x37, 0xf0, 0x03,
	0xa7, 0x75, 0x42, 0x8c, 0x43, 0xc0, 0xb8, 0x1f, 0xea, 0x03, 0xdb, 0xeb, 0xdf, 0x72, 0x07, 0xb7,
	0x5a, 0xb3, 0x44, 0xb6, 0x36, 0xb0, 0x3d, 0xb4, 0x0f, 0xe3, 0x55, 0x30, 0xe5, 0xef, 0xec, 0x8c,
	0x5d, 0xcf, 0xe9, 0x47, 0xe8, 0x13, 0x4f, 0xd2, 0x77, 0x4d, 0x81, 0x43, 0xd7, 0x68, 0x9c, 0x81,
	0xc6, 0x96, 0x1d, 0x38, 0x5e, 0xb4, 0xed, 0x0e, 0x5b, 0x73, 0x24, 0x8d, 0x04, 0x61, 0x7e, 0x5f,
	0x98, 0x42, 0x12, 0xa5, 0x35, 0x25, 0x17, 0x52, 0x4a, 0xce, 0xd9, 0x01, 0xdc, 0x91, 0x25, 0x79,
	0x11, 0xb6, 0x13, 0x85, 0x94, 0x33, 0x0a, 0x09, 0xe2, 0xb1, 0x13, 0x8a, 0xe4, 0x88, 0x03, 0xc6,
	0x39, 0x68, 0x06, 0x7e, 0xec, 0x0d, 0xfb, 0x03, 0xf4, 0xd7, 0x64, 0x19, 0x15, 0x0b, 0x08, 0xc5,
	0x3d, 0xf8, 0x79, 0x98, 0xbe, 0xe9, 0xee, 0xf6, 0xf5, 0x41, 0xdc, 0x54, 0x8e, 0xdd, 0x74, 0x77,
	0xad, 0x64, 0xdc, 0x83, 0x00, 0x3c, 0xce, 0x90, 0x18, 0xd0, 0x72, 0x4a, 0x56, 0x83, 0x30, 0x24,
	0x84, 0x07, 0x81, 0x13, 0xe5, 0xdd, 0x0d, 0xde, 0x4d, 0x18, 0xd9, 0x1d, 0x3a, 0x76, 0x24, 0x26,
	0xe0, 0x86, 0xd4, 0x40, 0x8c, 0x22, 0x4e, 0xfb, 0x8c, 0x77, 0x37, 0x79, 0x37, 0x62, 0x78, 0xf7,
	0x03, 0xd0, 0x18, 0xc4, 0x41, 0x9f, 0x5b, 0xfc, 0x14, 0xf5, 0xd6, 0x07, 0x71, 0x40, 0x21, 0xd2,
	0x78, 0x0d, 0x1c, 0xc7, 0xce, 0xc8, 0xf7, 0xc7, 0x62, 0xc4, 0x31, 0x1a, 0x31, 0x35, 0x88, 0x83,
	0x9e, 0xef, 0x8f, 0xf9, 0xa8, 0xd3, 0x50, 0x27, 0x66, 0x31, 0xd4, 0x1c, 0x27, 0x15, 0x2b, 0x18,
	0xc9, 0x8f, 0x9d, 0x1d, 0xb1, 0xb2, 0x69, 0x62, 0xbd, 0x8e, 0x08, 0xa9, 0xdd, 0xa1, 0x1b, 0x38,
	0x83, 0xc8, 0xf5, 0x3d, 0xb2, 0xb9, 0x8a, 0x95, 0x20, 0x8c, 0x8b, 0x30, 0x33, 0x14, 0x09, 0x5a,
	0x42, 0x62, 0x86, 0x48, 0x4c, 0x8b, 0x8e, 0x35, 0x49, 0xe9, 0x01, 0x68, 0x78, 0xee, 0xe0, 0x56,
	0x9f, 0xfc, 0x80, 0x41, 0x76, 0x52, 0x47, 0xc4, 0x06, 0xfa, 0x82, 0x73, 0xd0, 0x8c, 0x3d, 0xf7,
	0x3d, 0xb1, 0xd3, 0xa7, 0x44, 0xea, 0x04, 0x75, 0x03, 0x47, 0xb5, 0xfd, 0x21, 0xf1, 0x81, 0x26,
	0xb4, 0x89, 0x49, 0x21, 0x19, 0x69, 0xc3, 0x4a, 0x10, 0xe6, 0x86, 0x66, 0x64, 0x32, 0xaa, 0x67,
	0x52, 0xc1, 0xd7, 0x43, 0x05, 0x7b, 0x42, 0x72, 0xe3, 0xcd, 0xcb, 0x27, 0x1f, 0x16, 0xa5, 0x51,
	0xca, 0x4f, 0x59, 0x7c, 0x8c, 0x79, 0x53, 0xa3, 0xf7, 0x4a, 0x4a, 0x0d, 0xe3, 0x75, 0x50, 0xc6,
	0xf1, 0xad, 0xd2, 0xe4, 0x24, 0x6a, 0x07, 0x58, 0x34, 0xc4, 0x7c, 0x07, 0x9f, 0x23, 0x95, 0x65,
	0x67, 0x78, 0x3e, 0xc3, 0x73, 0x26, 0xb2, 0x02, 0x31, 0x4d, 0x82, 0x30, 0x17, 0xa0, 0x86, 0x04,
	0xd6, 0xbb, 0x2b, 0x87, 0x24, 0x31, 0xd9, 0xd4, 0x52, 0x14, 0x77, 0x22, 0x17, 0xc2, 0xe2, 0xee,
	0x85, 0x22, 0x4c, 0x2f, 0xb4, 0xaf, 0x2d, 0xb6, 0xfb, 0x49, 0x52, 0xfc, 0x7f, 0xd1, 0x55, 0x73,
	0x17, 0xdb, 0xd4, 0x5d, 0xec, 0x2b, 0x77, 0xd5, 0x19, 0x1b, 0xe5, 0x0e, 0x5b, 0xb7, 0x51, 0x59,
	0x9e, 0x4d, 0x6b, 0xe5, 0xd9, 0x53, 0x60, 0xa0, 0x92, 0xee, 0x59, 0x0a, 0x5c, 0x82, 0x3a, 0xf6,
	0xa0, 0x7d, 0x90, 0x98, 0x0f, 0x35, 0x1e, 0x35, 0xcc, 0x7c, 0xb5, 0xd4, 0x1d, 0x56, 0x06, 0xca,
	0x84, 0xe2, 0x24, 0x14, 0xc7, 0xee, 0xd0, 0xfc, 0xb9, 0x02, 0x8d, 0xea, 0x67, 0x0a, 0xe0, 0x7b,
	0xd5, 0x49, 0x6a, 0x2d, 0xa5, 0x64, 0x2d, 0xca, 0xa6, 0xca, 0x69, 0x9b, 0x5a, 0x0e, 0x02, 0xa1,
	0x5c, 0x6c, 0x4a, 0x2b, 0xab, 0x26, 0x56, 0xf6, 0x3a, 0x38, 0x49, 0x2c, 0xe4, 0x95, 0xa9, 0x99,
	0xf4, 0x79, 0x1f, 0x8e, 0x93, 0x4d, 0xdf, 0x65, 0xcc, 0x4f, 0xb8, 0x7e, 0xfe, 0x69, 0x68, 0x72,
	0x29, 0xf2, 0xc2, 0xe5, 0x2c, 0x00, 0x35, 0xf8, 0x9e, 0xe3, 0x22, 0xd2, 0x30, 0xf9, 0x05, 0x62,
	0x66, 0x57, 0xad, 0x01, 0x90, 0xbe, 0xba, 0x14, 0x85, 0xf3, 0x5c, 0x47, 0x0b, 0x6a, 0xe8, 0x13,
	0x37, 0x63, 0xb9, 0xad, 0x25, 0x88, 0xd4, 0x9e, 0xb0, 0xc7, 0x42, 0xec, 0xd8, 0x34, 0xdf, 0x4d,
	0x7e, 0x62, 0xb1, 0xdd, 0xef, 0xba, 0xd1, 0x50, 0x94, 0x78, 0xb1, 0x0a, 0x9e, 0xb4, 0x19, 0x73,
	0xeb, 0xb5, 0xb4, 0xc3, 0x2d, 0x65, 0x1c, 0xae, 0xca, 0x04, 0xca, 0x5a, 0x26, 0x60, 0xf6, 0xd4,
	0x5c, 0x58, 0x1b, 0xc6, 0xfb, 0x3f, 0x91, 0xb9, 0xcc, 0xdf, 0x2f, 0x49, 0x4b, 0xa5, 0xd2, 0xa9,
	0xe3, 0xb9, 0xe4, 0x50, 0x97, 0xdc, 0x81, 0x94, 0x30, 0xb5, 0xd1, 0xdd, 0xe1, 0x80, 0x94, 0xbb,
	0x53, 0x08, 0xd9, 0x7b, 0xd5, 0x0d, 0xc8, 0xbf, 0xaa, 0x5e, 0x42, 0x60, 0x80, 0x5b, 0xf6, 0x86,
	0x8b, 0x63, 0xdb, 0xbb, 0x25, 0x96, 0xa4, 0x60, 0xec, 0xc3, 0x81, 0x18, 0x89, 0x84, 0xa1, 0x2a,
	0x98, 0xa8, 0xc6, 0x01, 0x82, 0x9d, 0xa1, 0x48, 0x0f, 0x12, 0x04, 0x7d, 0x29, 0x02, 0xad, 0x70,
	0x4b, 0x0a, 0x46, 0x1d, 0xb6, 0xe3, 0xa0, 0x27, 0xd3, 0x81, 0x8a, 0x25, 0x41, 0x63, 0x1e, 0x9a,
	0x37, 0x46, 0xb1, 0xed, 0xed, 0xf2, 0x0f, 0xb9, 0x93, 0xd2, 0x51, 0x38, 0x2b, 0xd5, 0xb5, 0x58,
	0xb4, 0xca, 0x74, 0x40, 0x21, 0x8c, 0x39, 0xa8, 0x2e, 0x39, 0x3b, 0x8e, 0x8d, 0x1e, 0x0b, 0xcd,
	0x40, 0x40, 0xc6, 0x45, 0xa8, 0x92, 0x49, 0x85, 0xad, 0x29, 0x0a, 0x2f, 0x86, 0xf4, 0x10, 0x89,
	0xb5, 0x59, 0x62, 0x04, 0xa6, 0x05, 0x63, 0x3b, 0x8c, 0xfa, 0xfb, 0x71, 0x94, 0x4e, 0x0b, 0x10,
	0xbb, 0x15, 0x47, 0x1d, 0xe9, 0x86, 0xc3, 0x91, 0x7f, 0x20, 0x52, 0x02, 0x6a, 0x9b, 0xff, 0x1f,
	0x66, 0x54, 0x4c, 0xc4, 0x62, 0x9d, 0x8a, 0xa2, 0xf3, 0x50, 0xc1, 0xff, 0xc3, 0x56, 0x81, 0x66,
	0x66, 0x72, 0x66, 0x39, 0xc0, 0xe2, 0xdd, 0xe6, 0xef, 0x95, 0xe4, 0x76, 0xa2, 0xe5, 0x1c, 0x9e,
	0xec, 0xcd, 0x41, 0x75, 0xdf, 0x77, 0xbd, 0x28, 0x14, 0x8a, 0x16, 0x50, 0x92, 0xc9, 0x96, 0xf4,
	0x4c, 0x96, 0xd2, 0xab, 0xb1, 0x4c, 0x70, 0xb8, 0x7e, 0x1b, 0x88, 0xe1, 0xcb, 0x78, 0x15, 0x4c,
	0x3d, 0x43, 0xd2, 0xed, 0xeb, 0xa1, 0xa6, 0xf9, 0x8c, 0x26, 0x71, 0x15, 0xfe, 0xab, 0xf7, 0x0e,
	0xff, 0xe9, 0xa4, 0xa7, 0x96, 0x4d, 0x7a, 0x32, 0x39, 0x65, 0x7d, 0x22, 0xa7, 0xbc, 0x08, 0x33,
	0x91, 0x1f, 0xd9, 0xe3, 0x54, 0x56, 0xc9, 0xad, 0x60, 0x9a, 0x3a, 0xb4, 0xbc, 0x32, 0x95, 0x7c,
	0x41, 0x26, 0xf9, 0x92, 0xd1, 0xaf, 0xa9, 0x45, 0xbf, 0x39, 0xa8, 0x6e, 0xa1, 0xa8, 0x2e, 0x89,
	0x4c, 0x50, 0x40, 0x0a, 0x7f, 0x59, 0x28, 0x5a, 0x40, 0x68, 0xa6, 0x57, 0x6d, 0x0f, 0xb5, 0x23,
	0x22, 0x96, 0x04, 0xcd, 0xab, 0x30, 0x25, 0x57, 0x4f, 0x3a, 0x36, 0xa0, 0x8c, 0xea, 0x94, 0x5b,
	0x92, 0x0e, 0x6a, 0x4c, 0xa9, 0x77, 0x9e, 0x35, 0x4d, 0x49, 0xb1, 0xe9, 0x3a, 0xbf, 0x01, 0xb3,
	0x48, 0x87, 0x14, 0xae, 0x17, 0xd2, 0x79, 0xf4, 0x66, 0x75, 0x7a, 0x15, 0x41, 0x41, 0x77, 0x87,
	0xa5, 0x94, 0x3b, 0x34, 0x7b, 0xc0, 0x14, 0x6d, 0x59, 0x71, 0xe7, 0xd1, 0xcd, 0x8b, 0x09, 0x87,
	0x53, 0xfd, 0x29, 0x1e, 0x94, 0x35, 0x66, 0xfb, 0x9b, 0xd7, 0x8e, 0xce, 0xaf, 0xf9, 0x30, 0x71,
	0xb5, 0xd8, 0xee, 0x0b, 0x96, 0xf0, 0xeb, 0xd3, 0x50, 0xc7, 0xa6, 0x70, 0xf5, 0x38, 0x58, 0xc1,
	0xe6, 0x2f, 0x14, 0x94, 0x03, 0x8c, 0x83, 0xad, 0xb1, 0x7d, 0xc7, 0x09, 0x8e, 0xbc, 0x0a, 0xc4,
	0xf9, 0xbe, 0x8c, 0x08, 0xd4, 0xe6, 0xc9, 0xb0, 0xa8, 0x2d, 0xe4, 0x6e, 0x50, 0x08, 0xe4, 0x44,
	0x26, 0xdd, 0xd2, 0xdd, 0x49, 0xd8, 0x1c, 0x49, 0x07, 0xbf, 0xe2, 0xf0, 0x8d, 0x9d, 0x5f, 0xf8,
	0x4f, 0x1e, 0xfc, 0x3c, 0x00, 0x8d, 0x9d, 0xc0, 0xdf, 0xeb, 0xa3, 0xfb, 0x20, 0x71, 0xd6, 0xad,
	0x3a, 0x22, 0xd6, 0x6c, 0x91, 0x1d, 0x23, 0x8f, 0xe5, 0x84, 0x47, 0xf3, 0x9a, 0x9c, 0x69, 0x2b,
	0x7e, 0x65, 0x33, 0xe5, 0x9d, 0x88, 0x6d, 0x71, 0x53, 0xbd, 0x6e, 0xbb, 0x11, 0x09, 0xe0, 0xee,
	0xc2, 0x2b, 0x1d, 0xc1, 0x04, 0x02, 0x00, 0xa1, 0x91, 0x91, 0x7f, 0x70, 0x98, 0xea, 0x7b, 0x84,
	0x14, 0x81, 0xae, 0x27, 0x67, 0x69, 0x77, 0x96, 0x2e, 0xa9, 0x44, 0xa3, 0xb3, 0x74, 0x49, 0xe0,
	0x2e, 0xcb, 0xbc, 0x08, 0xdb, 0x02, 0x77, 0x45, 0x28, 0x80, 0xda, 0xe6, 0xaa, 0x9c, 0x93, 0x8e,
	0xdb, 0x8e, 0x3e, 0xa7, 0x38, 0x7f, 0x2a, 0x25, 0xa7, 0x62, 0x43, 0x49, 0x89, 0xce, 0xdc, 0x8e,
	0x4e, 0xe9, 0x34, 0xd4, 0xf1, 0x0b, 0x92, 0x13, 0x27, 0xa7, 0x60, 0x39, 0x4b, 0x39, 0x99, 0xc5,
	0xa7, 0x53, 0x9e, 0xc5, 0x76, 0xff, 0x3a, 0xcf, 0xc4, 0xc5, 0x24, 0xa5, 0x57, 0xca, 0x6e, 0x12,
	0x3d, 0xca, 0x77, 0x8f, 0x1e, 0xeb, 0x72, 0x59, 0x4b, 0x81, 0x7d, 0x70, 0x78, 0xec, 0x38, 0x9f,
	0x76, 0x4a, 0x87, 0x92, 0x7b, 0x07, 0x54, 0x2d, 0xe7, 0x40, 0xd8, 0x1e, 0xcf, 0x76, 0x0a, 0xfa,
	0xb9, 0xc7, 0x39, 0x68, 0x72, 0x3f, 0xcd, 0xfb, 0xf8, 0x22, 0x80, 0x50, 0x5d, 0x4a, 0x87, 0x9e,
	0x2d, 0xca, 0x68, 0xd6, 0x43, 0x24, 0x9a, 0xd3, 0x75, 0xd7, 0xd3, 0x64, 0x2d, 0x41, 0xd1, 0x43,
	0x5e, 0xb6, 0xa8, 0x7a, 0xd2, 0x91, 0xb3, 0x74, 0x57, 0x66, 0x51, 0x6a, 0x3d, 0xdb, 0x15, 0x5b,
	0x08, 0x9b, 0x94, 0x58, 0x86, 0xbb, 0x94, 0xac, 0x62, 0x62, 0x19, 0xee, 0x1a, 0xe7, 0xe5, 0x82,
	0x44, 0x14, 0x3b, 0xae, 0x12, 0x00, 0xc2, 0x5a, 0x72, 0xb9, 0xa7, 0xa1, 0xbe, 0xe3, 0x7a, 0x6e,
	0x38, 0x72, 0x86, 0x14, 0xbe, 0x70, 0xaf, 0x0a, 0x38, 0x2f, 0x7a, 0x95, 0x52, 0xd1, 0xeb, 0x34,
	0xd4, 0xed, 0x28, 0xb2, 0x07, 0xf8, 0x71, 0x83, 0x67, 0x72, 0x12, 0x36, 0xdf, 0x26, 0x1d, 0x1f,
	0x79, 0x1b, 0x12, 0x12, 0x06, 0x1e, 0x6a, 0x84, 0xc2, 0x34, 0x04, 0x94, 0x5c, 0x25, 0x96, 0x64,
	0x5e, 0xfc, 0x10, 0x65, 0x16, 0x58, 0xb0, 0xec, 0xec, 0x38, 0x83, 0x68, 0xf9, 0x69, 0xc7, 0xd3,
	0x2b, 0x6b, 0xb5, 0x6d, 0xcd, 0x35, 0xbe, 0xdd, 0xf5, 0x33, 0xdb, 0x4c, 0x0d, 0x30, 0xa7, 0x24,
	0x21, 0xd2, 0x07, 0xb1, 0x72, 0xdc, 0x76, 0x58, 0x43, 0xca, 0xed, 0xe9, 0xbb, 0x9e, 0xf9, 0x18,
	0x8f, 0x21, 0x1b, 0x8e, 0x33, 0xbc, 0x0b, 0x45, 0xf9, 0x65, 0x51, 0xfb, 0xf2, 0x8a, 0xf4, 0x61,
	0xe2, 0x92, 0x21, 0xbf, 0x72, 0x92, 0x17, 0xa6, 0x62, 0x95, 0x9b, 0x50, 0x96, 0xe7, 0xc8, 0x83,
	0x24, 0x75, 0x46, 0xcf, 0xf6, 0x2a, 0x98, 0x8a, 0xec, 0x60, 0xd7, 0x91, 0x19, 0x19, 0x9f, 0xaa,
	0xc9, 0x71, 0x2a, 0x21, 0x8b, 0x92, 0xcd, 0xc9, 0x4f, 0x81, 0xbf, 0x55, 0x84, 0xba, 0x4a, 0xc4,
	0xf2, 0xf6, 0x7a, 0x0b, 0x6a, 0x6b, 0x6e, 0x18, 0xad, 0x39, 0x92, 0x7b, 0x09, 0x1a, 0xf3, 0xa9,
	0xe3, 0x88, 0x74, 0xf4, 0xa6, 0x1e, 0x1c, 0x81, 0x1e, 0x40, 0xec, 0xcc, 0xcc, 0x08, 0xf2, 0x2e,
	0xf3, 0xfc, 0x7a, 0x80, 0xec, 0x70, 0x62, 0x04, 0x79, 0xb2, 0x79, 0x7e, 0x5f, 0x21, 0x8c, 0x32,
	0x33, 0x82, 0xfc, 0xeb, 0x59, 0x28, 0xa1, 0x0f, 0xae, 0xe5, 0x0c, 0xc0, 0x0e, 0xec, 0x5f, 0x8d,
	0xed, 0x56, 0x3d, 0xaf, 0x7f, 0x35, 0xb6, 0x8d, 0x33, 0x50, 0x5c, 0x8d, 0x5b, 0x8d, 0x9c, 0xee,
	0xe2, 0x6a, 0x6c, 0xcc, 0x03, 0x65, 0xb5, 0xfd, 0x01, 0x06, 0x72, 0x77, 0x28, 0x12, 0x6a, 0x40,
	0x9c, 0xc8, 0xe3, 0x73, 0x12, 0x29, 0xf3, 0xad, 0xd0, 0x58, 0x0e, 0x02, 0x3f, 0xa0, 0x2b, 0x51,
	0x79, 0x83, 0x57, 0x90, 0x67, 0x0f, 0x43, 0x47, 0x3f, 0xab, 0x2f, 0xa6, 0xce, 0xea, 0xcd, 0x15,
	0x55, 0x26, 0x39, 0xde, 0x10, 0x37, 0xe6, 0xd1, 0xcf, 0x5f, 0x42, 0x19, 0xd8, 0xb0, 0x69, 0xbe,
	0x96, 0x17, 0xe7, 0xfa, 0x21, 0xbf, 0x3c, 0xd2, 0x2f, 0xa4, 0x8e, 0xf4, 0xa7, 0x37, 0xfc, 0xc8,
	0xdd, 0xb9, 0x93, 0xd4, 0x08, 0x93, 0x95, 0x7e, 0x0b, 0xaa, 0x38, 0x68, 0x40, 0x97, 0xfa, 0xca,
	0xf0, 0x8a, 0xee, 0xd0, 0x7c, 0x1c, 0x80, 0xf7, 0xd0, 0xf9, 0x6b, 0xa6, 0x17, 0x97, 0x39, 0xf0,
	0xbd, 0xc8, 0x11, 0x35, 0x57, 0xc3, 0x92, 0x60, 0xae, 0x31, 0xbe, 0x15, 0x1a, 0x0b, 0x83, 0x5b,
	0x62, 0xa2, 0x37, 0x40, 0xcd, 0xa3, 0x96, 0xac, 0x0b, 0x54, 0x45, 0x92, 0xcc, 0x67, 0xc9, 0x21,
	0xe6, 0xcf, 0x17, 0xa1, 0xd6, 0x8d, 0xf7, 0xf6, 0xec, 0xe0, 0x8e, 0xc6, 0x44, 0x83, 0x98, 0x90,
	0x87, 0x4e, 0x45, 0xed, 0xd0, 0x49, 0x9e, 0x11, 0x95, 0xb4, 0x33, 0xa2, 0x8c, 0xf7, 0x2a, 0x4f,
	0xe4, 0xde, 0x0f, 0x40, 0xe3, 0xc0, 0xf5, 0x44, 0xb7, 0xc8, 0x7e, 0x0e, 0x5c, 0x4f, 0x75, 0xee,
	0xdb, 0x77, 0x52, 0x67, 0xc1, 0xf5, 0x7d, 0xfb, 0x8e, 0x3a, 0x84, 0xdd, 0x71, 0x03, 0x27, 0x75,
	0x08, 0xdc, 0x40, 0x0c, 0xef, 0x56, 0x21, 0xa4, 0xae, 0x87, 0x90, 0xb3, 0x00, 0x23, 0x3f, 0x0e,
	0x1d, 0xba, 0xac, 0x26, 0x77, 0x59, 0xb7, 0x34, 0x0c, 0xae, 0x21, 0xc0, 0x92, 0x94, 0x9b, 0x24,
	0xb5, 0xcd, 0x2b, 0x30, 0x45, 0xe1, 0x44, 0xca, 0xe2, 0xd5, 0x50, 0x1e, 0xe3, 0x26, 0xe5, 0x22,
	0x9c, 0x56, 0x01, 0x82, 0x77, 0x5b, 0xd4, 0x69, 0x9a, 0x50, 0x13, 0x57, 0xe1, 0x87, 0xc6, 0x45,
	0xf3, 0xd9, 0x02, 0x34, 0xc5, 0x20, 0x32, 0x6a, 0xed, 0xfa, 0xa6, 0xa0, 0x5f, 0xdf, 0xa4, 0xab,
	0xf5, 0x62, 0xe6, 0x64, 0x20, 0x4f, 0xec, 0x73, 0x50, 0x0d, 0x9c, 0x30, 0x1e, 0x73, 0x89, 0x97,
	0x2c, 0x01, 0xa1, 0xcc, 0xdc, 0xb0, 0x4f, 0xbe, 0xd1, 0xe1, 0x87, 0x40, 0x75, 0xab, 0xe1, 0x86,
	0x5d, 0x8e, 0x30, 0x2d, 0x80, 0x85, 0xc1, 0x2d, 0xc9, 0xf7, 0x43, 0xa9, 0x75, 0x9e, 0x90, 0xeb,
	0xd4, 0x38, 0xe6, 0x6b, 0x4d, 0xd7, 0x44, 0x7c, 0x03, 0xa9, 0x9a, 0xc8, 0x7c, 0x0b, 0x94, 0x9f,
	0xf0, 0x23, 0xe7, 0xae, 0x95, 0xa5, 0xe0, 0x55, 0x84, 0x06, 0x0e, 0x99, 0xef, 0x84, 0x63, 0x7c,
	0x13, 0xdd, 0x4b, 0x8e, 0x87, 0x52, 0x18, 0xc2, 0xd4, 0xa2, 0x1d, 0x45, 0x63, 0xc7, 0x72, 0x06,
	0x7e, 0x90, 0x78, 0x95, 0x82, 0x56, 0x9e, 0xe5, 0xd6, 0x7e, 0xc5, 0xfc, 0xda, 0x6f, 0x16, 0x2a,
	0x81, 0x1d, 0xb9, 0xbe, 0xac, 0x75, 0x09, 0x30, 0x4f, 0xc2, 0x09, 0x7d, 0x16, 0x71, 0x8f, 0x67,
	0xbe, 0x13, 0x66, 0xd3, 0x68, 0x71, 0x73, 0x77, 0x21, 0x25, 0xd5, 0x59, 0x29, 0xd5, 0xd4, 0x58,
	0x6e, 0x42, 0xef, 0x2f, 0x42, 0x63, 0xd5, 0xdf, 0x73, 0xe8, 0xc8, 0x7c, 0x62, 0x07, 0xbe, 0x62,
	0x9b, 0x40, 0xd3, 0x8e, 0xc7, 0x8e, 0x38, 0x5f, 0xa3, 0x36, 0x16, 0x26, 0xa8, 0xb4, 0x30, 0xb2,
	0xf7, 0xf6, 0xc9, 0x1c, 0x4a, 0x56, 0x82, 0xd0, 0x05, 0x5e, 0x15, 0x66, 0xc4, 0x05, 0x9e, 0x39,
	0x59, 0xad, 0x4d, 0x9c, 0xfe, 0x33, 0x28, 0x05, 0xee, 0x50, 0x6c, 0x3d, 0x6c, 0xe2, 0xc6, 0x0b,
	0x9d, 0xf1, 0x0e, 0x5f, 0xa0, 0x28, 0xae, 0x35, 0x0c, 0x66, 0x31, 0x48, 0x9c, 0xf4, 0xc3, 0x37,
	0x9f, 0x82, 0xcd, 0xf3, 0xc0, 0x94, 0x1c, 0xe4, 0x35, 0x69, 0x8e, 0x2e, 0xcd, 0xff, 0x07, 0x33,
	0xda, 0x38, 0x21, 0xef, 0xd7, 0xa6, 0xe4, 0x3d, 0x23, 0xe5, 0x9d, 0x0c, 0xe4, 0xc2, 0x7e, 0x14,
	0x0c, 0xcb, 0xf7, 0xf7, 0xe4, 0x26, 0x16, 0xb3, 0x64, 0x16, 0x5a, 0xc8, 0x2e, 0xd4, 0xfc, 0x44,
	0x01, 0x4e, 0xa4, 0xbe, 0x13, 0xb3, 0x1e, 0xc5, 0x47, 0xe8, 0xf2, 0x2d, 0xa6, 0x0c, 0x5a, 0x08,
	0x43, 0x4f, 0xfb, 0x25, 0x6c, 0xbc, 0x11, 0x3d, 0xd8, 0x9e, 0xd3, 0xe7, 0x1e, 0xac, 0x4c, 0x47,
	0xcf, 0x39, 0xab, 0x6a, 0x8c, 0x64, 0xd3, 0x7c, 0xae, 0xc0, 0x13, 0x2a, 0x6e, 0x62, 0x4b, 0x4e,
	0x64, 0xbb, 0x63, 0xda, 0x33, 0x34, 0x19, 0x2d, 0x2a, 0x51, 0xed, 0x59, 0xd0, 0x96, 0x27, 0xec,
	0x4a, 0xd7, 0xec, 0xdd, 0x58, 0x13, 0x5a, 0x2f, 0xa7, 0xb4, 0x9e, 0xf8, 0x7a, 0xe1, 0xde, 0x75,
	0xef, 0xff, 0xb0, 0x10, 0x13, 0xcf, 0x44, 0x4e, 0xcb, 0x65, 0xf0, 0x92, 0x5b, 0xe7, 0x57, 0x68,
	0xe9, 0x67, 0xc1, 0x98, 0xec, 0x43, 0x9e, 0xf6, 0xc7, 0xf6, 0x9d, 0x45, 0x7b, 0x70, 0x4b, 0xa8,
	0x48, 0xc1, 0xc4, 0x81, 0xf3, 0xb4, 0xeb, 0x1c, 0xe8, 0xeb, 0x49, 0x30, 0xc6, 0x1b, 0x04, 0x07,
	0x3c, 0xe3, 0x6a, 0xe5, 0x71, 0xc0, 0xef, 0x80, 0x68, 0xfe, 0x7d, 0x60, 0xd9, 0x1e, 0x94, 0x24,
	0x77, 0xd3, 0x19, 0xa7, 0x7d, 0x1a, 0xd4, 0x7e, 0x3c, 0xd2, 0xfe, 0xcc, 0x3f, 0xe1, 0x7d, 0x97,
	0x4c, 0x25, 0xb6, 0x43, 0x27, 0xe0, 0x07, 0xd4, 0x59, 0x4f, 0x30, 0x07, 0xd5, 0x30, 0xb2, 0xa3,
	0x58, 0x1d, 0xcd, 0x71, 0x68, 0xe2, 0x2e, 0xb8, 0x34, 0x71, 0x17, 0x6c, 0x9e, 0x82, 0x52, 0xcf,
	0xa5, 0x53, 0xe3, 0xc8, 0xdd, 0x97, 0xc9, 0x49, 0xe4, 0xee, 0x9b, 0xaf, 0xe1, 0x29, 0xc8, 0xce,
	0x1d, 0xba, 0x55, 0x9e, 0x83, 0x2a, 0x65, 0xc0, 0xaa, 0x64, 0xe0, 0x90, 0xd9, 0x83, 0x19, 0xe1,
	0xa2, 0x9d, 0x30, 0xf2, 0x83, 0x3b, 0x74, 0x01, 0x70, 0x97, 0x32, 0xf0, 0x78, 0x27, 0x24, 0x93,
	0x14, 0x1e, 0x9d, 0xf8, 0xad, 0x5b, 0x19, 0xac, 0x39, 0x0f, 0xc7, 0x39, 0x55, 0xcb, 0x19, 0x8c,
	0x30, 0xd7, 0x9e, 0x48, 0x90, 0x16, 0x61, 0x2e, 0x3d, 0x42, 0xed, 0xbb, 0x9c, 0x64, 0x49, 0xde,
	0x3d, 0x15, 0x53, 0x77, 0x4f, 0xe6, 0x2c, 0x18, 0xbd, 0xc0, 0xf6, 0xc2, 0x1d, 0x27, 0x58, 0x8d,
	0x6d, 0xe9, 0xb5, 0x6d, 0x38, 0x91, 0xc2, 0xde, 0xf5, 0xb9, 0xc5, 0xfd, 0x50, 0x1f, 0xc5, 0x76,
	0x9f, 0xec, 0x87, 0x9f, 0x62, 0xd4, 0x46, 0xb1, 0x4d, 0x69, 0x3a, 0x5d, 0xd1, 0x53, 0x76, 0x1b,
	0x8a, 0x93, 0xa0, 0xda, 0x80, 0x52, 0xdb, 0xd0, 0xbc, 0x08, 0xe5, 0x15, 0x77, 0x27, 0x9a, 0x60,
	0x15, 0x3d, 0xda, 0xb6, 0xba, 0xb4, 0xa3, 0xb6, 0x79, 0x5e, 0x46, 0xb0, 0xdc, 0x5d, 0x9b, 0x64,
	0x12, 0x37, 0xa0, 0x8e, 0x3b, 0x3c, 0x97, 0xee, 0xa1, 0x22, 0x90, 0x39, 0x69, 0x29, 0xb9, 0x25,
	0x94, 0x3c, 0x94, 0x35, 0x1e, 0xde, 0x0c, 0x80, 0x19, 0x6c, 0x7e, 0xae, 0x7a, 0x78, 0x36, 0x6a,
	0x5e, 0x86, 0xa9, 0xee, 0x70, 0xf8, 0x4c, 0xff, 0x71, 0xd7, 0xf6, 0x77, 0x1c, 0xfe, 0x1a, 0x26,
	0xc9, 0x80, 0xbb, 0xfc, 0x49, 0xd0, 0x55, 0x55, 0x03, 0x61, 0xd3, 0x9c, 0x17, 0xdf, 0xac, 0xbb,
	0xde, 0xee, 0x3e, 0x2f, 0xa9, 0xd3, 0xdf, 0x98, 0x6f, 0x81, 0xa6, 0xa4, 0x7a, 0xd3, 0xc9, 0x19,
	0x80, 0x22, 0xe2, 0x7d, 0xc2, 0xba, 0x04, 0x64, 0x76, 0xc4, 0x87, 0xed, 0x51, 0x9c, 0x4b, 0xf9,
	0xb0, 0xc7, 0x7d, 0xc9, 0x61, 0x80, 0x3a, 0x4e, 0x7c, 0x10, 0x1a, 0x44, 0x4a, 0xbd, 0x5e, 0x4a,
	0xb3, 0xd8, 0x83, 0xa9, 0x6e, 0x80, 0xfd, 0x8b, 0xb6, 0x3f, 0xb4, 0xfd, 0x9c, 0xa9, 0xce, 0x40,
	0x83, 0xf7, 0x6d, 0xc4, 0x7b, 0xf2, 0xe2, 0x44, 0x21, 0x0e, 0x99, 0x74, 0x19, 0xa6, 0x39, 0xd5,
	0x6e, 0x14, 0xb8, 0x83, 0x48, 0x3c, 0xb2, 0xca, 0x10, 0x9e, 0x87, 0x66, 0x27, 0x54, 0x03, 0x84,
	0x04, 0x74, 0x94, 0xf9, 0x08, 0x34, 0x36, 0xbc, 0xfe, 0x93, 0xae, 0xfd, 0xcc, 0x28, 0x3e, 0x92,
	0x4a, 0x1e, 0xa3, 0xb3, 0x57, 0xac, 0x9d, 0x32, 0xca, 0xdc, 0x4e, 0x8a, 0xe5, 0xed, 0xdc, 0x2f,
	0x3f, 0x56, 0x90, 0xa7, 0x0f, 0xf4, 0xe9, 0x92, 0x2b, 0xa6, 0xbc, 0xd7, 0x87, 0x68, 0x53, 0xc2,
	0x00, 0xc4, 0xc9, 0xa5, 0x04, 0x35, 0xe5, 0x96, 0x75, 0xe5, 0xa2, 0xc8, 0x96, 0x5c, 0x1c, 0x2f,
	0x1e, 0x93, 0x10, 0x90, 0x3a, 0x58, 0xad, 0x66, 0x0e, 0x56, 0xd5, 0x65, 0x6c, 0x4a, 0x93, 0x69,
	0xd6, 0xcc, 0x9f, 0xa1, 0xdb, 0x4d, 0x39, 0x68, 0x99, 0x6f, 0x99, 0x0c, 0xfb, 0x47, 0x3c, 0xdc,
	0x4a, 0x58, 0x2c, 0x69, 0x2c, 0x9a, 0x9f, 0x4d, 0xcb, 0x88, 0x1f, 0x5b, 0x5d, 0x10, 0xa7, 0x00,
	0x99, 0x14, 0x11, 0x47, 0x6c, 0x39, 0x01, 0x8d, 0x11, 0xa7, 0x01, 0xa7, 0xa1, 0x7e, 0x55, 0x1e,
	0x1c, 0x71, 0x65, 0x2b, 0x98, 0x6e, 0x46, 0x93, 0xd8, 0x5b, 0xe2, 0xe7, 0x46, 0x56, 0xea, 0xdc,
	0x68, 0x41, 0x9e, 0x1b, 0xf1, 0xfd, 0xae, 0xe0, 0xbb, 0x1e, 0x49, 0xbf, 0x58, 0xa5, 0xfb, 0x03,
	0xc9, 0x72, 0x72, 0x45, 0xc8, 0x2f, 0xdf, 0x92, 0x6b, 0x27, 0x7e, 0xf9, 0xc6, 0x57, 0xaf, 0x5f,
	0xcc, 0x15, 0x0f, 0xbf, 0x98, 0x2b, 0xa5, 0x2f, 0xe6, 0xce, 0x02, 0x90, 0xd5, 0x74, 0xb4, 0x6b,
	0x24, 0x0d, 0x93, 0xbe, 0x96, 0xab, 0x64, 0xaf, 0xe5, 0xce, 0xc3, 0xf1, 0x76, 0x1c, 0x6c, 0xc6,
	0xd1, 0xbe, 0xb8, 0x3e, 0x13, 0x46, 0x90, 0xc1, 0x72, 0xcd, 0xec, 0x38, 0xf2, 0xe6, 0x88, 0x03,
	0x89, 0xbe, 0xea, 0xba, 0x49, 0xcd, 0x42, 0xa5, 0x1b, 0xd9, 0xbb, 0x8e, 0xc8, 0x60, 0x39, 0x80,
	0xab, 0x5b, 0xb5, 0x9f, 0x76, 0x70, 0x73, 0xb4, 0x60, 0xbe, 0x84, 0x6a, 0x90, 0x30, 0xae, 0x0e,
	0xff, 0x47, 0x13, 0xe7, 0xb7, 0x83, 0x12, 0xc4, 0xd5, 0x89, 0x51, 0x68, 0xd0, 0x53, 0xf4, 0x9d,
	0x86, 0x41, 0xaa, 0x9d, 0x50, 0xf4, 0x1e, 0xe3, 0x54, 0x25, 0x8c, 0x1b, 0xa1, 0x13, 0xae, 0xf3,
	0xd7, 0x41, 0xd8, 0x23, 0x20, 0xc4, 0x2f, 0x3a, 0x6e, 0x38, 0x8a, 0xc5, 0x3b, 0x34, 0x01, 0xd1,
	0x91, 0x93, 0x1d, 0x46, 0x9b, 0xfb, 0x51, 0x8b, 0x71, 0x2e, 0x04, 0x68, 0x3c, 0x06, 0x53, 0xa2,
	0xb9, 0x65, 0x07, 0xf6, 0x5e, 0x6b, 0x26, 0xd7, 0xe8, 0x48, 0x8b, 0x56, 0x6a, 0x24, 0xd2, 0xec,
	0x84, 0xab, 0xb1, 0xed, 0xed, 0xd2, 0xf3, 0xa0, 0xba, 0x25, 0x41, 0xd4, 0x4b, 0x27, 0xec, 0xf9,
	0xf1, 0x18, 0x05, 0x72, 0x82, 0x57, 0x99, 0x0a, 0xc1, 0xbf, 0x43, 0x6e, 0xaf, 0xcb, 0xd7, 0x6b,
	0x02, 0x44, 0xf7, 0xc5, 0xdd, 0x20, 0x25, 0x3a, 0xf2, 0xf1, 0x9a, 0x86, 0x4a, 0x7b, 0xce, 0xb9,
	0xac, 0xe7, 0xcc, 0xb8, 0xbf, 0x53, 0x13, 0xee, 0xcf, 0x30, 0x61, 0xaa, 0x13, 0x76, 0x9d, 0xb1,
	0xc3, 0x3f, 0x6a, 0xb5, 0x68, 0x48, 0x0a, 0x67, 0x5c, 0x80, 0x69, 0x0e, 0x27, 0x94, 0xee, 0xa7,
	0x61, 0x59, 0x74, 0xc2, 0x2f, 0x37, 0xfa, 0xd3, 0x24, 0x59, 0x1d, 0x85, 0xfa, 0x78, 0xd2, 0xb5,
	0x6f, 0x8c, 0xe2, 0xd6, 0x03, 0x3c, 0x73, 0xe2, 0x10, 0xae, 0x63, 0x33, 0x8e, 0x6e, 0x8c, 0xec,
	0xa1, 0xed, 0xb5, 0xce, 0x50, 0x57, 0x82, 0x30, 0x6f, 0xa7, 0x9c, 0x02, 0xbf, 0x99, 0x4d, 0x6f,
	0x67, 0xf9, 0xd0, 0x21, 0xd9, 0xce, 0x17, 0x60, 0xba, 0x97, 0xae, 0x57, 0x65, 0x19, 0x9b, 0x41,
	0xa7, 0x36, 0x37, 0x77, 0x0b, 0xc9, 0xe6, 0xde, 0x95, 0x47, 0xbe, 0x99, 0x58, 0x99, 0x71, 0x7a,
	0x47, 0x8e, 0x95, 0x9a, 0x41, 0x96, 0x75, 0x83, 0x34, 0xdf, 0x95, 0x72, 0x22, 0xb8, 0x25, 0x0e,
	0x8b, 0x0f, 0x73, 0x50, 0x6d, 0xc7, 0x41, 0x12, 0x22, 0x04, 0x34, 0xb1, 0x0c, 0xdd, 0x47, 0x3d,
	0x91, 0x0a, 0x5a, 0x5a, 0x36, 0x91, 0xa1, 0xad, 0x45, 0x9a, 0x62, 0x3a, 0xd2, 0xe4, 0x07, 0xe1,
	0xb7, 0xa7, 0xc4, 0x93, 0xe4, 0x20, 0x93, 0x2c, 0xe7, 0xe6, 0x20, 0x37, 0x14, 0x5b, 0x99, 0xfc,
	0x20, 0xf3, 0xfd, 0xff, 0x24, 0x3f, 0xb8, 0x46, 0x8f, 0x76, 0x14, 0xed, 0x54, 0x96, 0x90, 0x21,
	0x7f, 0xef, 0x2c, 0xe1, 0x51, 0x19, 0x1d, 0x53, 0xb9, 0xc2, 0x3d, 0x23, 0xfe, 0x6b, 0x78, 0xfa,
	0x26, 0xfd, 0x45, 0xc2, 0x69, 0x41, 0xe7, 0xf4, 0x9b, 0x05, 0x35, 0x8c, 0xc7, 0xbb, 0x43, 0xee,
	0xc3, 0xb8, 0x53, 0x2e, 0xea, 0x4e, 0x39, 0xb1, 0xa6, 0x52, 0xca, 0xbd, 0xa1, 0x5b, 0xd6, 0x6b,
	0xa7, 0xae, 0x3c, 0xec, 0xeb, 0xa9, 0xcb, 0x21, 0x59, 0x7d, 0x26, 0x18, 0xba, 0x42, 0x18, 0xc5,
	0xfc, 0x51, 0x5b, 0xdd, 0xa2, 0xb6, 0xb8, 0x7e, 0x1f, 0x20, 0x9a, 0xdf, 0xc4, 0x48, 0x10, 0x95,
	0xb2, 0x44, 0x6f, 0x0a, 0x50, 0x66, 0x75, 0xee, 0xd4, 0x14, 0xe2, 0xe2, 0xa3, 0xb2, 0xd7, 0xf5,
	0x3d, 0xa3, 0x0e, 0xe5, 0xe5, 0x85, 0x6e, 0x8f, 0xdd, 0x67, 0x34, 0xa0, 0xd2, 0xdd, 0xdc, 0xee,
	0xad, 0xb2, 0x02, 0x22, 0xaf, 0x2f, 0x77, 0x7b, 0xac, 0x88, 0xc8, 0x8d, 0x4d, 0xab, 0xb7, 0xca,
	0x4a, 0x17, 0x3f, 0x73, 0x1a, 0x2a, 0xeb, 0xe1, 0x6e, 0x67, 0xc9, 0x00, 0xa8, 0xae, 0x77, 0x57,
	0xfa, 0x1b, 0x9b, 0xec, 0x3e, 0xd9, 0xde, 0xbc, 0xc6, 0x0a, 0xc6, 0x31, 0x68, 0x60, 0x9b, 0x9e,
	0x6e, 0xb3, 0xa1, 0x31, 0x03, 0xc7, 0x10, 0x54, 0x2f, 0x1d, 0x99, 0x67, 0x9c, 0x80, 0x69, 0x44,
	0x69, 0x2f, 0xc6, 0xd8, 0x6d, 0xc3, 0x80, 0xe3, 0x88, 0x4c, 0x1e, 0x66, 0xb1, 0x3b, 0xc6, 0xfd,
	0x70, 0x92, 0x06, 0x66, 0xdf, 0x75, 0xb1, 0x67, 0x8c, 0x19, 0x98, 0x22, 0xb2, 0xe2, 0x27, 0x47,
	0xec, 0xbd, 0x05, 0xc3, 0xe0, 0x33, 0xa9, 0xf7, 0x8e, 0xec, 0x83, 0x05, 0xe3, 0x24, 0x30, 0xc4,
	0xe9, 0x3f, 0xf2, 0x61, 0x1f, 0x29, 0x18, 0xe7, 0xe0, 0xb4, 0x64, 0x6a, 0xf2, 0x57, 0x40, 0xec,
	0x37, 0x15, 0x2d, 0xf5, 0x2a, 0x8e, 0x7d, 0x5c, 0xe1, 0xd4, 0x43, 0x46, 0xf6, 0xe9, 0x82, 0x71,
	0x0a, 0x0c, 0x85, 0x53, 0xaf, 0xef, 0xd8, 0xe7, 0xd5, 0x60, 0xf5, 0x72, 0x8e, 0x7d, 0xb9, 0x60,
	0x30, 0x68, 0x22, 0x4e, 0x3c, 0xb3, 0x62, 0x7f, 0x91, 0x60, 0xf8, 0x63, 0x28, 0xf6, 0x55, 0xf5,
	0x9d, 0x7a, 0x31, 0xc2, 0x9e, 0x2b, 0x18, 0x27, 0xb8, 0x68, 0x08, 0x47, 0x2f, 0xc5, 0xd8, 0x37,
	0x15, 0x32, 0xf9, 0xf5, 0x0a, 0x7b, 0x5e, 0x2d, 0x57, 0xff, 0xc9, 0x0a, 0x7b, 0xa9, 0x60, 0xcc,
	0x72, 0x81, 0x6b, 0xbf, 0x4a, 0x61, 0x3f, 0x2e, 0x18, 0x67, 0xe0, 0x94, 0xc4, 0x66, 0x7e, 0x76,
	0xc2, 0xde, 0x57, 0x94, 0x02, 0x96, 0xbf, 0x35, 0x61, 0xcf, 0x16, 0x25, 0x75, 0xf9, 0x01, 0xa1,
	0x3f, 0x5a, 0x34, 0x8e, 0x41, 0x9d, 0xb4, 0x34, 0xf2, 0x0f, 0xd8, 0x27, 0x15, 0xb8, 0xe5, 0x78,
	0xbb, 0xec, 0x33, 0x0a, 0xbc, 0xe6, 0x7b, 0xbb, 0xec, 0x0b, 0x0a, 0xec, 0xb9, 0xde, 0x2e, 0xfb,
	0xd3, 0xa2, 0x31, 0x05, 0x35, 0x04, 0xaf, 0xbb, 0x1e, 0xfb, 0x4a, 0xf2, 0xa9, 0x1d, 0x86, 0xec,
	0x6b, 0x8a, 0x05, 0x79, 0xa7, 0xc6, 0xbe, 0x55, 0x94, 0x2b, 0xd1, 0x1e, 0x56, 0xb0, 0xef, 0x16,
	0xa5, 0x18, 0xc5, 0x63, 0x09, 0xf6, 0xb2, 0xc6, 0x93, 0x1d, 0xb1, 0x1f, 0xa9, 0xcf, 0xb4, 0x6b,
	0x10, 0xf6, 0x1f, 0x45, 0x63, 0x1a, 0x80, 0x2c, 0x98, 0x0a, 0x45, 0xf6, 0xfe, 0x92, 0xa4, 0x23,
	0x8c, 0x81, 0xfd, 0x6a, 0x49, 0xd2, 0x79, 0xc2, 0x8f, 0x1c, 0xf6, 0x6b, 0x25, 0x63, 0x0e, 0x66,
	0x88, 0x23, 0x2a, 0x71, 0xfb, 0xfc, 0x24, 0x90, 0x7d, 0xa8, 0x24, 0x95, 0xb1, 0xea, 0xef, 0x39,
	0x7d, 0x3a, 0x1a, 0x60, 0xbf, 0x5e, 0x52, 0xca, 0xa0, 0xb7, 0x53, 0xfc, 0x1c, 0x8d, 0x7d, 0xb8,
	0x94, 0x32, 0xad, 0x6b, 0xee, 0xe0, 0x16, 0xfb, 0x0d, 0x35, 0x0d, 0x96, 0xc3, 0xec, 0x63, 0xea,
	0x4b, 0xbd, 0x92, 0x66, 0xbf, 0xa5, 0xd0, 0x7a, 0x5d, 0xc3, 0x3e, 0xdb, 0x48, 0xa1, 0x45, 0x34,
	0x60, 0x7f, 0xd0, 0x90, 0x6b, 0xd6, 0x1c, 0x3f, 0xfb, 0x5c, 0x1a, 0xcb, 0xa3, 0x25, 0xfb, 0xc3,
	0x86, 0xe4, 0x49, 0x95, 0x16, 0xec, 0xf3, 0x09, 0x59, 0xcd, 0xf3, 0xb3, 0x3f, 0x6a, 0x18, 0x2d,
	0x38, 0x91, 0xa0, 0x95, 0x03, 0x66, 0x5f, 0x50, 0x44, 0x94, 0x07, 0x66, 0x5f, 0x6c, 0x18, 0xa7,
	0x39, 0x0e, 0x6b, 0x7d, 0xba, 0x0b, 0x63, 0xff, 0x25, 0xff, 0x29, 0x53, 0x57, 0xbf, 0xf3, 0x60,
	0xff, 0xa6, 0x04, 0x9c, 0x7a, 0x34, 0xc5, 0xfe, 0x53, 0x2d, 0x5d, 0xbe, 0x54, 0x25, 0xf4, 0x07,
	0xca, 0xfa, 0x70, 0xf5, 0x34, 0x9b, 0xfd, 0xca, 0x24, 0x9e, 0x1c, 0xcf, 0x87, 0x52, 0xf8, 0xc4,
	0x4d, 0xfc, 0x76, 0x59, 0x2a, 0x5e, 0xbc, 0x76, 0x66, 0xbf, 0x5b, 0x96, 0xcb, 0xcc, 0xbc, 0x5d,
	0x66, 0x9f, 0x2d, 0x1b, 0x0f, 0xc0, 0x9c, 0x1c, 0x9b, 0xd9, 0xf6, 0x7f, 0x92, 0xf9, 0x2c, 0xd9,
	0xfc, 0x5f, 0xd5, 0x7b, 0x52, 0x8e, 0xef, 0xaf, 0xcb, 0xc6, 0x59, 0xb8, 0x5f, 0xf5, 0x4c, 0x78,
	0xba, 0xbf, 0x29, 0x4b, 0x1f, 0x93, 0x7e, 0xb6, 0xca, 0xbe, 0x51, 0x96, 0xba, 0xd4, 0x5e, 0x97,
	0xb2, 0xbf, 0x2f, 0x4b, 0x5b, 0x4c, 0x9e, 0xec, 0xb1, 0xef, 0xe8, 0x0b, 0x4f, 0xde, 0x79, 0xb2,
	0x17, 0xb2, 0x78, 0xe1, 0x86, 0x5e, 0xcc, 0xac, 0x43, 0x55, 0x4c, 0xec, 0x7b, 0x65, 0xe3, 0x34,
	0xf7, 0xc9, 0x13, 0x2f, 0xf8, 0xd8, 0x0f, 0x33, 0x0c, 0x91, 0x67, 0x62, 0xff, 0x5c, 0xd6, 0x75,
	0xa7, 0xdc, 0xc6, 0x2f, 0x55, 0x8c, 0x07, 0xa1, 0x25, 0xd1, 0xd9, 0x97, 0x5d, 0xec, 0xc3, 0x15,
	0xe3, 0x7e, 0x98, 0x4d, 0x75, 0xcb, 0xcd, 0xfd, 0x3b, 0x15, 0x5d, 0x03, 0xe9, 0x17, 0x56, 0xec,
	0x53, 0xfa, 0x77, 0xa9, 0xe7, 0x53, 0xec, 0x73, 0x95, 0xcc, 0xa2, 0xe4, 0x43, 0x29, 0xf6, 0x67,
	0x95, 0xb4, 0x18, 0xc4, 0xcb, 0x25, 0xf6, 0x97, 0x19, 0xbc, 0x78, 0x67, 0xc4, 0xbe, 0x51, 0xd1,
	0x97, 0x24, 0x9f, 0x0c, 0xb1, 0x6f, 0x57, 0xa4, 0xe8, 0x93, 0x77, 0x3f, 0xec, 0x07, 0x19, 0x24,
	0x79, 0xc5, 0x7f, 0xc9, 0x20, 0xc9, 0x37, 0xfe, 0x7b, 0x45, 0xdb, 0x10, 0xfc, 0x49, 0x0c, 0x7b,
	0x6f, 0x35, 0x3d, 0x70, 0x29, 0xb0, 0x0f, 0xd8, 0x07, 0xab, 0x69, 0x39, 0x53, 0x7e, 0xc0, 0x3e,
	0x52, 0xd5, 0xc4, 0x82, 0x43, 0xf5, 0x80, 0xf6, 0xf1, 0x6a, 0x5a, 0x2c, 0xc9, 0xe3, 0x0a, 0xf6,
	0xe9, 0xaa, 0xa6, 0xd1, 0xf4, 0xcb, 0x09, 0xf6, 0xf9, 0xaa, 0xbe, 0x50, 0xe5, 0x86, 0xbf, 0xac,
	0x53, 0x4b, 0xbd, 0x7a, 0x60, 0xcf, 0x55, 0xd3, 0x22, 0x13, 0x81, 0x88, 0x7d, 0xb3, 0xaa, 0x3c,
	0x32, 0x4a, 0xf0, 0xf9, 0xaa, 0xf4, 0xed, 0xca, 0x7a, 0x5e, 0xaa, 0x66, 0xa5, 0x67, 0x47, 0xec,
	0x5f, 0xab, 0xfa, 0xb6, 0xd1, 0xbd, 0xf7, 0x8f, 0xf5, 0xe1, 0xd2, 0x83, 0x3f, 0x5b, 0x93, 0xc3,
	0xb7, 0xb7, 0x96, 0x16, 0x7a, 0xcb, 0xfd, 0xed, 0xee, 0xb2, 0xd5, 0xd9, 0xb8, 0xba, 0xc9, 0x3e,
	0x59, 0xcb, 0x48, 0xbc, 0xd3, 0xbe, 0xc6, 0xbe, 0x55, 0x93, 0x21, 0x90, 0x68, 0x6c, 0xf6, 0x3a,
	0x57, 0x9f, 0xea, 0x5b, 0xcb, 0xed, 0xd5, 0x05, 0x6b, 0x65, 0x99, 0xbd, 0x50, 0x4b, 0x0b, 0xb4,
	0x67, 0x2d, 0x6c, 0x74, 0xaf, 0x2e, 0x5b, 0xfd, 0xd5, 0xed, 0x05, 0xf6, 0x62, 0x4d, 0xdf, 0x07,
	0xe9, 0x70, 0xf0, 0x85, 0x9a, 0xbe, 0x63, 0xb5, 0x90, 0xf0, 0xc5, 0x9a, 0x2e, 0xb7, 0x54, 0x58,
	0xf8, 0x52, 0xaa, 0x2b, 0xe5, 0xf7, 0xff, 0xb8, 0x26, 0x65, 0x25, 0x0f, 0x4c, 0xd9, 0xcb, 0x6a,
	0x76, 0xc1, 0x74, 0xb7, 0xb7, 0x60, 0xf5, 0xfa, 0x2b, 0x0b, 0xeb, 0xcb, 0xec, 0x7d, 0x6a, 0x76,
	0xd9, 0xb7, 0xbd, 0xbe, 0xbe, 0x60, 0x3d, 0xc5, 0x3e, 0x9a, 0xed, 0x58, 0xea, 0x74, 0x17, 0x17,
	0x36, 0x96, 0xd8, 0x67, 0xb2, 0xd4, 0x50, 0x6a, 0x48, 0xb2, 0xb7, 0xcc, 0xbe, 0xa2, 0xe4, 0x26,
	0xfa, 0x7a, 0x9d, 0x2d, 0xf6, 0xb5, 0x9a, 0x34, 0x40, 0x81, 0x24, 0x69, 0xfe, 0x95, 0x92, 0xa6,
	0xa4, 0xbf, 0xdc, 0xed, 0x6d, 0x5a, 0x4f, 0xf5, 0xad, 0xcd, 0xcd, 0x75, 0xf6, 0x75, 0xa5, 0x9a,
	0xac, 0x9c, 0xbf, 0x9b, 0x9d, 0x1e, 0x97, 0x81, 0xcd, 0xf6, 0x32, 0xfb, 0x91, 0xd2, 0x81, 0xe8,
	0x5b, 0x5b, 0x7e, 0x62, 0x79, 0xad, 0xbd, 0xba, 0xb0, 0xb1, 0xb2, 0xcc, 0xbe, 0x5e, 0x4f, 0x2b,
	0x28, 0x15, 0x16, 0x9f, 0x6f, 0xa6, 0x2d, 0x3e, 0x39, 0xd0, 0x63, 0xdf, 0x69, 0xa6, 0x1d, 0x41,
	0x12, 0xf4, 0xbe, 0xdb, 0xd4, 0x34, 0xa7, 0x1d, 0xa2, 0xb1, 0x17, 0xf2, 0xa8, 0xf1, 0x7d, 0xf7,
	0x62, 0x53, 0x73, 0x64, 0x13, 0x47, 0x4c, 0xec, 0x1f, 0xf2, 0xbe, 0xe4, 0x9e, 0xf1, 0x7b, 0xcd,
	0xf4, 0xce, 0xd3, 0x43, 0xf2, 0xf7, 0xf3, 0xa8, 0xaa, 0x9a, 0x93, 0xfd, 0xa0, 0x99, 0xb3, 0x74,
	0x19, 0xfa, 0xff, 0x31, 0x8f, 0xae, 0x48, 0x00, 0x5e, 0xca, 0x7e, 0xa8, 0x07, 0xf7, 0x1f, 0x36,
	0xb5, 0x50, 0x34, 0x59, 0x97, 0xb1, 0x97, 0x33, 0x82, 0x4b, 0x02, 0xfd, 0x3f, 0xd1, 0x2a, 0x57,
	0x7a, 0x4f, 0x6d, 0x2d, 0xf7, 0xbb, 0x6e, 0x7b, 0x14, 0xdb, 0x5e, 0xff, 0xc9, 0xd8, 0x59, 0x73,
	0x63, 0xf6, 0x8d, 0x69, 0xe4, 0x66, 0xa2, 0xeb, 0xc6, 0xc8, 0xf6, 0xd8, 0xb7, 0xb5, 0xbe, 0x1b,
	0x23, 0xe7, 0x71, 0xd7, 0xf6, 0x76, 0xfb, 0x4f, 0xba, 0x37, 0x46, 0x7e, 0xcc, 0xbe, 0x74, 0x0a,
	0x25, 0x30, 0xd1, 0x67, 0x7b, 0xbb, 0x5d, 0xfc, 0xf4, 0xcf, 0x4f, 0xa1, 0x61, 0x0a, 0xb2, 0xb6,
	0xc7, 0xc5, 0xf2, 0xf1, 0x73, 0xe8, 0xaf, 0xe4, 0x5c, 0x81, 0x23, 0xd0, 0x9f, 0x38, 0x87, 0x3b,
	0x88, 0xa3, 0xb7, 0x5c, 0x2f, 0x1c, 0xb9, 0xec, 0x93, 0xe7, 0x50, 0x0e, 0x19, 0xea, 0x37, 0x46,
	0x8e, 0xb7, 0x6a, 0xbb, 0xec, 0x6f, 0x4f, 0xe5, 0xb0, 0xb5, 0xe8, 0xb8, 0xe3, 0xd8, 0x63, 0x2f,
	0x9e, 0x42, 0x07, 0xd7, 0xa5, 0x3e, 0x3d, 0x60, 0x7d, 0xe0, 0x21, 0xe4, 0x87, 0xe3, 0xe5, 0xab,
	0x5c, 0xf6, 0x8b, 0x0f, 0x5d, 0xfc, 0xbb, 0x22, 0xfd, 0x0c, 0x3e, 0x72, 0xe8, 0x17, 0xe8, 0x4c,
	0xdd, 0x89, 0xf5, 0x37, 0xfc, 0x60, 0xcf, 0x1e, 0xb3, 0xfb, 0xb0, 0x18, 0x4a, 0xb0, 0x14, 0x81,
	0x59, 0x05, 0x8b, 0x26, 0x0d, 0xe9, 0x46, 0xac, 0x9a, 0x1e, 0xc7, 0x83, 0x3d, 0x60, 0xd1, 0x94,
	0x20, 0x31, 0x12, 0xb1, 0x69, 0xe3, 0x24, 0xcc, 0xa4, 0x71, 0x5b, 0x71, 0xc4, 0x66, 0x8d, 0x39,
	0x30, 0xd2, 0x68, 0x0a, 0x5a, 0x67, 0x8d, 0x16, 0xcc, 0x26, 0xf8, 0x25, 0x37, 0x1c, 0xf8, 0x9e,
	0xe7, 0x0c, 0x22, 0x76, 0x21, 0xcd, 0xef, 0x9a, 0xef, 0xdf, 0x72, 0x02, 0x76, 0x79, 0x92, 0x0e,
	0xe5, 0xc6, 0x6f, 0xc3, 0xd1, 0x58, 0x6e, 0xa4, 0x56, 0x47, 0xf9, 0x5c, 0x82, 0xc5, 0x78, 0x8b,
	0x79, 0xff, 0x73, 0x54, 0xa8, 0x24, 0xf8, 0x6e, 0xe4, 0xef, 0x3b, 0x43, 0x51, 0xd4, 0x24, 0x68,
	0x22, 0xfc, 0x3c, 0x55, 0x2f, 0x09, 0x92, 0xef, 0xba, 0x97, 0x0a, 0x17, 0x3f, 0x55, 0x80, 0x2a,
	0x55, 0x7f, 0x4b, 0xc6, 0x14, 0xff, 0xd3, 0x13, 0xfd, 0xa1, 0xb3, 0xc3, 0xee, 0x33, 0x8e, 0x03,
	0x10, 0x74, 0xe9, 0xd1, 0x3d, 0xd7, 0x63, 0x27, 0x14, 0x7c, 0xf9, 0x8d, 0x08, 0xcf, 0x2a, 0xf8,
	0x0a, 0xc1, 0x27, 0x15, 0xfc, 0x66, 0x82, 0xe7, 0x8c, 0x69, 0x68, 0x12, 0xfc, 0x26, 0x8a, 0x92,
	0xac, 0xac, 0x10, 0x8f, 0x71, 0x44, 0xdd, 0x60, 0x30, 0xc5, 0x67, 0x78, 0x33, 0xc7, 0x34, 0xb0,
	0xe6, 0xe5, 0x98, 0x2d, 0xfb, 0x0e, 0x3b, 0xa5, 0xc0, 0x37, 0x21, 0xd8, 0xba, 0x59, 0xa5, 0xbf,
	0x8e, 0x72, 0xe5, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x56, 0x0f, 0xd1, 0x2e, 0x33, 0x45, 0x00,
	0x00,
}
